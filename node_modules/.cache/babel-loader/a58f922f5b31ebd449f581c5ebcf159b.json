{"ast":null,"code":"var _jsxFileName = \"/home/konstantin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/react-ui-biconomy/react-ui/src/components/Web3_EIP2771_API.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { helperAttributes, getDomainSeperator, getDataToSignForPersonalSign, getDataToSignForEIP712, buildForwardTxRequest, getBiconomyForwarderConfig } from '../api-helpers/biconomyForwarderHelpers';\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Web3 from \"web3\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\n\nlet sigUtil = require(\"eth-sig-util\");\n\nlet config = {\n  contract: {\n    address: \"0x880176EDA9f1608A2Bf182385379bDcC1a65Dfcf\",\n    abi: [{\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"forwarder\",\n        \"type\": \"address\"\n      }],\n      \"name\": \"isTrustedForwarder\",\n      \"outputs\": [{\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"quote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"trustedForwarder\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"newQuote\",\n        \"type\": \"string\"\n      }],\n      \"name\": \"setQuote\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getQuote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"currentQuote\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"address\",\n        \"name\": \"currentOwner\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"versionRecipient\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }]\n  },\n  apiKey: {\n    test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n    prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n  },\n  api: {\n    test: \"https://test-api.biconomy.io\",\n    prod: \"https://api.biconomy.io\"\n  }\n};\nlet web3, walletWeb3, biconomy;\nlet contract;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2)\n    }\n  },\n  link: {\n    marginLeft: \"5px\"\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    opacity: '.85!important',\n    background: '#000'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const preventDefault = event => event.preventDefault();\n\n  const [backdropOpen, setBackdropOpen] = React.useState(true);\n  const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(\"\");\n  const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n  useEffect(() => {\n    async function init() {\n      if (typeof window.ethereum !== \"undefined\" && window.ethereum.isMetaMask) {\n        // Ethereum user detected. You can now use the provider.\n        const provider = window[\"ethereum\"];\n        await provider.enable();\n        let kovanProvider = new Web3.providers.HttpProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n        setLoadingMessage(\"Initializing Biconomy ...\");\n        biconomy = new Biconomy(kovanProvider, {\n          walletProvider: window.ethereum,\n          apiKey: config.apiKey.prod,\n          debug: true\n        }); // This web3 instance is used to read normally and write to contract via meta transactions.\n\n        web3 = new Web3(biconomy); // This web3 instance is used to get user signature from connected wallet\n\n        walletWeb3 = new Web3(window.ethereum);\n        biconomy.onEvent(biconomy.READY, () => {\n          // Initialize your dapp here like getting user accounts etc\n          contract = new web3.eth.Contract(config.contract.abi, config.contract.address);\n          setSelectedAddress(provider.selectedAddress);\n          getQuoteFromNetwork();\n          provider.on(\"accountsChanged\", function (accounts) {\n            setSelectedAddress(accounts[0]);\n          });\n        }).onEvent(biconomy.ERROR, (error, message) => {// Handle error while initializing mexa\n        });\n      } else {\n        showErrorMessage(\"Metamask not installed\");\n      }\n    }\n\n    init();\n  }, []);\n\n  const handleClose = () => {\n    setBackdropOpen(false);\n  };\n\n  const handleToggle = () => {\n    setBackdropOpen(!backdropOpen);\n  };\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  const onSubmitWithPrivateKey = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n      console.log(\"Sending meta transaction\");\n      let privateKey = \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n      let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n      let txGas = await contract.methods.setQuote(newQuote).estimateGas({\n        from: userAddress\n      });\n      let functionSignature = contract.methods.setQuote(newQuote).encodeABI();\n      let forwarder = await getBiconomyForwarderConfig(42);\n      let forwarderContract = new web3.eth.Contract(forwarder.abi, forwarder.address);\n      const batchNonce = await forwarderContract.methods.getNonce(userAddress, 0).call(); //const batchId = await forwarderContract.methods.getBatch(userAddress).call();\n\n      console.log(batchNonce);\n      const to = config.contract.address;\n      const gasLimitNum = Number(txGas);\n      const batchId = 0;\n      const request = await buildForwardTxRequest({\n        account: userAddress,\n        to,\n        gasLimitNum,\n        batchId,\n        batchNonce,\n        data: functionSignature\n      });\n      console.log(request); //you do not need domain seperator in case of personal sign\n      //const domainSeparator = await getDomainSeperator(42);\n      //console.log(domainSeparator);\n      //const dataToSign = await getDataToSignForEIP712(request, 42);\n      //const sig = sigUtil.signTypedMessage(new Buffer.from(privateKey, 'hex'), { data: dataToSign }, 'V4');\n\n      const messageToSign = getDataToSignForPersonalSign(request, 42);\n      let {\n        signature\n      } = web3.eth.accounts.sign(\"0x\" + messageToSign.toString(\"hex\"), privateKey);\n      sendTransaction({\n        userAddress,\n        request,\n        sig: signature,\n        signatureType: biconomy.PERSONAL_SIGN\n      }); //notice domain seperator is not passed here         \n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const onSubmitWithEIP712 = async event => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        let userAddress = selectedAddress;\n        let functionSignature = contract.methods.setQuote(newQuote).encodeABI();\n        debugger;\n        let txGas = await contract.methods.setQuote(newQuote).estimateGas({\n          from: userAddress\n        });\n        let forwarder = await getBiconomyForwarderConfig(42);\n        let forwarderContract = new web3.eth.Contract(forwarder.abi, forwarder.address);\n        const batchNonce = await forwarderContract.methods.getNonce(userAddress, 0).call(); //const batchId = await forwarderContract.methods.getBatch(userAddress).call();\n\n        console.log(batchNonce);\n        const to = config.contract.address;\n        const gasLimitNum = Number(txGas);\n        const batchId = 0;\n        const request = await buildForwardTxRequest({\n          account: userAddress,\n          to,\n          gasLimitNum,\n          batchId,\n          batchNonce,\n          data: functionSignature\n        });\n        console.log(request); //you do not need domain seperator in case of personal sign\n\n        const domainSeparator = await getDomainSeperator(42);\n        console.log(domainSeparator);\n        const dataToSign = await getDataToSignForEIP712(request, 42);\n        walletWeb3.currentProvider.send({\n          jsonrpc: \"2.0\",\n          id: 999999999999,\n          method: \"eth_signTypedData_v4\",\n          params: [userAddress, dataToSign]\n        }, function (error, response) {\n          console.info(`User signature is ${response.result}`);\n\n          if (error || response && response.error) {\n            showErrorMessage(\"Could not get user signature\");\n          } else if (response && response.result) {\n            let sig = response.result;\n            sendTransaction({\n              userAddress,\n              request,\n              domainSeparator,\n              sig,\n              signatureType: biconomy.EIP712_SIGN\n            });\n          }\n        });\n      } else {\n        console.log(\"Sending normal transaction\");\n        contract.methods.setQuote(newQuote).send({\n          from: selectedAddress\n        }).on(\"transactionHash\", function (hash) {\n          showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n        }).once(\"confirmation\", function (confirmationNumber, receipt) {\n          setTransactionHash(receipt.transactionHash);\n          showSuccessMessage(\"Transaction confirmed\");\n          getQuoteFromNetwork();\n        });\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const onSubmitWithPersonal = async event => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        let userAddress = selectedAddress;\n        let functionSignature = contract.methods.setQuote(newQuote).encodeABI();\n        debugger;\n        let txGas = await contract.methods.setQuote(newQuote).estimateGas({\n          from: userAddress\n        });\n        let forwarder = await getBiconomyForwarderConfig(42);\n        let forwarderContract = new web3.eth.Contract(forwarder.abi, forwarder.address);\n        const batchNonce = await forwarderContract.methods.getNonce(userAddress, 0).call(); //const batchId = await forwarderContract.methods.getBatch(userAddress).call();\n\n        console.log(batchNonce);\n        const to = config.contract.address;\n        const gasLimitNum = Number(txGas);\n        const batchId = 0;\n        const request = await buildForwardTxRequest({\n          account: userAddress,\n          to,\n          gasLimitNum,\n          batchId,\n          batchNonce,\n          data: functionSignature\n        });\n        console.log(request); //you do not need domain seperator in case of personal sign\n        //const domainSeparator = await getDomainSeperator(42);\n        //console.log(domainSeparator);\n\n        const hashToSign = getDataToSignForPersonalSign(request);\n        const sig = await walletWeb3.eth.personal.sign(\"0x\" + hashToSign.toString(\"hex\"), userAddress);\n        console.log('signature ' + sig);\n        sendTransaction({\n          userAddress,\n          request,\n          sig,\n          signatureType: \"PERSONAL_SIGN\"\n        });\n      } else {\n        console.log(\"Sending normal transaction\");\n        contract.methods.setQuote(newQuote).send({\n          from: selectedAddress\n        }).on(\"transactionHash\", function (hash) {\n          showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n        }).once(\"confirmation\", function (confirmationNumber, receipt) {\n          setTransactionHash(receipt.transactionHash);\n          showSuccessMessage(\"Transaction confirmed\");\n          getQuoteFromNetwork();\n        });\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const getSignatureParameters = signature => {\n    if (!web3.utils.isHexStrict(signature)) {\n      throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n    }\n\n    var r = signature.slice(0, 66);\n    var s = \"0x\".concat(signature.slice(66, 130));\n    var v = \"0x\".concat(signature.slice(130, 132));\n    v = web3.utils.hexToNumber(v);\n    if (![27, 28].includes(v)) v += 27;\n    return {\n      r: r,\n      s: s,\n      v: v\n    };\n  };\n\n  const getQuoteFromNetwork = () => {\n    setLoadingMessage(\"Getting Quote from contact ...\");\n\n    try {\n      if (web3 && contract) {\n        contract.methods.getQuote().call().then(function (result) {\n          handleClose();\n          console.log(result);\n\n          if (result && result.currentQuote != undefined && result.currentOwner != undefined) {\n            if (result.currentQuote == \"\") {\n              showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n              setQuote(result.currentQuote);\n              setOwner(result.currentOwner);\n            }\n          } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n          }\n        });\n      } else {\n        handleClose();\n      }\n    } catch (error) {\n      handleClose();\n      console.log(error);\n    }\n  };\n\n  const showErrorMessage = message => {\n    NotificationManager.error(message, \"Error\", 5000);\n  };\n\n  const showSuccessMessage = message => {\n    NotificationManager.success(message, \"Message\", 3000);\n  };\n\n  const showInfoMessage = message => {\n    NotificationManager.info(message, \"Info\", 3000);\n  };\n\n  const getTransactionReceiptMined = (txHash, interval) => {\n    const self = this;\n\n    const transactionReceiptAsync = async function (resolve, reject) {\n      var receipt = await web3.eth.getTransactionReceipt(txHash);\n\n      if (receipt == null) {\n        setTimeout(() => transactionReceiptAsync(resolve, reject), interval ? interval : 500);\n      } else {\n        resolve(receipt);\n      }\n    };\n\n    if (typeof txHash === \"string\") {\n      return new Promise(transactionReceiptAsync);\n    } else {\n      throw new Error(\"Invalid Type: \" + txHash);\n    }\n  };\n\n  const sendTransaction = async _ref => {\n    let {\n      userAddress,\n      request,\n      sig,\n      domainSeparator,\n      signatureType\n    } = _ref;\n\n    if (web3 && contract) {\n      let params;\n\n      if (domainSeparator) {\n        params = [request, domainSeparator, sig];\n      } else {\n        params = [request, sig];\n      }\n\n      try {\n        fetch(`${config.api.prod}/api/v2/meta-tx/native`, {\n          method: \"POST\",\n          headers: {\n            \"x-api-key\": config.apiKey.prod,\n            \"Content-Type\": \"application/json;charset=utf-8\"\n          },\n          body: JSON.stringify({\n            to: config.contract.address,\n            apiId: \"34bfa8b9-57e7-4d32-b983-63c3f698cddd\",\n            //apiId: \"ca45b2dc-0279-4952-87cd-bbc584427538\",\n            params: params,\n            from: userAddress,\n            signatureType: signatureType\n          })\n        }).then(response => response.json()).then(async function (result) {\n          console.log(result);\n          showInfoMessage(`Transaction sent by relayer with hash ${result.txHash}`);\n          let receipt = await getTransactionReceiptMined(result.txHash, 2000);\n          setTransactionHash(result.txHash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"top-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 13\n    }\n  }, \"Library \"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }\n  }, \"web3.js\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }\n  }, \"Meta Transaction\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 13\n    }\n  }, \"EIP-2771\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 13\n    }\n  }, \"Signature Type\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }\n  }, \"EIP712 Signature\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-wrap mb-style-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    cite: \"http://www.gutenberg.org/ebboks/11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 15\n    }\n  }, quote))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-attribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }\n  }, owner), selectedAddress.toLowerCase() === owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    className: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 15\n    }\n  }, \"You are the owner of the quote\"), selectedAddress.toLowerCase() !== owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 15\n    }\n  }, \"You are not the owner of the quote\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 9\n    }\n  }, transactionHash !== \"\" && /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    mt: 2,\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 15\n    }\n  }, \"Check your transaction hash\", /*#__PURE__*/React.createElement(Link, {\n    href: `https://kovan.etherscan.io/tx/${transactionHash}`,\n    target: \"_blank\",\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 17\n    }\n  }, \"here\")))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your quote\",\n    onChange: onQuoteChange,\n    value: newQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithEIP712,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 15\n    }\n  }, \"Submit EIP712 Signature\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithPersonal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 15\n    }\n  }, \"Submit Personal Signature\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithPrivateKey,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 15\n    }\n  }, \"Submit (using private key)\")))), /*#__PURE__*/React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: backdropOpen,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 11\n    }\n  }, loadingMessage)), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/konstantin/Документы/react-ui-biconomy/react-ui/src/components/Web3_EIP2771_API.js"],"names":["React","useState","useEffect","Button","helperAttributes","getDomainSeperator","getDataToSignForPersonalSign","getDataToSignForEIP712","buildForwardTxRequest","getBiconomyForwarderConfig","NotificationContainer","NotificationManager","Backdrop","CircularProgress","Web3","Biconomy","makeStyles","Link","Typography","Box","sigUtil","require","config","contract","address","abi","apiKey","test","prod","api","web3","walletWeb3","biconomy","useStyles","theme","root","marginLeft","spacing","link","backdrop","zIndex","drawer","color","opacity","background","App","classes","preventDefault","event","backdropOpen","setBackdropOpen","loadingMessage","setLoadingMessage","quote","setQuote","owner","setOwner","newQuote","setNewQuote","selectedAddress","setSelectedAddress","metaTxEnabled","setMetaTxEnabled","transactionHash","setTransactionHash","init","window","ethereum","isMetaMask","provider","enable","kovanProvider","providers","HttpProvider","walletProvider","debug","onEvent","READY","eth","Contract","getQuoteFromNetwork","on","accounts","ERROR","error","message","showErrorMessage","handleClose","handleToggle","onQuoteChange","target","value","onSubmitWithPrivateKey","console","log","privateKey","userAddress","txGas","methods","estimateGas","from","functionSignature","encodeABI","forwarder","forwarderContract","batchNonce","getNonce","call","to","gasLimitNum","Number","batchId","request","account","data","messageToSign","signature","sign","toString","sendTransaction","sig","signatureType","PERSONAL_SIGN","onSubmitWithEIP712","domainSeparator","dataToSign","currentProvider","send","jsonrpc","id","method","params","response","info","result","EIP712_SIGN","hash","showInfoMessage","once","confirmationNumber","receipt","showSuccessMessage","onSubmitWithPersonal","hashToSign","personal","getSignatureParameters","utils","isHexStrict","Error","concat","r","slice","s","v","hexToNumber","includes","getQuote","then","currentQuote","undefined","currentOwner","success","getTransactionReceiptMined","txHash","interval","self","transactionReceiptAsync","resolve","reject","getTransactionReceipt","setTimeout","Promise","fetch","headers","body","JSON","stringify","apiId","json","catch","toLowerCase","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    helperAttributes,\n    getDomainSeperator,\n    getDataToSignForPersonalSign,\n    getDataToSignForEIP712,\n    buildForwardTxRequest,\n    getBiconomyForwarderConfig\n  } from '../api-helpers/biconomyForwarderHelpers';\nimport {\n    NotificationContainer,\n    NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Web3 from \"web3\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nlet sigUtil = require(\"eth-sig-util\");\n\n\nlet config = {\n    contract: {\n        address: \"0x880176EDA9f1608A2Bf182385379bDcC1a65Dfcf\",\n        abi: [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"forwarder\", \"type\": \"address\" }], \"name\": \"isTrustedForwarder\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"quote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"trustedForwarder\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [{ \"internalType\": \"string\", \"name\": \"newQuote\", \"type\": \"string\" }], \"name\": \"setQuote\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getQuote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"currentQuote\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"currentOwner\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"versionRecipient\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }]\n    },\n    apiKey: {\n        test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n        prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n    },\n    api: {\n        test: \"https://test-api.biconomy.io\",\n        prod: \"https://api.biconomy.io\"\n    }\n}\n\nlet web3, walletWeb3, biconomy;\nlet contract;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    link: {\n        marginLeft: \"5px\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        opacity: '.85!important',\n        background: '#000'\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const preventDefault = (event) => event.preventDefault();\n    const [backdropOpen, setBackdropOpen] = React.useState(true);\n    const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n    const [quote, setQuote] = useState(\"This is a default quote\");\n    const [owner, setOwner] = useState(\"Default Owner Address\");\n    const [newQuote, setNewQuote] = useState(\"\");\n    const [selectedAddress, setSelectedAddress] = useState(\"\");\n    const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n    const [transactionHash, setTransactionHash] = useState(\"\");\n\n    useEffect(() => {\n        async function init() {\n            if (\n                typeof window.ethereum !== \"undefined\" &&\n                window.ethereum.isMetaMask\n            ) {\n                // Ethereum user detected. You can now use the provider.\n                const provider = window[\"ethereum\"];\n                await provider.enable();\n                let kovanProvider = new Web3.providers.HttpProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n                setLoadingMessage(\"Initializing Biconomy ...\");\n                biconomy = new Biconomy(kovanProvider, {\n                    walletProvider: window.ethereum,\n                    apiKey: config.apiKey.prod,\n                    debug: true\n                });\n\n                // This web3 instance is used to read normally and write to contract via meta transactions.\n                web3 = new Web3(biconomy);\n\n                // This web3 instance is used to get user signature from connected wallet\n                walletWeb3 = new Web3(window.ethereum);\n\n                biconomy.onEvent(biconomy.READY, () => {\n                    // Initialize your dapp here like getting user accounts etc\n                    contract = new web3.eth.Contract(\n                        config.contract.abi,\n                        config.contract.address\n                    );\n                    setSelectedAddress(provider.selectedAddress);\n                    getQuoteFromNetwork();\n                    provider.on(\"accountsChanged\", function (accounts) {\n                        setSelectedAddress(accounts[0]);\n                    });\n                }).onEvent(biconomy.ERROR, (error, message) => {\n                    // Handle error while initializing mexa\n                });\n            } else {\n                showErrorMessage(\"Metamask not installed\");\n            }\n        }\n        init();\n    }, []);\n\n    const handleClose = () => {\n        setBackdropOpen(false);\n    };\n\n    const handleToggle = () => {\n        setBackdropOpen(!backdropOpen);\n    };\n\n    const onQuoteChange = event => {\n        setNewQuote(event.target.value);\n    };\n\n    const onSubmitWithPrivateKey = async () => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            console.log(\"Sending meta transaction\");\n            let privateKey =\n              \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n            let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n            let txGas = await contract.methods\n                  .setQuote(newQuote)\n                  .estimateGas({ from: userAddress });\n\n            let functionSignature = contract.methods\n              .setQuote(newQuote)\n              .encodeABI();\n            let forwarder = await getBiconomyForwarderConfig(42);\n            let forwarderContract = new web3.eth.Contract(\n              forwarder.abi,\n              forwarder.address\n            );\n\n            const batchNonce = await forwarderContract.methods\n              .getNonce(userAddress, 0)\n              .call();\n            //const batchId = await forwarderContract.methods.getBatch(userAddress).call();\n            console.log(batchNonce);\n            const to = config.contract.address;\n            const gasLimitNum = Number(txGas);\n            const batchId = 0;\n            const request = await buildForwardTxRequest({\n              account: userAddress,\n              to,\n              gasLimitNum,\n              batchId,\n              batchNonce,\n              data: functionSignature,\n            });\n            console.log(request);\n\n            //you do not need domain seperator in case of personal sign\n            //const domainSeparator = await getDomainSeperator(42);\n            //console.log(domainSeparator);\n\n            //const dataToSign = await getDataToSignForEIP712(request, 42);\n            //const sig = sigUtil.signTypedMessage(new Buffer.from(privateKey, 'hex'), { data: dataToSign }, 'V4');\n            const messageToSign = getDataToSignForPersonalSign(request, 42);\n            let {signature} = web3.eth.accounts.sign(\"0x\" + messageToSign.toString(\"hex\"), privateKey);\n           \n            sendTransaction({userAddress, request, sig:signature, signatureType:biconomy.PERSONAL_SIGN});  \n            //notice domain seperator is not passed here         \n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    }\n\n    const onSubmitWithEIP712 = async event => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n                let userAddress = selectedAddress;\n\n                let functionSignature = contract.methods\n                  .setQuote(newQuote)\n                  .encodeABI();\n\n                debugger;\n\n                let txGas = await contract.methods\n                  .setQuote(newQuote)\n                  .estimateGas({ from: userAddress });\n\n                let forwarder = await getBiconomyForwarderConfig(42);\n                let forwarderContract = new web3.eth.Contract(\n                  forwarder.abi,\n                  forwarder.address\n                );\n\n                const batchNonce = await forwarderContract.methods\n                  .getNonce(userAddress, 0)\n                  .call();\n                //const batchId = await forwarderContract.methods.getBatch(userAddress).call();\n                console.log(batchNonce);\n                const to = config.contract.address;\n                const gasLimitNum = Number(txGas);\n                const batchId = 0;\n                const request = await buildForwardTxRequest({account:userAddress,to,gasLimitNum,batchId,batchNonce,data:functionSignature});\n                console.log(request);\n\n                //you do not need domain seperator in case of personal sign\n                const domainSeparator = await getDomainSeperator(42);\n                console.log(domainSeparator);\n\n                const dataToSign = await getDataToSignForEIP712(request,42);\n\n                walletWeb3.currentProvider.send(\n                    {\n                        jsonrpc: \"2.0\",\n                        id: 999999999999,\n                        method: \"eth_signTypedData_v4\",\n                        params: [userAddress, dataToSign]\n                    },\n                    function (error, response) {\n                        console.info(`User signature is ${response.result}`);\n                        if (error || (response && response.error)) {\n                            showErrorMessage(\"Could not get user signature\");\n                        } else if (response && response.result) {\n                            let sig = response.result;\n                            sendTransaction({userAddress, request, domainSeparator, sig, signatureType:biconomy.EIP712_SIGN});\n                        }\n                    }\n                );\n\n            } else {\n                console.log(\"Sending normal transaction\");\n                contract.methods\n                    .setQuote(newQuote)\n                    .send({ from: selectedAddress })\n                    .on(\"transactionHash\", function (hash) {\n                        showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n                    })\n                    .once(\"confirmation\", function (confirmationNumber, receipt) {\n                        setTransactionHash(receipt.transactionHash);\n                        showSuccessMessage(\"Transaction confirmed\");\n                        getQuoteFromNetwork();\n                    });\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    };\n\n    const onSubmitWithPersonal = async event => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n                let userAddress = selectedAddress;\n\n                let functionSignature = contract.methods\n                  .setQuote(newQuote)\n                  .encodeABI();\n\n                debugger;\n\n                let txGas = await contract.methods\n                  .setQuote(newQuote)\n                  .estimateGas({ from: userAddress });\n\n                let forwarder = await getBiconomyForwarderConfig(42);\n                let forwarderContract = new web3.eth.Contract(\n                  forwarder.abi,\n                  forwarder.address\n                );\n\n                const batchNonce = await forwarderContract.methods\n                  .getNonce(userAddress, 0)\n                  .call();\n                //const batchId = await forwarderContract.methods.getBatch(userAddress).call();\n                console.log(batchNonce);\n                const to = config.contract.address;\n                const gasLimitNum = Number(txGas);\n                const batchId = 0;\n                const request = await buildForwardTxRequest({account:userAddress,to,gasLimitNum,batchId,batchNonce,data:functionSignature});\n                console.log(request);\n\n                //you do not need domain seperator in case of personal sign\n                //const domainSeparator = await getDomainSeperator(42);\n                //console.log(domainSeparator);\n\n                const hashToSign =  getDataToSignForPersonalSign(request);\n\n                const sig = await walletWeb3.eth.personal.sign(\"0x\" + hashToSign.toString(\"hex\"), userAddress);\n\n                console.log('signature ' + sig);\n                sendTransaction({userAddress, request, sig, signatureType:\"PERSONAL_SIGN\"});\n\n            } else {\n                console.log(\"Sending normal transaction\");\n                contract.methods\n                    .setQuote(newQuote)\n                    .send({ from: selectedAddress })\n                    .on(\"transactionHash\", function (hash) {\n                        showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n                    })\n                    .once(\"confirmation\", function (confirmationNumber, receipt) {\n                        setTransactionHash(receipt.transactionHash);\n                        showSuccessMessage(\"Transaction confirmed\");\n                        getQuoteFromNetwork();\n                    });\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    };\n\n    const getSignatureParameters = signature => {\n        if (!web3.utils.isHexStrict(signature)) {\n            throw new Error(\n                'Given value \"'.concat(signature, '\" is not a valid hex string.')\n            );\n        }\n        var r = signature.slice(0, 66);\n        var s = \"0x\".concat(signature.slice(66, 130));\n        var v = \"0x\".concat(signature.slice(130, 132));\n        v = web3.utils.hexToNumber(v);\n        if (![27, 28].includes(v)) v += 27;\n        return {\n            r: r,\n            s: s,\n            v: v\n        };\n    };\n\n    const getQuoteFromNetwork = () => {\n        setLoadingMessage(\"Getting Quote from contact ...\");\n        try {\n            if (web3 && contract) {\n                contract.methods\n                    .getQuote()\n                    .call()\n                    .then(function (result) {\n                        handleClose();\n                        console.log(result);\n                        if (\n                            result &&\n                            result.currentQuote != undefined &&\n                            result.currentOwner != undefined\n                        ) {\n                            if (result.currentQuote == \"\") {\n                                showErrorMessage(\"No quotes set on blockchain yet\");\n                            } else {\n                                setQuote(result.currentQuote);\n                                setOwner(result.currentOwner);\n                            }\n                        } else {\n                            showErrorMessage(\"Not able to get quote information from Network\");\n                        }\n                    });\n            } else {\n                handleClose();\n            }\n        } catch (error) {\n            handleClose();\n            console.log(error);\n        }\n    };\n\n    const showErrorMessage = message => {\n        NotificationManager.error(message, \"Error\", 5000);\n    };\n\n    const showSuccessMessage = message => {\n        NotificationManager.success(message, \"Message\", 3000);\n    };\n\n    const showInfoMessage = message => {\n        NotificationManager.info(message, \"Info\", 3000);\n    };\n\n    const getTransactionReceiptMined = (txHash, interval) => {\n        const self = this;\n        const transactionReceiptAsync = async function(resolve, reject) {\n          var receipt = await web3.eth.getTransactionReceipt(txHash);\n          if (receipt == null) {\n              setTimeout(\n                  () => transactionReceiptAsync(resolve, reject),\n                  interval ? interval : 500);\n          } else {\n              resolve(receipt);\n          }\n        };\n    \n        if (typeof txHash === \"string\") {\n            return new Promise(transactionReceiptAsync);\n        } else {\n            throw new Error(\"Invalid Type: \" + txHash);\n        }\n      };\n\n    \n    const sendTransaction = async ({userAddress, request, sig, domainSeparator, signatureType}) => {\n        if (web3 && contract) {\n          let params;\n          if (domainSeparator) {\n            params = [request, domainSeparator, sig];\n          } else {\n            params = [request, sig];\n          }\n          try {\n            fetch(`${config.api.prod}/api/v2/meta-tx/native`, {\n              method: \"POST\",\n              headers: {\n                \"x-api-key\": config.apiKey.prod,\n                \"Content-Type\": \"application/json;charset=utf-8\",\n              },\n              body: JSON.stringify({\n                to: config.contract.address,\n                apiId: \"34bfa8b9-57e7-4d32-b983-63c3f698cddd\",\n                //apiId: \"ca45b2dc-0279-4952-87cd-bbc584427538\",\n                params: params,\n                from: userAddress,\n                signatureType: signatureType\n              }),\n            })\n              .then((response) => response.json())\n              .then(async function (result) {\n                console.log(result);\n                showInfoMessage(\n                  `Transaction sent by relayer with hash ${result.txHash}`\n                );\n\n                let receipt = await getTransactionReceiptMined(\n                  result.txHash,\n                  2000\n                );\n                setTransactionHash(result.txHash);\n                showSuccessMessage(\"Transaction confirmed on chain\");\n                getQuoteFromNetwork();\n              })\n              .catch(function (error) {\n                console.log(error);\n              });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n    };\n\n    return (\n      <div className=\"App\">\n        <section className=\"top-row\">\n          <div className=\"top-row-item\">\n            <span className=\"label\">Library </span>\n            <span className=\"label-value\">web3.js</span>\n          </div>\n          <div className=\"top-row-item\">\n            <span className=\"label\">Meta Transaction</span>\n            <span className=\"label-value\">EIP-2771</span>\n          </div>\n          <div className=\"top-row-item\">\n            <span className=\"label\">Signature Type</span>\n            <span className=\"label-value\">EIP712 Signature</span>\n          </div>\n        </section>\n        <section className=\"main\">\n          <div className=\"mb-wrap mb-style-2\">\n            <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n              <p>{quote}</p>\n            </blockquote>\n          </div>\n\n          <div className=\"mb-attribution\">\n            <p className=\"mb-author\">{owner}</p>\n            {selectedAddress.toLowerCase() === owner.toLowerCase() && (\n              <cite className=\"owner\">You are the owner of the quote</cite>\n            )}\n            {selectedAddress.toLowerCase() !== owner.toLowerCase() && (\n              <cite>You are not the owner of the quote</cite>\n            )}\n          </div>\n        </section>\n        <section>\n          {transactionHash !== \"\" && (\n            <Box className={classes.root} mt={2} p={2}>\n              <Typography>\n                Check your transaction hash\n                <Link\n                  href={`https://kovan.etherscan.io/tx/${transactionHash}`}\n                  target=\"_blank\"\n                  className={classes.link}\n                >\n                  here\n                </Link>\n              </Typography>\n            </Box>\n          )}\n        </section>\n        <section>\n          <div className=\"submit-container\">\n            <div className=\"submit-row\">\n              <input\n                type=\"text\"\n                placeholder=\"Enter your quote\"\n                onChange={onQuoteChange}\n                value={newQuote}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={onSubmitWithEIP712}\n              >\n                Submit EIP712 Signature\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={onSubmitWithPersonal}\n              >\n                Submit Personal Signature\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={onSubmitWithPrivateKey}\n                style={{ marginLeft: \"10px\" }}\n              >\n                Submit (using private key)\n              </Button>\n            </div>\n          </div>\n        </section>\n        <Backdrop\n          className={classes.backdrop}\n          open={backdropOpen}\n          onClick={handleClose}\n        >\n          <CircularProgress color=\"inherit\" />\n          <div style={{ paddingLeft: \"10px\" }}>{loadingMessage}</div>\n        </Backdrop>\n        <NotificationContainer />\n      </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}