{"ast":null,"code":"var _jsxFileName = \"/home/konstantin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/react-ui-biconomy/react-ui/src/components/Ethers_EIP2771_PersonalSign.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\n\nlet sigUtil = require(\"eth-sig-util\");\n\nlet config = {\n  contract: {\n    address: \"0x880176EDA9f1608A2Bf182385379bDcC1a65Dfcf\",\n    abi: [{\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"forwarder\",\n        \"type\": \"address\"\n      }],\n      \"name\": \"isTrustedForwarder\",\n      \"outputs\": [{\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"quote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"trustedForwarder\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"newQuote\",\n        \"type\": \"string\"\n      }],\n      \"name\": \"setQuote\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getQuote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"currentQuote\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"address\",\n        \"name\": \"currentOwner\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"versionRecipient\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }]\n  },\n  apiKey: {\n    test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n    prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n  }\n};\nlet walletProvider, walletSigner;\nlet contract, contractInterface;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2)\n    }\n  },\n  link: {\n    marginLeft: \"5px\"\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    opacity: '.85!important',\n    background: '#000'\n  }\n}));\nlet biconomy, userAddress;\n\nfunction App() {\n  const classes = useStyles();\n  const [backdropOpen, setBackdropOpen] = React.useState(true);\n  const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(\"\");\n  const [metaTxEnabled] = useState(true);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n\n  const handleClose = () => {\n    setBackdropOpen(false);\n  };\n\n  useEffect(() => {\n    async function init() {\n      if (typeof window.ethereum !== \"undefined\" && window.ethereum.isMetaMask) {\n        // Ethereum user detected. You can now use the provider.\n        const provider = window[\"ethereum\"];\n        await provider.enable();\n        setLoadingMessage(\"Initializing Biconomy ...\"); // We're creating biconomy provider linked to your network of choice where your contract is deployed\n\n        let jsonRpcProvider = new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n        biconomy = new Biconomy(jsonRpcProvider, {\n          walletProvider: window.ethereum,\n          apiKey: config.apiKey.prod,\n          debug: true\n        });\n        /*\n          This provider is linked to your wallet.\n          If needed, substitute your wallet solution in place of window.ethereum \n        */\n\n        walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n        walletSigner = walletProvider.getSigner();\n        userAddress = await walletSigner.getAddress();\n        setSelectedAddress(userAddress);\n        biconomy.onEvent(biconomy.READY, async () => {\n          // Initialize your dapp here like getting user accounts etc\n          contract = new ethers.Contract(config.contract.address, config.contract.abi, biconomy.getSignerByAddress(userAddress));\n          contractInterface = new ethers.utils.Interface(config.contract.abi);\n          getQuoteFromNetwork();\n        }).onEvent(biconomy.ERROR, (error, message) => {\n          // Handle error while initializing mexa\n          console.log(message);\n          console.log(error);\n        });\n      } else {\n        showErrorMessage(\"Metamask not installed\");\n      }\n    }\n\n    init();\n  }, []);\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  const onSubmitWithPersonalSign = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        showInfoMessage(`Getting user signature`);\n        sendTransaction(userAddress, newQuote);\n      } else {\n        console.log(\"Sending normal transaction\");\n        let tx = await contract.setQuote(newQuote);\n        console.log(\"Transaction hash : \", tx.hash);\n        showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n        let confirmation = await tx.wait();\n        console.log(confirmation);\n        setTransactionHash(tx.hash);\n        showSuccessMessage(\"Transaction confirmed on chain\");\n        getQuoteFromNetwork();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const onSubmitWithPrivateKey = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      try {\n        if (metaTxEnabled) {\n          showInfoMessage(`Getting user signature`);\n          let privateKey = \"bf096e6fb9754860c4c99eb336c0579db994a3ef7fb3f7db869ad2f1972fc755\";\n          let userAddress = \"0xf7AB2d00f379167c339691c23B23111eB598B3fb\";\n          let userSigner = new ethers.Wallet(privateKey);\n          let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n          let rawTx = {\n            to: config.contract.address,\n            data: functionSignature,\n            from: userAddress\n          };\n          let signedTx = await userSigner.signTransaction(rawTx); // should get user message to sign for EIP712 or personal signature types\n\n          const forwardData = await biconomy.getForwardRequestAndMessageToSign(signedTx); // optionally one can sign using sigUtil\n\n          const signature = await userSigner.signMessage(forwardData.personalSignatureFormat);\n          let data = {\n            signature: signature,\n            forwardRequest: forwardData.request,\n            rawTransaction: signedTx,\n            signatureType: biconomy.PERSONAL_SIGN\n          };\n          let provider = biconomy.getEthersProvider(); // send signed transaction with ethers\n          // promise resolves to transaction hash                  \n\n          let txHash = await provider.send(\"eth_sendRawTransaction\", [data]);\n          showInfoMessage(`Transaction sent. Waiting for confirmation ..`);\n          let receipt = await provider.waitForTransaction(txHash);\n          setTransactionHash(txHash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n          console.log(receipt);\n        } else {\n          console.log(\"Sending normal transaction\");\n          let tx = await contract.setQuote(newQuote);\n          console.log(\"Transaction hash : \", tx.hash);\n          showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n          let confirmation = await tx.wait();\n          console.log(confirmation);\n          setTransactionHash(tx.hash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n        }\n      } catch (error) {\n        console.log(error);\n        handleClose();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const getQuoteFromNetwork = async () => {\n    setLoadingMessage(\"Getting Quote from contact ...\");\n    let result = await contract.getQuote();\n    console.log(result);\n\n    if (result && result.currentQuote != undefined && result.currentOwner != undefined) {\n      if (result.currentQuote == \"\") {\n        showErrorMessage(\"No quotes set on blockchain yet\");\n      } else {\n        setQuote(result.currentQuote);\n        setOwner(result.currentOwner);\n      }\n    } else {\n      showErrorMessage(\"Not able to get quote information from Network\");\n    }\n\n    handleClose();\n  };\n\n  const showErrorMessage = message => {\n    NotificationManager.error(message, \"Error\", 5000);\n  };\n\n  const showSuccessMessage = message => {\n    NotificationManager.success(message, \"Message\", 3000);\n  };\n\n  const showInfoMessage = message => {\n    NotificationManager.info(message, \"Info\", 3000);\n  };\n\n  const sendTransaction = async (userAddress, arg) => {\n    if (contract) {\n      try {\n        let {\n          data\n        } = await contract.populateTransaction.setQuote(arg);\n        let provider = biconomy.getEthersProvider();\n        let gasLimit = await provider.estimateGas({\n          to: config.contract.address,\n          from: userAddress,\n          data: data\n        });\n        console.log(\"Gas limit : \", gasLimit);\n        let txParams = {\n          data: data,\n          to: config.contract.address,\n          from: userAddress,\n          gasLimit: gasLimit,\n          signatureType: \"PERSONAL_SIGN\" // Or omit this because by default mexa will consider personal sign\n\n        };\n        let tx = await provider.send(\"eth_sendTransaction\", [txParams]);\n        console.log(\"Transaction hash : \", tx);\n        showInfoMessage(`Transaction sent. Waiting for confirmation ..`); //event emitter methods\n\n        provider.once(tx, transaction => {\n          // Emitted when the transaction has been mined\n          console.log(transaction);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          setTransactionHash(tx);\n          getQuoteFromNetwork();\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"top-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 21\n    }\n  }, \"Library \"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 21\n    }\n  }, \"ethers.js\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 21\n    }\n  }, \"Meta Transaction\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 21\n    }\n  }, \"EIP-2771\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 21\n    }\n  }, \"Signature Type\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 21\n    }\n  }, \"Personal Signature\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-wrap mb-style-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    cite: \"http://www.gutenberg.org/ebboks/11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 25\n    }\n  }, quote))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-attribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 21\n    }\n  }, owner), selectedAddress.toLowerCase() === owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    className: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 25\n    }\n  }, \"You are the owner of the quote\"), selectedAddress.toLowerCase() !== owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 25\n    }\n  }, \"You are not the owner of the quote\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }\n  }, transactionHash !== \"\" && /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    mt: 2,\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 44\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 21\n    }\n  }, \"Check your transaction hash\", /*#__PURE__*/React.createElement(Link, {\n    href: `https://kovan.etherscan.io/tx/${transactionHash}`,\n    target: \"_blank\",\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  }, \"here\")))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your quote\",\n    onChange: onQuoteChange,\n    value: newQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithPersonalSign,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 25\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onSubmitWithPrivateKey,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 25\n    }\n  }, \"Submit (Private Key)\")))), /*#__PURE__*/React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: backdropOpen,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 17\n    }\n  }, loadingMessage)), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/konstantin/Документы/react-ui-biconomy/react-ui/src/components/Ethers_EIP2771_PersonalSign.js"],"names":["React","useState","useEffect","Button","NotificationContainer","NotificationManager","Backdrop","CircularProgress","ethers","Biconomy","makeStyles","Link","Typography","Box","sigUtil","require","config","contract","address","abi","apiKey","test","prod","walletProvider","walletSigner","contractInterface","useStyles","theme","root","marginLeft","spacing","link","backdrop","zIndex","drawer","color","opacity","background","biconomy","userAddress","App","classes","backdropOpen","setBackdropOpen","loadingMessage","setLoadingMessage","quote","setQuote","owner","setOwner","newQuote","setNewQuote","selectedAddress","setSelectedAddress","metaTxEnabled","transactionHash","setTransactionHash","handleClose","init","window","ethereum","isMetaMask","provider","enable","jsonRpcProvider","providers","JsonRpcProvider","debug","Web3Provider","getSigner","getAddress","onEvent","READY","Contract","getSignerByAddress","utils","Interface","getQuoteFromNetwork","ERROR","error","message","console","log","showErrorMessage","onQuoteChange","event","target","value","onSubmitWithPersonalSign","showInfoMessage","sendTransaction","tx","hash","confirmation","wait","showSuccessMessage","onSubmitWithPrivateKey","privateKey","userSigner","Wallet","functionSignature","encodeFunctionData","rawTx","to","data","from","signedTx","signTransaction","forwardData","getForwardRequestAndMessageToSign","signature","signMessage","personalSignatureFormat","forwardRequest","request","rawTransaction","signatureType","PERSONAL_SIGN","getEthersProvider","txHash","send","receipt","waitForTransaction","result","getQuote","currentQuote","undefined","currentOwner","success","info","arg","populateTransaction","gasLimit","estimateGas","txParams","once","transaction","toLowerCase","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    NotificationContainer,\n    NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nlet sigUtil = require(\"eth-sig-util\");\n\nlet config = {\n    contract: {\n        address: \"0x880176EDA9f1608A2Bf182385379bDcC1a65Dfcf\",\n        abi: [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"forwarder\", \"type\": \"address\" }], \"name\": \"isTrustedForwarder\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"quote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"trustedForwarder\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [{ \"internalType\": \"string\", \"name\": \"newQuote\", \"type\": \"string\" }], \"name\": \"setQuote\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getQuote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"currentQuote\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"currentOwner\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"versionRecipient\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }]\n    },\n    apiKey: {\n        test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n        prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n    }\n}\n\nlet walletProvider, walletSigner;\nlet contract, contractInterface;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    link: {\n        marginLeft: \"5px\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        opacity: '.85!important',\n        background: '#000'\n    },\n}));\n\nlet biconomy, userAddress;\n\nfunction App() {\n    const classes = useStyles();\n    const [backdropOpen, setBackdropOpen] = React.useState(true);\n    const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n    const [quote, setQuote] = useState(\"This is a default quote\");\n    const [owner, setOwner] = useState(\"Default Owner Address\");\n    const [newQuote, setNewQuote] = useState(\"\");\n    const [selectedAddress, setSelectedAddress] = useState(\"\");\n    const [metaTxEnabled] = useState(true);\n    const [transactionHash, setTransactionHash] = useState(\"\");\n\n    const handleClose = () => {\n        setBackdropOpen(false);\n    };\n\n\n\n    useEffect(() => {\n        async function init() {\n            if (\n                typeof window.ethereum !== \"undefined\" &&\n                window.ethereum.isMetaMask\n            ) {\n                // Ethereum user detected. You can now use the provider.\n                const provider = window[\"ethereum\"];\n                await provider.enable();\n                setLoadingMessage(\"Initializing Biconomy ...\");\n                // We're creating biconomy provider linked to your network of choice where your contract is deployed\n                let jsonRpcProvider = new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n                biconomy = new Biconomy(jsonRpcProvider, {\n                    walletProvider: window.ethereum,\n                    apiKey: config.apiKey.prod,\n                    debug: true\n                });\n\n                /*\n                  This provider is linked to your wallet.\n                  If needed, substitute your wallet solution in place of window.ethereum \n                */\n                walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n                walletSigner = walletProvider.getSigner();\n\n                userAddress = await walletSigner.getAddress()\n                setSelectedAddress(userAddress);\n\n                biconomy.onEvent(biconomy.READY, async () => {\n\n                    // Initialize your dapp here like getting user accounts etc\n                    contract = new ethers.Contract(\n                        config.contract.address,\n                        config.contract.abi,\n                        biconomy.getSignerByAddress(userAddress)\n                    );\n\n                    contractInterface = new ethers.utils.Interface(config.contract.abi);\n                    getQuoteFromNetwork();\n                }).onEvent(biconomy.ERROR, (error, message) => {\n                    // Handle error while initializing mexa\n                    console.log(message);\n                    console.log(error);\n                });\n            } else {\n                showErrorMessage(\"Metamask not installed\");\n            }\n        }\n        init();\n    }, []);\n\n    const onQuoteChange = event => {\n        setNewQuote(event.target.value);\n    };\n\n    const onSubmitWithPersonalSign = async () => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n                showInfoMessage(`Getting user signature`);\n                sendTransaction(userAddress, newQuote);\n            } else {\n                console.log(\"Sending normal transaction\");\n                let tx = await contract.setQuote(newQuote);\n                console.log(\"Transaction hash : \", tx.hash);\n                showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n                let confirmation = await tx.wait();\n                console.log(confirmation);\n                setTransactionHash(tx.hash);\n\n                showSuccessMessage(\"Transaction confirmed on chain\");\n                getQuoteFromNetwork();\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    };\n\n    const onSubmitWithPrivateKey = async () => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            try {\n                if (metaTxEnabled) {\n                    showInfoMessage(`Getting user signature`);\n                    let privateKey = \"bf096e6fb9754860c4c99eb336c0579db994a3ef7fb3f7db869ad2f1972fc755\";\n                    let userAddress = \"0xf7AB2d00f379167c339691c23B23111eB598B3fb\";\n                    let userSigner = new ethers.Wallet(privateKey);\n                    let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n\n                    let rawTx = {\n                        to: config.contract.address,\n                        data: functionSignature,\n                        from: userAddress\n                    };\n\n                    let signedTx = await userSigner.signTransaction(rawTx);\n                    // should get user message to sign for EIP712 or personal signature types\n                    const forwardData = await biconomy.getForwardRequestAndMessageToSign(signedTx);\n                    // optionally one can sign using sigUtil\n                    const signature = await userSigner.signMessage(forwardData.personalSignatureFormat);\n\n                    let data = {\n                        signature: signature,\n                        forwardRequest: forwardData.request,\n                        rawTransaction: signedTx,\n                        signatureType: biconomy.PERSONAL_SIGN,\n                    };\n\n                    let provider = biconomy.getEthersProvider();\n                    // send signed transaction with ethers\n                    // promise resolves to transaction hash                  \n                    let txHash = await provider.send(\"eth_sendRawTransaction\", [data]);\n                    showInfoMessage(`Transaction sent. Waiting for confirmation ..`)\n                    let receipt = await provider.waitForTransaction(txHash);\n                    setTransactionHash(txHash);\n                    showSuccessMessage(\"Transaction confirmed on chain\");\n                    getQuoteFromNetwork();\n                    console.log(receipt);\n                } else {\n                    console.log(\"Sending normal transaction\");\n                    let tx = await contract.setQuote(newQuote);\n                    console.log(\"Transaction hash : \", tx.hash);\n                    showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n                    let confirmation = await tx.wait();\n                    console.log(confirmation);\n                    setTransactionHash(tx.hash);\n\n                    showSuccessMessage(\"Transaction confirmed on chain\");\n                    getQuoteFromNetwork();\n                }\n            } catch (error) {\n                console.log(error);\n                handleClose();\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    }\n\n    const getQuoteFromNetwork = async () => {\n        setLoadingMessage(\"Getting Quote from contact ...\");\n        let result = await contract.getQuote();\n        console.log(result);\n        if (\n            result &&\n            result.currentQuote != undefined &&\n            result.currentOwner != undefined\n        ) {\n            if (result.currentQuote == \"\") {\n                showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n                setQuote(result.currentQuote);\n                setOwner(result.currentOwner);\n            }\n        } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n        }\n        handleClose();\n    };\n\n    const showErrorMessage = message => {\n        NotificationManager.error(message, \"Error\", 5000);\n    };\n\n    const showSuccessMessage = message => {\n        NotificationManager.success(message, \"Message\", 3000);\n    };\n\n    const showInfoMessage = message => {\n        NotificationManager.info(message, \"Info\", 3000);\n    };\n\n    const sendTransaction = async (userAddress, arg) => {\n        if (contract) {\n            try {\n                let { data } = await contract.populateTransaction.setQuote(arg);\n                let provider = biconomy.getEthersProvider();\n                let gasLimit = await provider.estimateGas({\n                    to: config.contract.address,\n                    from: userAddress,\n                    data: data\n                });\n                console.log(\"Gas limit : \", gasLimit);\n                let txParams = {\n                    data: data,\n                    to: config.contract.address,\n                    from: userAddress,\n                    gasLimit: gasLimit,\n                    signatureType: \"PERSONAL_SIGN\" // Or omit this because by default mexa will consider personal sign\n                };\n                let tx = await provider.send(\"eth_sendTransaction\", [txParams])\n\n                console.log(\"Transaction hash : \", tx);\n                showInfoMessage(`Transaction sent. Waiting for confirmation ..`)\n\n                //event emitter methods\n                provider.once(tx, (transaction) => {\n                    // Emitted when the transaction has been mined\n                    console.log(transaction);\n                    showSuccessMessage(\"Transaction confirmed on chain\");\n                    setTransactionHash(tx);\n                    getQuoteFromNetwork();\n                })\n\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <section className=\"top-row\">\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Library </span>\n                    <span className=\"label-value\">ethers.js</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Meta Transaction</span>\n                    <span className=\"label-value\">EIP-2771</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Signature Type</span>\n                    <span className=\"label-value\">Personal Signature</span>\n                </div>\n            </section>\n            <section className=\"main\">\n                <div className=\"mb-wrap mb-style-2\">\n                    <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n                        <p>{quote}</p>\n                    </blockquote>\n                </div>\n\n                <div className=\"mb-attribution\">\n                    <p className=\"mb-author\">{owner}</p>\n                    {selectedAddress.toLowerCase() === owner.toLowerCase() && (\n                        <cite className=\"owner\">You are the owner of the quote</cite>\n                    )}\n                    {selectedAddress.toLowerCase() !== owner.toLowerCase() && (\n                        <cite>You are not the owner of the quote</cite>\n                    )}\n                </div>\n            </section>\n            <section>\n                {transactionHash !== \"\" && <Box className={classes.root} mt={2} p={2}>\n                    <Typography>\n                        Check your transaction hash\n            <Link href={`https://kovan.etherscan.io/tx/${transactionHash}`} target=\"_blank\"\n                            className={classes.link}>\n                            here\n            </Link>\n                    </Typography>\n                </Box>}\n            </section>\n            <section>\n                <div className=\"submit-container\">\n                    <div className=\"submit-row\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter your quote\"\n                            onChange={onQuoteChange}\n                            value={newQuote}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmitWithPersonalSign} style={{ marginLeft: \"10px\" }}>\n                            Submit\n            </Button>\n\n                        <Button variant=\"contained\" color=\"secondary\" onClick={onSubmitWithPrivateKey} style={{ marginLeft: \"10px\" }}>\n                            Submit (Private Key)\n            </Button>\n                    </div>\n                </div>\n            </section>\n            <Backdrop className={classes.backdrop} open={backdropOpen} onClick={handleClose}>\n                <CircularProgress color=\"inherit\" />\n                <div style={{ paddingLeft: \"10px\" }}>{loadingMessage}</div>\n            </Backdrop>\n            <NotificationContainer />\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}