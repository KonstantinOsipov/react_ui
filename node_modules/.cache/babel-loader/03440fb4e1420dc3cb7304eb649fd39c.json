{"ast":null,"code":"import _regeneratorRuntime from\"/home/konstantin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/react-ui-biconomy/react-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/konstantin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/react-ui-biconomy/react-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ethers}from'ethers';var _require=require(\"../config\"),config=_require.config;var abi=require(\"ethereumjs-abi\");var helperAttributes={};var supportedNetworks=[42,4,5];//add more\nhelperAttributes.ZERO_ADDRESS=\"0x0000000000000000000000000000000000000000\";//todo\n//update baseURL in config for prod \nhelperAttributes.baseURL=config.baseURL;// any other constants needed goes in helperAttributes\nhelperAttributes.biconomyForwarderAbi=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"domainValue\",\"type\":\"bytes\"}],\"name\":\"DomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"executeEIP712\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"executePersonalSign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"registerDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verifyEIP712\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verifyPersonalSign\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}];helperAttributes.biconomyForwarderDomainData={name:\"Biconomy Forwarder\",version:\"1\"};helperAttributes.domainType=[{name:\"name\",type:\"string\"},{name:\"version\",type:\"string\"},{name:\"verifyingContract\",type:\"address\"},{name:\"salt\",type:\"bytes32\"}];helperAttributes.forwardRequestType=[{name:'from',type:'address'},{name:'to',type:'address'},{name:'token',type:'address'},{name:'txGas',type:'uint256'},{name:'tokenGasPrice',type:'uint256'},{name:'batchId',type:'uint256'},{name:'batchNonce',type:'uint256'},{name:'deadline',type:'uint256'},{name:'data',type:'bytes'}];// pass the networkId to get contract addresses\nvar getContractAddresses=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(networkId){var contractAddresses,apiInfo,response,systemInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:contractAddresses={};apiInfo=\"\".concat(helperAttributes.baseURL,\"/api/v2/meta-tx/systemInfo?networkId=\").concat(networkId);_context.next=4;return fetch(apiInfo);case 4:response=_context.sent;_context.next=7;return response.json();case 7:systemInfo=_context.sent;console.log(\"Response JSON \"+JSON.stringify(systemInfo));contractAddresses.biconomyForwarderAddress=systemInfo.biconomyForwarderAddress;return _context.abrupt(\"return\",contractAddresses);case 11:case\"end\":return _context.stop();}}},_callee);}));return function getContractAddresses(_x){return _ref.apply(this,arguments);};}();/**\n * Returns ABI and contract address based on network Id\n * You can build biconomy forwarder contract object using above values and calculate the nonce\n * @param {*} networkId \n */var getBiconomyForwarderConfig=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(networkId){var contractAddresses,forwarderAddress;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getContractAddresses(networkId);case 2:contractAddresses=_context2.sent;forwarderAddress=contractAddresses.biconomyForwarderAddress;return _context2.abrupt(\"return\",{abi:helperAttributes.biconomyForwarderAbi,address:forwarderAddress});case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function getBiconomyForwarderConfig(_x2){return _ref2.apply(this,arguments);};}();/**\n * pass the below params in any order e.g. account=<account>,batchNone=<batchNone>,...\n * @param {*}  account - from (end user's) address for this transaction \n * @param {*}  to - target recipient contract address\n * @param {*}  gasLimitNum - gas estimation of your target method in numeric format\n * @param {*}  batchId - batchId \n * @param {*}  batchNonce - batchNonce which can be verified and obtained from the biconomy forwarder\n * @param {*}  data - functionSignature of target method\n * @param {*}  deadline - optional deadline for this forward request \n */var buildForwardTxRequest=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3){var account,to,gasLimitNum,batchId,batchNonce,data,deadline,req;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:account=_ref3.account,to=_ref3.to,gasLimitNum=_ref3.gasLimitNum,batchId=_ref3.batchId,batchNonce=_ref3.batchNonce,data=_ref3.data,deadline=_ref3.deadline;req={from:account,to:to,token:helperAttributes.ZERO_ADDRESS,txGas:gasLimitNum,tokenGasPrice:\"0\",batchId:parseInt(batchId),batchNonce:parseInt(batchNonce),deadline:deadline||Math.floor(Date.now()/1000+3600),data:data};return _context3.abrupt(\"return\",req);case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function buildForwardTxRequest(_x3){return _ref4.apply(this,arguments);};}();/**\n * pass your forward request and network Id \n * use this method to build message to be signed by end user in EIP712 signature format \n * @param {*} request - forward request object\n * @param {*} networkId \n */var getDataToSignForEIP712=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request,networkId){var contractAddresses,forwarderAddress,domainData,dataToSign;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return getContractAddresses(networkId);case 2:contractAddresses=_context4.sent;forwarderAddress=contractAddresses.biconomyForwarderAddress;domainData=helperAttributes.biconomyForwarderDomainData;domainData.salt=ethers.utils.hexZeroPad(ethers.BigNumber.from(networkId).toHexString(),32);domainData.verifyingContract=forwarderAddress;dataToSign=JSON.stringify({types:{EIP712Domain:helperAttributes.domainType,ERC20ForwardRequest:helperAttributes.forwardRequestType},domain:domainData,primaryType:\"ERC20ForwardRequest\",message:request});return _context4.abrupt(\"return\",dataToSign);case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function getDataToSignForEIP712(_x4,_x5){return _ref5.apply(this,arguments);};}();/**\n * pass your forward request\n * use this method to build message to be signed by end user in personal signature format \n * @param {*} networkId \n */var getDataToSignForPersonalSign=function getDataToSignForPersonalSign(request){var hashToSign=abi.soliditySHA3([\"address\",\"address\",\"address\",\"uint256\",\"uint256\",\"uint256\",\"uint256\",\"uint256\",\"bytes32\"],[request.from,request.to,request.token,request.txGas,request.tokenGasPrice,request.batchId,request.batchNonce,request.deadline,ethers.utils.keccak256(request.data)]);return hashToSign;};/**\n * get the domain seperator that needs to be passed while using EIP712 signature type\n * @param {*} networkId \n */var getDomainSeperator=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(networkId){var contractAddresses,forwarderAddress,domainData,domainSeparator;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return getContractAddresses(networkId);case 2:contractAddresses=_context5.sent;forwarderAddress=contractAddresses.biconomyForwarderAddress;domainData=helperAttributes.biconomyForwarderDomainData;domainData.salt=ethers.utils.hexZeroPad(ethers.BigNumber.from(networkId).toHexString(),32);domainData.verifyingContract=forwarderAddress;domainSeparator=ethers.utils.keccak256(ethers.utils.defaultAbiCoder.encode([\"bytes32\",\"bytes32\",\"bytes32\",\"address\",\"bytes32\"],[ethers.utils.id(\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"),ethers.utils.id(domainData.name),ethers.utils.id(domainData.version),domainData.verifyingContract,domainData.salt]));return _context5.abrupt(\"return\",domainSeparator);case 9:case\"end\":return _context5.stop();}}},_callee5);}));return function getDomainSeperator(_x6){return _ref6.apply(this,arguments);};}();export{helperAttributes,getDomainSeperator,getDataToSignForPersonalSign,getDataToSignForEIP712,buildForwardTxRequest,getBiconomyForwarderConfig};","map":{"version":3,"sources":["/home/konstantin/Документы/react-ui-biconomy/react-ui/src/api-helpers/biconomyForwarderHelpers.js"],"names":["ethers","require","config","abi","helperAttributes","supportedNetworks","ZERO_ADDRESS","baseURL","biconomyForwarderAbi","biconomyForwarderDomainData","name","version","domainType","type","forwardRequestType","getContractAddresses","networkId","contractAddresses","apiInfo","fetch","response","json","systemInfo","console","log","JSON","stringify","biconomyForwarderAddress","getBiconomyForwarderConfig","forwarderAddress","address","buildForwardTxRequest","account","to","gasLimitNum","batchId","batchNonce","data","deadline","req","from","token","txGas","tokenGasPrice","parseInt","Math","floor","Date","now","getDataToSignForEIP712","request","domainData","salt","utils","hexZeroPad","BigNumber","toHexString","verifyingContract","dataToSign","types","EIP712Domain","ERC20ForwardRequest","domain","primaryType","message","getDataToSignForPersonalSign","hashToSign","soliditySHA3","keccak256","getDomainSeperator","domainSeparator","defaultAbiCoder","encode","id"],"mappings":"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","sourcesContent":["import {ethers} from 'ethers';\nconst { config } = require(\"../config\");\nconst abi = require(\"ethereumjs-abi\");\nlet helperAttributes = {};\nlet supportedNetworks = [42,4,5]; //add more\nhelperAttributes.ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n//todo\n//update baseURL in config for prod \nhelperAttributes.baseURL = config.baseURL;\n// any other constants needed goes in helperAttributes\n\nhelperAttributes.biconomyForwarderAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"domainValue\",\"type\":\"bytes\"}],\"name\":\"DomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"executeEIP712\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"executePersonalSign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"registerDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verifyEIP712\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verifyPersonalSign\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}];\n\nhelperAttributes.biconomyForwarderDomainData = {\n    name : \"Biconomy Forwarder\", \n    version : \"1\",\n  };\n\nhelperAttributes.domainType = [\n    { name: \"name\", type: \"string\" },\n    { name: \"version\", type: \"string\" },\n    { name: \"verifyingContract\", type: \"address\" },\n    { name: \"salt\", type: \"bytes32\" },\n  ];\n\nhelperAttributes.forwardRequestType = [\n    {name:'from',type:'address'},\n    {name:'to',type:'address'},\n    {name:'token',type:'address'},\n    {name:'txGas',type:'uint256'},\n    {name:'tokenGasPrice',type:'uint256'},\n    {name:'batchId',type:'uint256'},\n    {name:'batchNonce',type:'uint256'},\n    {name:'deadline',type:'uint256'},\n    {name:'data',type:'bytes'}\n  ];\n\n// pass the networkId to get contract addresses\nconst getContractAddresses = async (networkId) => {\n    let contractAddresses = {};\n    const apiInfo = `${\n        helperAttributes.baseURL\n    }/api/v2/meta-tx/systemInfo?networkId=${networkId}`;\n    const response = await fetch(apiInfo);\n    const systemInfo = await response.json();\n    console.log(\"Response JSON \" + JSON.stringify(systemInfo));\n    contractAddresses.biconomyForwarderAddress = systemInfo.biconomyForwarderAddress;\n    return contractAddresses;\n  };\n\n/**\n * Returns ABI and contract address based on network Id\n * You can build biconomy forwarder contract object using above values and calculate the nonce\n * @param {*} networkId \n */\nconst getBiconomyForwarderConfig = async (networkId) => {\n        //get trusted forwarder contract address from network id\n        const contractAddresses = await getContractAddresses(networkId);\n        const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n        return {abi: helperAttributes.biconomyForwarderAbi, address: forwarderAddress};\n};\n\n/**\n * pass the below params in any order e.g. account=<account>,batchNone=<batchNone>,...\n * @param {*}  account - from (end user's) address for this transaction \n * @param {*}  to - target recipient contract address\n * @param {*}  gasLimitNum - gas estimation of your target method in numeric format\n * @param {*}  batchId - batchId \n * @param {*}  batchNonce - batchNonce which can be verified and obtained from the biconomy forwarder\n * @param {*}  data - functionSignature of target method\n * @param {*}  deadline - optional deadline for this forward request \n */\nconst buildForwardTxRequest = async ({account, to, gasLimitNum, batchId, batchNonce, data, deadline}) => {\n    const req = {\n        from: account,\n        to: to,\n        token: helperAttributes.ZERO_ADDRESS,\n        txGas: gasLimitNum,\n        tokenGasPrice: \"0\",\n        batchId: parseInt(batchId),\n        batchNonce: parseInt(batchNonce),\n        deadline: deadline || Math.floor(Date.now() / 1000 + 3600),\n        data: data\n    };\n    return req;\n};\n\n/**\n * pass your forward request and network Id \n * use this method to build message to be signed by end user in EIP712 signature format \n * @param {*} request - forward request object\n * @param {*} networkId \n */\nconst getDataToSignForEIP712 = async (request,networkId) => {\n    const contractAddresses = await getContractAddresses(networkId);\n    const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n    let domainData = helperAttributes.biconomyForwarderDomainData;\n    domainData.salt = ethers.utils.hexZeroPad((ethers.BigNumber.from(networkId)).toHexString(), 32);\n    domainData.verifyingContract = forwarderAddress;\n\n    const dataToSign = JSON.stringify({\n        types: {\n            EIP712Domain: helperAttributes.domainType,\n            ERC20ForwardRequest: helperAttributes.forwardRequestType\n        },\n        domain: domainData,\n        primaryType: \"ERC20ForwardRequest\",\n        message: request\n    });\n    return dataToSign;\n}\n\n/**\n * pass your forward request\n * use this method to build message to be signed by end user in personal signature format \n * @param {*} networkId \n */\nconst getDataToSignForPersonalSign = (request) => {\n    const hashToSign = abi.soliditySHA3([\n        \"address\",\n        \"address\",\n        \"address\",\n        \"uint256\",\n        \"uint256\",\n        \"uint256\",\n        \"uint256\",\n        \"uint256\",\n        \"bytes32\",\n    ], [\n        request.from,\n        request.to,\n        request.token,\n        request.txGas,\n        request.tokenGasPrice,\n        request.batchId,\n        request.batchNonce,\n        request.deadline,\n        ethers.utils.keccak256(request.data),\n    ]);\n    return hashToSign;\n}\n\n/**\n * get the domain seperator that needs to be passed while using EIP712 signature type\n * @param {*} networkId \n */\nconst getDomainSeperator = async (networkId) => {\n    const contractAddresses = await getContractAddresses(networkId);\n    const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n    let domainData = helperAttributes.biconomyForwarderDomainData;\n    domainData.salt = ethers.utils.hexZeroPad((ethers.BigNumber.from(networkId)).toHexString(), 32);\n    domainData.verifyingContract = forwarderAddress;\n\n    const domainSeparator = ethers.utils.keccak256(ethers.utils.defaultAbiCoder.encode([\n        \"bytes32\",\n        \"bytes32\",\n        \"bytes32\",\n        \"address\",\n        \"bytes32\"\n    ], [\n        ethers.utils.id(\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"),\n        ethers.utils.id(domainData.name),\n        ethers.utils.id(domainData.version),\n        domainData.verifyingContract,\n        domainData.salt,\n    ]));\n    return domainSeparator;\n};\n\nexport {\n    helperAttributes,\n    getDomainSeperator,\n    getDataToSignForPersonalSign,\n    getDataToSignForEIP712,\n    buildForwardTxRequest,\n    getBiconomyForwarderConfig\n};"]},"metadata":{},"sourceType":"module"}