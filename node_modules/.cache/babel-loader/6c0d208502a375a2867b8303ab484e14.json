{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projects/Biconomy-test/new/metatx-standard-playground/example/react-ui/src/components/Web3_Custom_PersonalSign.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Web3 from \"web3\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nimport { toBuffer } from \"ethereumjs-util\";\n\nlet abi = require('ethereumjs-abi');\n\nlet sigUtil = require(\"eth-sig-util\");\n\nlet config = {\n  contract: {\n    address: \"0x1E1c36546F6ddD71e8e6aEDf135B82F7EEaA08b9\",\n    abi: [{\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"userAddress\",\n        \"type\": \"address\"\n      }, {\n        \"internalType\": \"bytes\",\n        \"name\": \"functionSignature\",\n        \"type\": \"bytes\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigR\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigS\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"uint8\",\n        \"name\": \"sigV\",\n        \"type\": \"uint8\"\n      }],\n      \"name\": \"executeMetaTransaction\",\n      \"outputs\": [{\n        \"internalType\": \"bytes\",\n        \"name\": \"\",\n        \"type\": \"bytes\"\n      }],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }, {\n      \"anonymous\": false,\n      \"inputs\": [{\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"userAddress\",\n        \"type\": \"address\"\n      }, {\n        \"indexed\": false,\n        \"internalType\": \"addresspayable\",\n        \"name\": \"relayerAddress\",\n        \"type\": \"address\"\n      }, {\n        \"indexed\": false,\n        \"internalType\": \"bytes\",\n        \"name\": \"functionSignature\",\n        \"type\": \"bytes\"\n      }],\n      \"name\": \"MetaTransactionExecuted\",\n      \"type\": \"event\"\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"newQuote\",\n        \"type\": \"string\"\n      }],\n      \"name\": \"setQuote\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getChainID\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"user\",\n        \"type\": \"address\"\n      }],\n      \"name\": \"getNonce\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"nonce\",\n        \"type\": \"uint256\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getQuote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"currentQuote\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"address\",\n        \"name\": \"currentOwner\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"quote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      }, {\n        \"internalType\": \"uint256\",\n        \"name\": \"nonce\",\n        \"type\": \"uint256\"\n      }, {\n        \"internalType\": \"uint256\",\n        \"name\": \"chainID\",\n        \"type\": \"uint256\"\n      }, {\n        \"internalType\": \"bytes\",\n        \"name\": \"functionSignature\",\n        \"type\": \"bytes\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigR\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigS\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"uint8\",\n        \"name\": \"sigV\",\n        \"type\": \"uint8\"\n      }],\n      \"name\": \"verify\",\n      \"outputs\": [{\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }]\n  },\n  apiKey: {\n    test: \"pEtjiaTa2.0e283944-b54f-4a49-8e2b-2e019627c7ea\",\n    prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n  }\n};\nlet chainId = 42;\nlet web3, walletWeb3;\nlet contract;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2)\n    }\n  },\n  link: {\n    marginLeft: \"5px\"\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    opacity: '.85!important',\n    background: '#000'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const preventDefault = event => event.preventDefault();\n\n  const [backdropOpen, setBackdropOpen] = React.useState(true);\n  const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(\"\");\n  const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n  useEffect(() => {\n    async function init() {\n      if (typeof window.ethereum !== \"undefined\" && window.ethereum.isMetaMask) {\n        // Ethereum user detected. You can now use the provider.\n        const provider = window[\"ethereum\"];\n        await provider.enable();\n        let kovanProvider = new Web3.providers.HttpProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n        setLoadingMessage(\"Initializing Biconomy ...\");\n        const biconomy = new Biconomy(kovanProvider, {\n          apiKey: config.apiKey.prod,\n          debug: true\n        }); // This web3 instance is used to read normally and write to contract via meta transactions.\n\n        web3 = new Web3(biconomy); // This web3 instance is used to get user signature from connected wallet\n\n        walletWeb3 = new Web3(window.ethereum);\n        biconomy.onEvent(biconomy.READY, () => {\n          // Initialize your dapp here like getting user accounts etc\n          contract = new web3.eth.Contract(config.contract.abi, config.contract.address);\n          setSelectedAddress(provider.selectedAddress);\n          getQuoteFromNetwork();\n          provider.on(\"accountsChanged\", function (accounts) {\n            setSelectedAddress(accounts[0]);\n          });\n        }).onEvent(biconomy.ERROR, (error, message) => {// Handle error while initializing mexa\n        });\n      } else {\n        showErrorMessage(\"Metamask not installed\");\n      }\n    }\n\n    init();\n  }, []);\n\n  const handleClose = () => {\n    setBackdropOpen(false);\n  };\n\n  const handleToggle = () => {\n    setBackdropOpen(!backdropOpen);\n  };\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  const onSubmitWithPrivateKey = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        console.log(\"Sending meta transaction\"); // NOTE: prepend 0x in private key to be used with web3.js\n\n        let privateKey = \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n        let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n        let nonce = await contract.methods.getNonce(userAddress).call();\n        let functionSignature = contract.methods.setQuote(newQuote).encodeABI();\n        let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, config.contract.address);\n        let {\n          signature\n        } = web3.eth.accounts.sign(\"0x\" + messageToSign.toString(\"hex\"), privateKey);\n        let {\n          r,\n          s,\n          v\n        } = getSignatureParameters(signature);\n        let executeMetaTransactionData = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).encodeABI();\n        let txParams = {\n          \"from\": userAddress,\n          \"to\": config.contract.address,\n          \"value\": \"0x0\",\n          \"gas\": \"100000\",\n          \"data\": executeMetaTransactionData\n        };\n        const signedTx = await web3.eth.accounts.signTransaction(txParams, `0x${privateKey}`);\n        let receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction, (error, txHash) => {\n          if (error) {\n            return console.error(error);\n          }\n\n          console.log(\"Transaction hash is \", txHash);\n          showInfoMessage(`Transaction sent to blockchain with hash ${txHash}`);\n        });\n        setTransactionHash(receipt.transactionHash);\n        showSuccessMessage(\"Transaction confirmed\");\n        getQuoteFromNetwork();\n      } else {\n        console.log(\"Sending normal transaction\");\n        contract.methods.setQuote(newQuote).send({\n          from: selectedAddress\n        }).on(\"transactionHash\", function (hash) {\n          showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n        }).once(\"confirmation\", function (confirmationNumber, receipt) {\n          setTransactionHash(receipt.transactionHash);\n          showSuccessMessage(\"Transaction confirmed\");\n          getQuoteFromNetwork();\n        });\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const constructMetaTransactionMessage = (nonce, chainId, functionSignature, contractAddress) => {\n    return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, chainId, toBuffer(functionSignature)]);\n  };\n\n  const onSubmit = async event => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        console.log(\"Sending meta transaction\");\n        let userAddress = selectedAddress;\n        let nonce = await contract.methods.getNonce(userAddress).call();\n        let functionSignature = contract.methods.setQuote(newQuote).encodeABI();\n        let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, config.contract.address); // NOTE: We are using walletWeb3 here to get signature from connected wallet\n\n        const signature = await walletWeb3.eth.personal.sign(\"0x\" + messageToSign.toString(\"hex\"), userAddress); // NOTE: Using walletWeb3 here, as it is connected to the wallet where user account is present.\n\n        let {\n          r,\n          s,\n          v\n        } = getSignatureParameters(signature);\n        sendSignedTransaction(userAddress, functionSignature, r, s, v);\n      } else {\n        console.log(\"Sending normal transaction\");\n        contract.methods.setQuote(newQuote).send({\n          from: selectedAddress\n        }).on(\"transactionHash\", function (hash) {\n          showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n        }).once(\"confirmation\", function (confirmationNumber, receipt) {\n          setTransactionHash(receipt.transactionHash);\n          showSuccessMessage(\"Transaction confirmed\");\n          getQuoteFromNetwork();\n        });\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const getSignatureParameters = signature => {\n    if (!web3.utils.isHexStrict(signature)) {\n      throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n    }\n\n    var r = signature.slice(0, 66);\n    var s = \"0x\".concat(signature.slice(66, 130));\n    var v = \"0x\".concat(signature.slice(130, 132));\n    v = web3.utils.hexToNumber(v);\n    if (![27, 28].includes(v)) v += 27;\n    return {\n      r: r,\n      s: s,\n      v: v\n    };\n  };\n\n  const getQuoteFromNetwork = () => {\n    setLoadingMessage(\"Getting Quote from contact ...\");\n\n    try {\n      if (web3 && contract) {\n        contract.methods.getQuote().call().then(function (result) {\n          handleClose();\n          console.log(result);\n\n          if (result && result.currentQuote != undefined && result.currentOwner != undefined) {\n            if (result.currentQuote == \"\") {\n              showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n              setQuote(result.currentQuote);\n              setOwner(result.currentOwner);\n            }\n          } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n          }\n        });\n      } else {\n        handleClose();\n      }\n    } catch (error) {\n      handleClose();\n      console.log(error);\n    }\n  };\n\n  const showErrorMessage = message => {\n    NotificationManager.error(message, \"Error\", 5000);\n  };\n\n  const showSuccessMessage = message => {\n    NotificationManager.success(message, \"Message\", 3000);\n  };\n\n  const showInfoMessage = message => {\n    NotificationManager.info(message, \"Info\", 3000);\n  };\n\n  const sendSignedTransaction = async (userAddress, functionData, r, s, v) => {\n    if (web3 && contract) {\n      try {\n        let gasLimit = await contract.methods.executeMetaTransaction(userAddress, functionData, r, s, v).estimateGas({\n          from: userAddress\n        });\n        let gasPrice = await web3.eth.getGasPrice();\n        let tx = contract.methods.executeMetaTransaction(userAddress, functionData, r, s, v).send({\n          from: userAddress\n        });\n        tx.on(\"transactionHash\", function (hash) {\n          console.log(`Transaction hash is ${hash}`);\n          showInfoMessage(`Transaction sent by relayer with hash ${hash}`);\n        }).once(\"confirmation\", function (confirmationNumber, receipt) {\n          console.log(receipt);\n          setTransactionHash(receipt.transactionHash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"top-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 21\n    }\n  }, \"Library \"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, \"web3.js\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 21\n    }\n  }, \"Meta Transaction\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 21\n    }\n  }, \"Custom Approach\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }\n  }, \"Signature Type\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 21\n    }\n  }, \"Personal Signature\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-wrap mb-style-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    cite: \"http://www.gutenberg.org/ebboks/11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 25\n    }\n  }, quote))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-attribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 21\n    }\n  }, owner), selectedAddress.toLowerCase() === owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    className: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 25\n    }\n  }, \"You are the owner of the quote\"), selectedAddress.toLowerCase() !== owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 25\n    }\n  }, \"You are not the owner of the quote\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }\n  }, transactionHash !== \"\" && /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    mt: 2,\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 44\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  }, \"Check your transaction hash\", /*#__PURE__*/React.createElement(Link, {\n    href: `https://kovan.etherscan.io/tx/${transactionHash}`,\n    target: \"_blank\",\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }\n  }, \"here\")))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your quote\",\n    onChange: onQuoteChange,\n    value: newQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 25\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithPrivateKey,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 25\n    }\n  }, \"Submit (using private key)\")))), /*#__PURE__*/React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: backdropOpen,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 17\n    }\n  }, loadingMessage)), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ivan/Documents/projects/Biconomy-test/new/metatx-standard-playground/example/react-ui/src/components/Web3_Custom_PersonalSign.js"],"names":["React","useState","useEffect","Button","NotificationContainer","NotificationManager","Backdrop","CircularProgress","Web3","Biconomy","makeStyles","Link","Typography","Box","toBuffer","abi","require","sigUtil","config","contract","address","apiKey","test","prod","chainId","web3","walletWeb3","useStyles","theme","root","marginLeft","spacing","link","backdrop","zIndex","drawer","color","opacity","background","App","classes","preventDefault","event","backdropOpen","setBackdropOpen","loadingMessage","setLoadingMessage","quote","setQuote","owner","setOwner","newQuote","setNewQuote","selectedAddress","setSelectedAddress","metaTxEnabled","setMetaTxEnabled","transactionHash","setTransactionHash","init","window","ethereum","isMetaMask","provider","enable","kovanProvider","providers","HttpProvider","biconomy","debug","onEvent","READY","eth","Contract","getQuoteFromNetwork","on","accounts","ERROR","error","message","showErrorMessage","handleClose","handleToggle","onQuoteChange","target","value","onSubmitWithPrivateKey","console","log","privateKey","userAddress","nonce","methods","getNonce","call","functionSignature","encodeABI","messageToSign","constructMetaTransactionMessage","signature","sign","toString","r","s","v","getSignatureParameters","executeMetaTransactionData","executeMetaTransaction","txParams","signedTx","signTransaction","receipt","sendSignedTransaction","rawTransaction","txHash","showInfoMessage","showSuccessMessage","send","from","hash","once","confirmationNumber","contractAddress","soliditySHA3","onSubmit","personal","utils","isHexStrict","Error","concat","slice","hexToNumber","includes","getQuote","then","result","currentQuote","undefined","currentOwner","success","info","functionData","gasLimit","estimateGas","gasPrice","getGasPrice","tx","toLowerCase","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    NotificationContainer,\n    NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Web3 from \"web3\";\nimport {Biconomy} from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nimport {toBuffer} from \"ethereumjs-util\";\nlet abi = require('ethereumjs-abi')\nlet sigUtil = require(\"eth-sig-util\");\nlet config = {\n    contract: {\n        address: \"0x1E1c36546F6ddD71e8e6aEDf135B82F7EEaA08b9\",\n        abi: [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"addresspayable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newQuote\",\"type\":\"string\"}],\"name\":\"setQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"currentQuote\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n    },\n    apiKey: {\n        test: \"pEtjiaTa2.0e283944-b54f-4a49-8e2b-2e019627c7ea\",\n        prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n    }\n}\n\nlet chainId = 42;\nlet web3, walletWeb3;\nlet contract;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    link: {\n        marginLeft: \"5px\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        opacity: '.85!important',\n        background: '#000'\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const preventDefault = (event) => event.preventDefault();\n    const [backdropOpen, setBackdropOpen] = React.useState(true);\n    const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n    const [quote, setQuote] = useState(\"This is a default quote\");\n    const [owner, setOwner] = useState(\"Default Owner Address\");\n    const [newQuote, setNewQuote] = useState(\"\");\n    const [selectedAddress, setSelectedAddress] = useState(\"\");\n    const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n    const [transactionHash, setTransactionHash] = useState(\"\");\n\n    useEffect(() => {\n        async function init() {\n            if (\n                typeof window.ethereum !== \"undefined\" &&\n                window.ethereum.isMetaMask\n            ) {\n                // Ethereum user detected. You can now use the provider.\n                const provider = window[\"ethereum\"];\n                await provider.enable();\n                let kovanProvider = new Web3.providers.HttpProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n                setLoadingMessage(\"Initializing Biconomy ...\");\n                const biconomy = new Biconomy(kovanProvider, { apiKey: config.apiKey.prod, debug: true });\n\n                // This web3 instance is used to read normally and write to contract via meta transactions.\n                web3 = new Web3(biconomy);\n\n                // This web3 instance is used to get user signature from connected wallet\n                walletWeb3 = new Web3(window.ethereum);\n\n                biconomy.onEvent(biconomy.READY, () => {\n                    // Initialize your dapp here like getting user accounts etc\n                    contract = new web3.eth.Contract(\n                        config.contract.abi,\n                        config.contract.address\n                    );\n                    setSelectedAddress(provider.selectedAddress);\n                    getQuoteFromNetwork();\n                    provider.on(\"accountsChanged\", function (accounts) {\n                        setSelectedAddress(accounts[0]);\n                    });\n                }).onEvent(biconomy.ERROR, (error, message) => {\n                    // Handle error while initializing mexa\n                });\n            } else {\n                showErrorMessage(\"Metamask not installed\");\n            }\n        }\n        init();\n    }, []);\n\n    const handleClose = () => {\n        setBackdropOpen(false);\n    };\n\n    const handleToggle = () => {\n        setBackdropOpen(!backdropOpen);\n    };\n\n    const onQuoteChange = event => {\n        setNewQuote(event.target.value);\n    };\n\n    const onSubmitWithPrivateKey = async () => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n                console.log(\"Sending meta transaction\");\n                // NOTE: prepend 0x in private key to be used with web3.js\n                let privateKey = \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n                let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n                let nonce = await contract.methods.getNonce(userAddress).call();\n                let functionSignature = contract.methods.setQuote(newQuote).encodeABI();\n                let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, config.contract.address);\n                \n                let {signature} = web3.eth.accounts.sign(\"0x\" + messageToSign.toString(\"hex\"), privateKey);\n                let { r, s, v } = getSignatureParameters(signature);\n                let executeMetaTransactionData = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).encodeABI();\n                let txParams = {\n                    \"from\": userAddress,\n                    \"to\": config.contract.address,\n                    \"value\": \"0x0\",\n                    \"gas\": \"100000\",\n                    \"data\": executeMetaTransactionData\n                };\n                const signedTx = await web3.eth.accounts.signTransaction(txParams, `0x${privateKey}`);\n                let receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction, (error, txHash) => {\n                    if (error) {\n                        return console.error(error);\n                    }\n                    console.log(\"Transaction hash is \", txHash);\n                    showInfoMessage(`Transaction sent to blockchain with hash ${txHash}`);\n                });\n                setTransactionHash(receipt.transactionHash);\n                showSuccessMessage(\"Transaction confirmed\");\n                getQuoteFromNetwork();\n            } else {\n                console.log(\"Sending normal transaction\");\n                contract.methods\n                    .setQuote(newQuote)\n                    .send({ from: selectedAddress })\n                    .on(\"transactionHash\", function (hash) {\n                        showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n                    })\n                    .once(\"confirmation\", function (confirmationNumber, receipt) {\n                        setTransactionHash(receipt.transactionHash);\n                        showSuccessMessage(\"Transaction confirmed\");\n                        getQuoteFromNetwork();\n                    });\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    }\n\n    const constructMetaTransactionMessage = (nonce, chainId, functionSignature, contractAddress) => {\n        return abi.soliditySHA3(\n            [\"uint256\",\"address\",\"uint256\",\"bytes\"],\n            [nonce, contractAddress, chainId, toBuffer(functionSignature)]\n        );\n      }\n\n    const onSubmit = async event => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n                console.log(\"Sending meta transaction\");\n                let userAddress = selectedAddress;\n                let nonce = await contract.methods.getNonce(userAddress).call();\n                let functionSignature = contract.methods.setQuote(newQuote).encodeABI();\n                let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, config.contract.address);\n\n                // NOTE: We are using walletWeb3 here to get signature from connected wallet\n                const signature = await walletWeb3.eth.personal.sign(\n                \"0x\" + messageToSign.toString(\"hex\"),\n                userAddress\n                );\n                \n                // NOTE: Using walletWeb3 here, as it is connected to the wallet where user account is present.\n                let { r, s, v } = getSignatureParameters(signature);\n                sendSignedTransaction(userAddress, functionSignature, r, s, v);\n            } else {\n                console.log(\"Sending normal transaction\");\n                contract.methods\n                    .setQuote(newQuote)\n                    .send({ from: selectedAddress })\n                    .on(\"transactionHash\", function (hash) {\n                        showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n                    })\n                    .once(\"confirmation\", function (confirmationNumber, receipt) {\n                        setTransactionHash(receipt.transactionHash);\n                        showSuccessMessage(\"Transaction confirmed\");\n                        getQuoteFromNetwork();\n                    });\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    };\n\n    const getSignatureParameters = signature => {\n        if (!web3.utils.isHexStrict(signature)) {\n            throw new Error(\n                'Given value \"'.concat(signature, '\" is not a valid hex string.')\n            );\n        }\n        var r = signature.slice(0, 66);\n        var s = \"0x\".concat(signature.slice(66, 130));\n        var v = \"0x\".concat(signature.slice(130, 132));\n        v = web3.utils.hexToNumber(v);\n        if (![27, 28].includes(v)) v += 27;\n        return {\n            r: r,\n            s: s,\n            v: v\n        };\n    };\n\n    const getQuoteFromNetwork = () => {\n        setLoadingMessage(\"Getting Quote from contact ...\");\n        try {\n            if (web3 && contract) {\n                contract.methods\n                    .getQuote()\n                    .call()\n                    .then(function (result) {\n                        handleClose();\n                        console.log(result);\n                        if (\n                            result &&\n                            result.currentQuote != undefined &&\n                            result.currentOwner != undefined\n                        ) {\n                            if (result.currentQuote == \"\") {\n                                showErrorMessage(\"No quotes set on blockchain yet\");\n                            } else {\n                                setQuote(result.currentQuote);\n                                setOwner(result.currentOwner);\n                            }\n                        } else {\n                            showErrorMessage(\"Not able to get quote information from Network\");\n                        }\n                    });\n            } else {\n                handleClose();\n            }\n        } catch(error) {\n            handleClose();\n            console.log(error);\n        }\n    };\n\n    const showErrorMessage = message => {\n        NotificationManager.error(message, \"Error\", 5000);\n    };\n\n    const showSuccessMessage = message => {\n        NotificationManager.success(message, \"Message\", 3000);\n    };\n\n    const showInfoMessage = message => {\n        NotificationManager.info(message, \"Info\", 3000);\n    };\n\n    const sendSignedTransaction = async (userAddress, functionData, r, s, v) => {\n        if (web3 && contract) {\n            try {\n                let gasLimit = await contract.methods\n                    .executeMetaTransaction(userAddress, functionData, r, s, v)\n                    .estimateGas({ from: userAddress });\n                let gasPrice = await web3.eth.getGasPrice();\n                let tx = contract.methods\n                    .executeMetaTransaction(userAddress, functionData, r, s, v)\n                    .send({\n                        from: userAddress\n                    });\n\n                tx.on(\"transactionHash\", function (hash) {\n                    console.log(`Transaction hash is ${hash}`);\n                    showInfoMessage(`Transaction sent by relayer with hash ${hash}`);\n                }).once(\"confirmation\", function (confirmationNumber, receipt) {\n                    console.log(receipt);\n                    setTransactionHash(receipt.transactionHash);\n                    showSuccessMessage(\"Transaction confirmed on chain\");\n                    getQuoteFromNetwork();\n                });\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <section className=\"top-row\">\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Library </span>\n                    <span className=\"label-value\">web3.js</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Meta Transaction</span>\n                    <span className=\"label-value\">Custom Approach</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Signature Type</span>\n                    <span className=\"label-value\">Personal Signature</span>\n                </div>\n            </section>\n            <section className=\"main\">\n                <div className=\"mb-wrap mb-style-2\">\n                    <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n                        <p>{quote}</p>\n                    </blockquote>\n                </div>\n\n                <div className=\"mb-attribution\">\n                    <p className=\"mb-author\">{owner}</p>\n                    {selectedAddress.toLowerCase() === owner.toLowerCase() && (\n                        <cite className=\"owner\">You are the owner of the quote</cite>\n                    )}\n                    {selectedAddress.toLowerCase() !== owner.toLowerCase() && (\n                        <cite>You are not the owner of the quote</cite>\n                    )}\n                </div>\n            </section>\n            <section>\n                {transactionHash !== \"\" && <Box className={classes.root} mt={2} p={2}>\n                    <Typography>\n                        Check your transaction hash\n            <Link href={`https://kovan.etherscan.io/tx/${transactionHash}`} target=\"_blank\"\n                            className={classes.link}>\n                            here\n            </Link>\n                    </Typography>\n                </Box>}\n            </section>\n            <section>\n                <div className=\"submit-container\">\n                    <div className=\"submit-row\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter your quote\"\n                            onChange={onQuoteChange}\n                            value={newQuote}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n                            Submit\n            </Button>\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmitWithPrivateKey} style={{ marginLeft: \"10px\" }}>\n                            Submit (using private key)\n            </Button>\n                    </div>\n                </div>\n            </section>\n            <Backdrop className={classes.backdrop} open={backdropOpen} onClick={handleClose}>\n                <CircularProgress color=\"inherit\" />\n                <div style={{ paddingLeft: \"10px\" }}>{loadingMessage}</div>\n            </Backdrop>\n            <NotificationContainer />\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}