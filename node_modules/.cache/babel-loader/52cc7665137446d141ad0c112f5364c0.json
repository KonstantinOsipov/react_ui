{"ast":null,"code":"import _regeneratorRuntime from\"/home/konstantin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/react-ui-biconomy/react-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/konstantin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/react-ui-biconomy/react-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/konstantin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/react-ui-biconomy/react-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import\"../App.css\";import Button from\"@material-ui/core/Button\";import{NotificationContainer,NotificationManager}from\"react-notifications\";import\"react-notifications/lib/notifications.css\";import Backdrop from'@material-ui/core/Backdrop';import CircularProgress from'@material-ui/core/CircularProgress';import{ethers}from\"ethers\";import{Biconomy}from\"@biconomy/mexa\";import{makeStyles}from'@material-ui/core/styles';import Link from'@material-ui/core/Link';import Typography from'@material-ui/core/Typography';import{Box}from\"@material-ui/core\";var sigUtil=require(\"eth-sig-util\");var config={contract:{address:\"0x853bfD0160d67DF13a9F70409f9038f6473585Bd\",abi:[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"addresspayable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"currentQuote\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newQuote\",\"type\":\"string\"}],\"name\":\"setQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]},apiKey:{test:\"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",prod:\"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"},api:{test:\"https://test-api.biconomy.io\",prod:\"https://api.biconomy.io\"}};var domainType=[{name:\"name\",type:\"string\"},{name:\"version\",type:\"string\"},{name:\"verifyingContract\",type:\"address\"},{name:\"salt\",type:\"bytes32\"}];var metaTransactionType=[{name:\"nonce\",type:\"uint256\"},{name:\"from\",type:\"address\"},{name:\"functionSignature\",type:\"bytes\"}];var domainData={name:\"TestContract\",version:\"1\",verifyingContract:config.contract.address,salt:ethers.utils.hexZeroPad(ethers.BigNumber.from(42).toHexString(),32)};var ethersProvider,walletProvider,walletSigner;var contract,contractInterface;var useStyles=makeStyles(function(theme){return{root:{'& > * + *':{marginLeft:theme.spacing(2)}},link:{marginLeft:\"5px\"},backdrop:{zIndex:theme.zIndex.drawer+1,color:'#fff',opacity:'.85!important',background:'#000'}};});var biconomy;function App(){var classes=useStyles();var preventDefault=function preventDefault(event){return event.preventDefault();};var _React$useState=React.useState(true),_React$useState2=_slicedToArray(_React$useState,2),backdropOpen=_React$useState2[0],setBackdropOpen=_React$useState2[1];var _React$useState3=React.useState(\" Loading Application ...\"),_React$useState4=_slicedToArray(_React$useState3,2),loadingMessage=_React$useState4[0],setLoadingMessage=_React$useState4[1];var _useState=useState(\"This is a default quote\"),_useState2=_slicedToArray(_useState,2),quote=_useState2[0],setQuote=_useState2[1];var _useState3=useState(\"Default Owner Address\"),_useState4=_slicedToArray(_useState3,2),owner=_useState4[0],setOwner=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),newQuote=_useState6[0],setNewQuote=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),selectedAddress=_useState8[0],setSelectedAddress=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),metaTxEnabled=_useState10[0],setMetaTxEnabled=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),transactionHash=_useState12[0],setTransactionHash=_useState12[1];var handleClose=function handleClose(){setBackdropOpen(false);};var handleToggle=function handleToggle(){setBackdropOpen(!backdropOpen);};useEffect(function(){function init(){return _init.apply(this,arguments);}function _init(){_init=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var provider,userAddress;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(typeof window.ethereum!==\"undefined\"&&window.ethereum.isMetaMask)){_context2.next=16;break;}// Ethereum user detected. You can now use the provider.\nprovider=window[\"ethereum\"];_context2.next=4;return provider.enable();case 4:setLoadingMessage(\"Initializing Biconomy ...\");// We're creating biconomy provider linked to your network of choice where your contract is deployed\nbiconomy=new Biconomy(new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\"),{apiKey:config.apiKey.prod,debug:true});/*\n                  This provider is linked to your wallet.\n                  If needed, substitute your wallet solution in place of window.ethereum \n                */ethersProvider=new ethers.providers.Web3Provider(biconomy);walletProvider=new ethers.providers.Web3Provider(window.ethereum);walletSigner=walletProvider.getSigner();_context2.next=11;return walletSigner.getAddress();case 11:userAddress=_context2.sent;setSelectedAddress(userAddress);biconomy.onEvent(biconomy.READY,/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Initialize your dapp here like getting user accounts etc\ncontract=new ethers.Contract(config.contract.address,config.contract.abi,biconomy.getSignerByAddress(userAddress));contractInterface=new ethers.utils.Interface(config.contract.abi);getQuoteFromNetwork();case 3:case\"end\":return _context.stop();}}},_callee);}))).onEvent(biconomy.ERROR,function(error,message){// Handle error while initializing mexa\nconsole.log(message);console.log(error);});_context2.next=17;break;case 16:showErrorMessage(\"Metamask not installed\");case 17:case\"end\":return _context2.stop();}}},_callee2);}));return _init.apply(this,arguments);}init();},[]);var onQuoteChange=function onQuoteChange(event){setNewQuote(event.target.value);};var onSubmitWithEIP712Sign=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event){var userAddress,nonce,functionSignature,message,dataToSign,signature,_getSignatureParamete,r,s,v,tx,confirmation;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(newQuote!=\"\"&&contract)){_context3.next=36;break;}setTransactionHash(\"\");if(!metaTxEnabled){_context3.next=21;break;}showInfoMessage(\"Getting user signature\");userAddress=selectedAddress;_context3.next=7;return contract.getNonce(userAddress);case 7:nonce=_context3.sent;functionSignature=contractInterface.encodeFunctionData(\"setQuote\",[newQuote]);message={};message.nonce=parseInt(nonce);message.from=userAddress;message.functionSignature=functionSignature;dataToSign=JSON.stringify({types:{EIP712Domain:domainType,MetaTransaction:metaTransactionType},domain:domainData,primaryType:\"MetaTransaction\",message:message});// Its important to use eth_signTypedData_v3 and not v4 to get EIP712 signature because we have used salt in domain data\n// instead of chainId\n_context3.next=16;return walletProvider.send(\"eth_signTypedData_v3\",[userAddress,dataToSign]);case 16:signature=_context3.sent;_getSignatureParamete=getSignatureParameters(signature),r=_getSignatureParamete.r,s=_getSignatureParamete.s,v=_getSignatureParamete.v;sendTransaction(userAddress,functionSignature,r,s,v);_context3.next=34;break;case 21:console.log(\"Sending normal transaction\");_context3.next=24;return contract.setQuote(newQuote);case 24:tx=_context3.sent;console.log(\"Transaction hash : \",tx.hash);showInfoMessage(\"Transaction sent by relayer with hash \".concat(tx.hash));_context3.next=29;return tx.wait();case 29:confirmation=_context3.sent;console.log(confirmation);setTransactionHash(tx.hash);showSuccessMessage(\"Transaction confirmed on chain\");getQuoteFromNetwork();case 34:_context3.next=37;break;case 36:showErrorMessage(\"Please enter the quote\");case 37:case\"end\":return _context3.stop();}}},_callee3);}));return function onSubmitWithEIP712Sign(_x){return _ref2.apply(this,arguments);};}();var onSubmitWithPrivateKey=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(event){var privateKey,wallet,userAddress,nonce,functionSignature,message,dataToSign,signature,_getSignatureParamete2,r,s,v,tx,confirmation;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(newQuote!=\"\"&&contract)){_context4.next=43;break;}setTransactionHash(\"\");_context4.prev=2;if(!metaTxEnabled){_context4.next=22;break;}showInfoMessage(\"Getting user signature\");privateKey=\"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";wallet=new ethers.Wallet(privateKey);userAddress=\"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";_context4.next=10;return contract.getNonce(userAddress);case 10:nonce=_context4.sent;functionSignature=contractInterface.encodeFunctionData(\"setQuote\",[newQuote]);message={};message.nonce=parseInt(nonce);message.from=userAddress;message.functionSignature=functionSignature;// NOTE: DO NOT use JSON.stringify on dataToSign object\ndataToSign={types:{EIP712Domain:domainType,MetaTransaction:metaTransactionType},domain:domainData,primaryType:\"MetaTransaction\",message:message};// Its important to use eth_signTypedData_v3 and not v4 to get EIP712 signature because we have used salt in domain data\n// instead of chainId\nsignature=sigUtil.signTypedMessage(new Buffer.from(privateKey,\"hex\"),{data:dataToSign},\"V3\");_getSignatureParamete2=getSignatureParameters(signature),r=_getSignatureParamete2.r,s=_getSignatureParamete2.s,v=_getSignatureParamete2.v;sendTransaction(userAddress,functionSignature,r,s,v);_context4.next=35;break;case 22:console.log(\"Sending normal transaction\");_context4.next=25;return contract.setQuote(newQuote);case 25:tx=_context4.sent;console.log(\"Transaction hash : \",tx.hash);showInfoMessage(\"Transaction sent by relayer with hash \".concat(tx.hash));_context4.next=30;return tx.wait();case 30:confirmation=_context4.sent;console.log(confirmation);setTransactionHash(tx.hash);showSuccessMessage(\"Transaction confirmed on chain\");getQuoteFromNetwork();case 35:_context4.next=41;break;case 37:_context4.prev=37;_context4.t0=_context4[\"catch\"](2);console.log(_context4.t0);handleClose();case 41:_context4.next=44;break;case 43:showErrorMessage(\"Please enter the quote\");case 44:case\"end\":return _context4.stop();}}},_callee4,null,[[2,37]]);}));return function onSubmitWithPrivateKey(_x2){return _ref3.apply(this,arguments);};}();var getSignatureParameters=function getSignatureParameters(signature){if(!ethers.utils.isHexString(signature)){throw new Error('Given value \"'.concat(signature,'\" is not a valid hex string.'));}var r=signature.slice(0,66);var s=\"0x\".concat(signature.slice(66,130));var v=\"0x\".concat(signature.slice(130,132));v=ethers.BigNumber.from(v).toNumber();if(![27,28].includes(v))v+=27;return{r:r,s:s,v:v};};var getQuoteFromNetwork=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var result;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:setLoadingMessage(\"Getting Quote from contact ...\");_context5.next=3;return contract.getQuote();case 3:result=_context5.sent;if(result&&result.currentQuote!=undefined&&result.currentOwner!=undefined){if(result.currentQuote==\"\"){showErrorMessage(\"No quotes set on blockchain yet\");}else{setQuote(result.currentQuote);setOwner(result.currentOwner);}}else{showErrorMessage(\"Not able to get quote information from Network\");}handleClose();case 6:case\"end\":return _context5.stop();}}},_callee5);}));return function getQuoteFromNetwork(){return _ref4.apply(this,arguments);};}();var showErrorMessage=function showErrorMessage(message){NotificationManager.error(message,\"Error\",5000);};var showSuccessMessage=function showSuccessMessage(message){NotificationManager.success(message,\"Message\",3000);};var showInfoMessage=function showInfoMessage(message){NotificationManager.info(message,\"Info\",3000);};var sendTransaction=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(userAddress,functionData,r,s,v){return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:if(ethersProvider&&contract){try{fetch(\"\".concat(config.api.prod,\"/api/v2/meta-tx/native\"),{method:\"POST\",headers:{\"x-api-key\":config.apiKey.prod,'Content-Type':'application/json;charset=utf-8'},body:JSON.stringify({\"to\":config.contract.address,\"apiId\":\"ab6a62bf-c58f-4040-9084-0fad85f3345a\",//\"apiId\": \"f93b5089-574e-47b7-92a1-2a9fff66215a\",\n\"params\":[userAddress,functionData,r,s,v],\"from\":userAddress})}).then(function(response){return response.json();}).then(/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(result){var receipt;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:console.log(result);showInfoMessage(\"Transaction sent by relayer with hash \".concat(result.txHash));_context6.next=4;return ethersProvider.waitForTransaction(result.txHash);case 4:receipt=_context6.sent;console.log(receipt);setTransactionHash(receipt.transactionHash);showSuccessMessage(\"Transaction confirmed on chain\");getQuoteFromNetwork();case 9:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x8){return _ref6.apply(this,arguments);};}()).catch(function(error){console.log(error);});}catch(error){console.log(error);}}case 1:case\"end\":return _context7.stop();}}},_callee7);}));return function sendTransaction(_x3,_x4,_x5,_x6,_x7){return _ref5.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"section\",{className:\"top-row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"top-row-item\"},/*#__PURE__*/React.createElement(\"span\",{className:\"label\"},\"Library \"),/*#__PURE__*/React.createElement(\"span\",{className:\"label-value\"},\"ethers.js\")),/*#__PURE__*/React.createElement(\"div\",{className:\"top-row-item\"},/*#__PURE__*/React.createElement(\"span\",{className:\"label\"},\"Meta Transaction\"),/*#__PURE__*/React.createElement(\"span\",{className:\"label-value\"},\"Custom Approach\")),/*#__PURE__*/React.createElement(\"div\",{className:\"top-row-item\"},/*#__PURE__*/React.createElement(\"span\",{className:\"label\"},\"Signature Type\"),/*#__PURE__*/React.createElement(\"span\",{className:\"label-value\"},\"EIP712 Signature\"))),/*#__PURE__*/React.createElement(\"section\",{className:\"main\"},/*#__PURE__*/React.createElement(\"div\",{className:\"mb-wrap mb-style-2\"},/*#__PURE__*/React.createElement(\"blockquote\",{cite:\"http://www.gutenberg.org/ebboks/11\"},/*#__PURE__*/React.createElement(\"p\",null,quote))),/*#__PURE__*/React.createElement(\"div\",{className:\"mb-attribution\"},/*#__PURE__*/React.createElement(\"p\",{className:\"mb-author\"},owner),selectedAddress.toLowerCase()===owner.toLowerCase()&&/*#__PURE__*/React.createElement(\"cite\",{className:\"owner\"},\"You are the owner of the quote\"),selectedAddress.toLowerCase()!==owner.toLowerCase()&&/*#__PURE__*/React.createElement(\"cite\",null,\"You are not the owner of the quote\"))),/*#__PURE__*/React.createElement(\"section\",null,transactionHash!==\"\"&&/*#__PURE__*/React.createElement(Box,{className:classes.root,mt:2,p:2},/*#__PURE__*/React.createElement(Typography,null,\"Check your transaction hash\",/*#__PURE__*/React.createElement(Link,{href:\"https://kovan.etherscan.io/tx/\".concat(transactionHash),target:\"_blank\",className:classes.link},\"here\")))),/*#__PURE__*/React.createElement(\"section\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"submit-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"submit-row\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"Enter your quote\",onChange:onQuoteChange,value:newQuote}),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",onClick:onSubmitWithEIP712Sign,style:{marginLeft:\"10px\"}},\"Submit\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",onClick:onSubmitWithPrivateKey,style:{marginLeft:\"10px\"}},\"Submit (Private Key)\")))),/*#__PURE__*/React.createElement(Backdrop,{className:classes.backdrop,open:backdropOpen,onClick:handleClose},/*#__PURE__*/React.createElement(CircularProgress,{color:\"inherit\"}),/*#__PURE__*/React.createElement(\"div\",{style:{paddingLeft:\"10px\"}},loadingMessage)),/*#__PURE__*/React.createElement(NotificationContainer,null));}export default App;","map":{"version":3,"sources":["/home/konstantin/Документы/react-ui-biconomy/react-ui/src/components/Ethers_Custom_EIP712Sign_API.js"],"names":["React","useState","useEffect","Button","NotificationContainer","NotificationManager","Backdrop","CircularProgress","ethers","Biconomy","makeStyles","Link","Typography","Box","sigUtil","require","config","contract","address","abi","apiKey","test","prod","api","domainType","name","type","metaTransactionType","domainData","version","verifyingContract","salt","utils","hexZeroPad","BigNumber","from","toHexString","ethersProvider","walletProvider","walletSigner","contractInterface","useStyles","theme","root","marginLeft","spacing","link","backdrop","zIndex","drawer","color","opacity","background","biconomy","App","classes","preventDefault","event","backdropOpen","setBackdropOpen","loadingMessage","setLoadingMessage","quote","setQuote","owner","setOwner","newQuote","setNewQuote","selectedAddress","setSelectedAddress","metaTxEnabled","setMetaTxEnabled","transactionHash","setTransactionHash","handleClose","handleToggle","init","window","ethereum","isMetaMask","provider","enable","providers","JsonRpcProvider","debug","Web3Provider","getSigner","getAddress","userAddress","onEvent","READY","Contract","getSignerByAddress","Interface","getQuoteFromNetwork","ERROR","error","message","console","log","showErrorMessage","onQuoteChange","target","value","onSubmitWithEIP712Sign","showInfoMessage","getNonce","nonce","functionSignature","encodeFunctionData","parseInt","dataToSign","JSON","stringify","types","EIP712Domain","MetaTransaction","domain","primaryType","send","signature","getSignatureParameters","r","s","v","sendTransaction","tx","hash","wait","confirmation","showSuccessMessage","onSubmitWithPrivateKey","privateKey","wallet","Wallet","signTypedMessage","Buffer","data","isHexString","Error","concat","slice","toNumber","includes","getQuote","result","currentQuote","undefined","currentOwner","success","info","functionData","fetch","method","headers","body","then","response","json","txHash","waitForTransaction","receipt","catch","toLowerCase","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    NotificationContainer,\n    NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nlet sigUtil = require(\"eth-sig-util\");\n\nlet config = {\n    contract: {\n        address: \"0x853bfD0160d67DF13a9F70409f9038f6473585Bd\",\n        abi: [{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"addresspayable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"currentQuote\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newQuote\",\"type\":\"string\"}],\"name\":\"setQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    },\n    apiKey: {\n        test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n        prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n    },\n    api: {\n        test: \"https://test-api.biconomy.io\",\n        prod: \"https://api.biconomy.io\"\n    }\n}\n\nconst domainType = [\n    { name: \"name\", type: \"string\" },\n    { name: \"version\", type: \"string\" },\n    { name: \"verifyingContract\", type: \"address\" },\n    { name: \"salt\", type: \"bytes32\" },\n];\n\nconst metaTransactionType = [\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"from\", type: \"address\" },\n    { name: \"functionSignature\", type: \"bytes\" }\n];\n\nlet domainData = {\n    name: \"TestContract\",\n    version: \"1\",\n    verifyingContract: config.contract.address,\n    salt: ethers.utils.hexZeroPad((ethers.BigNumber.from(42)).toHexString(), 32)\n};\n\nlet ethersProvider,walletProvider, walletSigner;\nlet contract, contractInterface;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    link: {\n        marginLeft: \"5px\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        opacity: '.85!important',\n        background: '#000'\n    },\n}));\n\nlet biconomy;\n\nfunction App() {\n    const classes = useStyles();\n    const preventDefault = (event) => event.preventDefault();\n    const [backdropOpen, setBackdropOpen] = React.useState(true);\n    const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n    const [quote, setQuote] = useState(\"This is a default quote\");\n    const [owner, setOwner] = useState(\"Default Owner Address\");\n    const [newQuote, setNewQuote] = useState(\"\");\n    const [selectedAddress, setSelectedAddress] = useState(\"\");\n    const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n    const [transactionHash, setTransactionHash] = useState(\"\");\n\n    const handleClose = () => {\n        setBackdropOpen(false);\n    };\n\n    const handleToggle = () => {\n        setBackdropOpen(!backdropOpen);\n    };\n\n\n    useEffect(() => {\n        async function init() {\n            if (\n                typeof window.ethereum !== \"undefined\" &&\n                window.ethereum.isMetaMask\n            ) {\n                // Ethereum user detected. You can now use the provider.\n                const provider = window[\"ethereum\"];\n                await provider.enable();\n                setLoadingMessage(\"Initializing Biconomy ...\");\n                // We're creating biconomy provider linked to your network of choice where your contract is deployed\n                biconomy = new Biconomy(new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\"),\n                    { apiKey: config.apiKey.prod, debug: true });\n\n                /*\n                  This provider is linked to your wallet.\n                  If needed, substitute your wallet solution in place of window.ethereum \n                */\n                ethersProvider = new ethers.providers.Web3Provider(biconomy);\n                walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n                walletSigner = walletProvider.getSigner();\n\n                let userAddress = await walletSigner.getAddress()\n                setSelectedAddress(userAddress);\n\n                biconomy.onEvent(biconomy.READY, async () => {\n\n                    // Initialize your dapp here like getting user accounts etc\n                    contract = new ethers.Contract(\n                        config.contract.address,\n                        config.contract.abi,\n                        biconomy.getSignerByAddress(userAddress)\n                    );\n\n                    contractInterface = new ethers.utils.Interface(config.contract.abi);\n                    getQuoteFromNetwork();\n                }).onEvent(biconomy.ERROR, (error, message) => {\n                    // Handle error while initializing mexa\n                    console.log(message);\n                    console.log(error);\n                });\n            } else {\n                showErrorMessage(\"Metamask not installed\");\n            }\n        }\n        init();\n    }, []);\n\n    const onQuoteChange = event => {\n        setNewQuote(event.target.value);\n    };\n\n    const onSubmitWithEIP712Sign = async event => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n                showInfoMessage(`Getting user signature`);\n                let userAddress = selectedAddress;\n                let nonce = await contract.getNonce(userAddress);\n                let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n                let message = {};\n                message.nonce = parseInt(nonce);\n                message.from = userAddress;\n                message.functionSignature = functionSignature;\n\n                const dataToSign = JSON.stringify({\n                    types: {\n                        EIP712Domain: domainType,\n                        MetaTransaction: metaTransactionType\n                    },\n                    domain: domainData,\n                    primaryType: \"MetaTransaction\",\n                    message: message\n                });\n\n                // Its important to use eth_signTypedData_v3 and not v4 to get EIP712 signature because we have used salt in domain data\n                // instead of chainId\n                let signature = await walletProvider.send(\"eth_signTypedData_v3\", [userAddress, dataToSign])\n                let { r, s, v } = getSignatureParameters(signature);\n                sendTransaction(userAddress, functionSignature, r, s, v);\n            } else {\n                console.log(\"Sending normal transaction\");\n                let tx = await contract.setQuote(newQuote);\n                console.log(\"Transaction hash : \", tx.hash);\n                showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n                let confirmation = await tx.wait();\n                console.log(confirmation);\n                setTransactionHash(tx.hash);\n                showSuccessMessage(\"Transaction confirmed on chain\");\n                getQuoteFromNetwork();\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    };\n\n    const onSubmitWithPrivateKey = async (event) => {\n      if (newQuote != \"\" && contract) {\n        setTransactionHash(\"\");\n\n        try {\n          if (metaTxEnabled) {\n            showInfoMessage(`Getting user signature`);\n            let privateKey = \n              \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n            let wallet = new ethers.Wallet(privateKey);\n            let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n            let nonce = await contract.getNonce(userAddress);\n            let functionSignature = contractInterface.encodeFunctionData(\n              \"setQuote\",\n              [newQuote]\n            );\n            let message = {};\n            message.nonce = parseInt(nonce);\n            message.from = userAddress;\n            message.functionSignature = functionSignature;\n\n            // NOTE: DO NOT use JSON.stringify on dataToSign object\n            const dataToSign = {\n              types: {\n                EIP712Domain: domainType,\n                MetaTransaction: metaTransactionType,\n              },\n              domain: domainData,\n              primaryType: \"MetaTransaction\",\n              message: message,\n            };\n\n            // Its important to use eth_signTypedData_v3 and not v4 to get EIP712 signature because we have used salt in domain data\n            // instead of chainId\n            const signature = sigUtil.signTypedMessage(\n              new Buffer.from(privateKey, \"hex\"),\n              { data: dataToSign },\n              \"V3\"\n            );\n            let { r, s, v } = getSignatureParameters(signature);\n            sendTransaction(userAddress, functionSignature, r, s, v);\n          } else {\n            console.log(\"Sending normal transaction\");\n            let tx = await contract.setQuote(newQuote);\n            console.log(\"Transaction hash : \", tx.hash);\n            showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n            let confirmation = await tx.wait();\n            console.log(confirmation);\n            setTransactionHash(tx.hash);\n            showSuccessMessage(\"Transaction confirmed on chain\");\n            getQuoteFromNetwork();\n          }\n        } catch (error) {\n          console.log(error);\n          handleClose();\n        }\n      } else {\n        showErrorMessage(\"Please enter the quote\");\n      }\n    };\n\n    const getSignatureParameters = signature => {\n        if (!ethers.utils.isHexString(signature)) {\n            throw new Error(\n                'Given value \"'.concat(signature, '\" is not a valid hex string.')\n            );\n        }\n        var r = signature.slice(0, 66);\n        var s = \"0x\".concat(signature.slice(66, 130));\n        var v = \"0x\".concat(signature.slice(130, 132));\n        v = ethers.BigNumber.from(v).toNumber();\n        if (![27, 28].includes(v)) v += 27;\n        return {\n            r: r,\n            s: s,\n            v: v\n        };\n    };\n\n    const getQuoteFromNetwork = async () => {\n        setLoadingMessage(\"Getting Quote from contact ...\");\n        let result = await contract.getQuote();\n        if (\n            result &&\n            result.currentQuote != undefined &&\n            result.currentOwner != undefined\n        ) {\n            if (result.currentQuote == \"\") {\n                showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n                setQuote(result.currentQuote);\n                setOwner(result.currentOwner);\n            }\n        } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n        }\n        handleClose();\n    };\n\n    const showErrorMessage = message => {\n        NotificationManager.error(message, \"Error\", 5000);\n    };\n\n    const showSuccessMessage = message => {\n        NotificationManager.success(message, \"Message\", 3000);\n    };\n\n    const showInfoMessage = message => {\n        NotificationManager.info(message, \"Info\", 3000);\n    };\n\n    const sendTransaction = async (userAddress, functionData, r, s, v) => {\n        if (ethersProvider && contract) {\n            try {\n                fetch(`${config.api.prod}/api/v2/meta-tx/native`, {\n                    method: \"POST\",\n                    headers: {\n                      \"x-api-key\" : config.apiKey.prod,\n                      'Content-Type': 'application/json;charset=utf-8'\n                    },\n                    body: JSON.stringify({\n                      \"to\": config.contract.address,\n                      \"apiId\": \"ab6a62bf-c58f-4040-9084-0fad85f3345a\",\n                    //\"apiId\": \"f93b5089-574e-47b7-92a1-2a9fff66215a\",\n                      \"params\": [userAddress, functionData, r, s, v],\n                      \"from\": userAddress\n                    })\n                  })\n                  .then(response=>response.json())\n                  .then(async function(result) {\n                    console.log(result);\n                    showInfoMessage(`Transaction sent by relayer with hash ${result.txHash}`);\n                    let receipt = await ethersProvider.waitForTransaction(\n                        result.txHash\n                      );\n                      console.log(receipt);\n                    setTransactionHash(receipt.transactionHash);\n                    showSuccessMessage(\"Transaction confirmed on chain\");\n                    getQuoteFromNetwork();\n                  }).catch(function(error) {\n                      console.log(error)\n                    });\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <section className=\"top-row\">\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Library </span>\n                    <span className=\"label-value\">ethers.js</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Meta Transaction</span>\n                    <span className=\"label-value\">Custom Approach</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Signature Type</span>\n                    <span className=\"label-value\">EIP712 Signature</span>\n                </div>\n            </section>\n            <section className=\"main\">\n                <div className=\"mb-wrap mb-style-2\">\n                    <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n                        <p>{quote}</p>\n                    </blockquote>\n                </div>\n\n                <div className=\"mb-attribution\">\n                    <p className=\"mb-author\">{owner}</p>\n                    {selectedAddress.toLowerCase() === owner.toLowerCase() && (\n                        <cite className=\"owner\">You are the owner of the quote</cite>\n                    )}\n                    {selectedAddress.toLowerCase() !== owner.toLowerCase() && (\n                        <cite>You are not the owner of the quote</cite>\n                    )}\n                </div>\n            </section>\n            <section>\n                {transactionHash !== \"\" && <Box className={classes.root} mt={2} p={2}>\n                    <Typography>\n                        Check your transaction hash\n            <Link href={`https://kovan.etherscan.io/tx/${transactionHash}`} target=\"_blank\"\n                            className={classes.link}>\n                            here\n            </Link>\n                    </Typography>\n                </Box>}\n            </section>\n            <section>\n                <div className=\"submit-container\">\n                    <div className=\"submit-row\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter your quote\"\n                            onChange={onQuoteChange}\n                            value={newQuote}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmitWithEIP712Sign} style={{ marginLeft: \"10px\" }}>\n                            Submit\n            </Button>\n\n                        <Button variant=\"contained\" color=\"secondary\" onClick={onSubmitWithPrivateKey} style={{ marginLeft: \"10px\" }}>\n                            Submit (Private Key)\n            </Button>\n                    </div>\n                </div>\n            </section>\n            <Backdrop className={classes.backdrop} open={backdropOpen} onClick={handleClose}>\n                <CircularProgress color=\"inherit\" />\n                <div style={{ paddingLeft: \"10px\" }}>{loadingMessage}</div>\n            </Backdrop>\n            <NotificationContainer />\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}