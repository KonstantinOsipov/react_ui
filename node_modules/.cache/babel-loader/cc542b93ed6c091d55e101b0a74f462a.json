{"ast":null,"code":"import { ethers } from 'ethers';\n\nconst {\n  config\n} = require(\"../config\");\n\nconst abi = require(\"ethereumjs-abi\");\n\nlet helperAttributes = {};\nlet supportedNetworks = [42, 4, 5]; //add more\n\nhelperAttributes.ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\"; //todo\n//update baseURL in config for prod \n\nhelperAttributes.baseURL = config.baseURL; // any other constants needed goes in helperAttributes\n\nhelperAttributes.biconomyForwarderAbi = [{\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"_owner\",\n    \"type\": \"address\"\n  }],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"constructor\"\n}, {\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": true,\n    \"internalType\": \"bytes32\",\n    \"name\": \"domainSeparator\",\n    \"type\": \"bytes32\"\n  }, {\n    \"indexed\": false,\n    \"internalType\": \"bytes\",\n    \"name\": \"domainValue\",\n    \"type\": \"bytes\"\n  }],\n  \"name\": \"DomainRegistered\",\n  \"type\": \"event\"\n}, {\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"previousOwner\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"newOwner\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"OwnershipTransferred\",\n  \"type\": \"event\"\n}, {\n  \"inputs\": [],\n  \"name\": \"EIP712_DOMAIN_TYPE\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"REQUEST_TYPEHASH\",\n  \"outputs\": [{\n    \"internalType\": \"bytes32\",\n    \"name\": \"\",\n    \"type\": \"bytes32\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"bytes32\",\n    \"name\": \"\",\n    \"type\": \"bytes32\"\n  }],\n  \"name\": \"domains\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"components\": [{\n      \"internalType\": \"address\",\n      \"name\": \"from\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"to\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"token\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"txGas\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"tokenGasPrice\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"batchId\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"batchNonce\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"deadline\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"bytes\",\n      \"name\": \"data\",\n      \"type\": \"bytes\"\n    }],\n    \"internalType\": \"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\n    \"name\": \"req\",\n    \"type\": \"tuple\"\n  }, {\n    \"internalType\": \"bytes32\",\n    \"name\": \"domainSeparator\",\n    \"type\": \"bytes32\"\n  }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"sig\",\n    \"type\": \"bytes\"\n  }],\n  \"name\": \"executeEIP712\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"success\",\n    \"type\": \"bool\"\n  }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"ret\",\n    \"type\": \"bytes\"\n  }],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"components\": [{\n      \"internalType\": \"address\",\n      \"name\": \"from\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"to\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"token\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"txGas\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"tokenGasPrice\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"batchId\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"batchNonce\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"deadline\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"bytes\",\n      \"name\": \"data\",\n      \"type\": \"bytes\"\n    }],\n    \"internalType\": \"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\n    \"name\": \"req\",\n    \"type\": \"tuple\"\n  }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"sig\",\n    \"type\": \"bytes\"\n  }],\n  \"name\": \"executePersonalSign\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"success\",\n    \"type\": \"bool\"\n  }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"ret\",\n    \"type\": \"bytes\"\n  }],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"from\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"batchId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"getNonce\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"isOwner\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"owner\",\n  \"outputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"name\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"version\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"registerDomainSeparator\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"renounceOwnership\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"newOwner\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"transferOwnership\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"components\": [{\n      \"internalType\": \"address\",\n      \"name\": \"from\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"to\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"token\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"txGas\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"tokenGasPrice\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"batchId\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"batchNonce\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"deadline\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"bytes\",\n      \"name\": \"data\",\n      \"type\": \"bytes\"\n    }],\n    \"internalType\": \"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\n    \"name\": \"req\",\n    \"type\": \"tuple\"\n  }, {\n    \"internalType\": \"bytes32\",\n    \"name\": \"domainSeparator\",\n    \"type\": \"bytes32\"\n  }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"sig\",\n    \"type\": \"bytes\"\n  }],\n  \"name\": \"verifyEIP712\",\n  \"outputs\": [],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"components\": [{\n      \"internalType\": \"address\",\n      \"name\": \"from\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"to\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"token\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"txGas\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"tokenGasPrice\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"batchId\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"batchNonce\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"deadline\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"bytes\",\n      \"name\": \"data\",\n      \"type\": \"bytes\"\n    }],\n    \"internalType\": \"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\n    \"name\": \"req\",\n    \"type\": \"tuple\"\n  }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"sig\",\n    \"type\": \"bytes\"\n  }],\n  \"name\": \"verifyPersonalSign\",\n  \"outputs\": [],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\nhelperAttributes.biconomyForwarderDomainData = {\n  name: \"Biconomy Forwarder\",\n  version: \"1\"\n};\nhelperAttributes.domainType = [{\n  name: \"name\",\n  type: \"string\"\n}, {\n  name: \"version\",\n  type: \"string\"\n}, {\n  name: \"verifyingContract\",\n  type: \"address\"\n}, {\n  name: \"salt\",\n  type: \"bytes32\"\n}];\nhelperAttributes.forwardRequestType = [{\n  name: 'from',\n  type: 'address'\n}, {\n  name: 'to',\n  type: 'address'\n}, {\n  name: 'token',\n  type: 'address'\n}, {\n  name: 'txGas',\n  type: 'uint256'\n}, {\n  name: 'tokenGasPrice',\n  type: 'uint256'\n}, {\n  name: 'batchId',\n  type: 'uint256'\n}, {\n  name: 'batchNonce',\n  type: 'uint256'\n}, {\n  name: 'deadline',\n  type: 'uint256'\n}, {\n  name: 'data',\n  type: 'bytes'\n}]; // pass the networkId to get contract addresses\n\nconst getContractAddresses = async networkId => {\n  let contractAddresses = {};\n  const apiInfo = `${helperAttributes.baseURL}/api/v2/meta-tx/systemInfo?networkId=${networkId}`;\n  const response = await fetch(apiInfo);\n  const systemInfo = await response.json();\n  console.log(\"Response JSON \" + JSON.stringify(systemInfo));\n  contractAddresses.biconomyForwarderAddress = systemInfo.biconomyForwarderAddress;\n  return contractAddresses;\n};\n/**\n * Returns ABI and contract address based on network Id\n * You can build biconomy forwarder contract object using above values and calculate the nonce\n * @param {*} networkId \n */\n\n\nconst getBiconomyForwarderConfig = async networkId => {\n  //get trusted forwarder contract address from network id\n  const contractAddresses = await getContractAddresses(networkId);\n  const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n  return {\n    abi: helperAttributes.biconomyForwarderAbi,\n    address: forwarderAddress\n  };\n};\n/**\n * pass the below params in any order e.g. account=<account>,batchNone=<batchNone>,...\n * @param {*}  account - from (end user's) address for this transaction \n * @param {*}  to - target recipient contract address\n * @param {*}  gasLimitNum - gas estimation of your target method in numeric format\n * @param {*}  batchId - batchId \n * @param {*}  batchNonce - batchNonce which can be verified and obtained from the biconomy forwarder\n * @param {*}  data - functionSignature of target method\n * @param {*}  deadline - optional deadline for this forward request \n */\n\n\nconst buildForwardTxRequest = async _ref => {\n  let {\n    account,\n    to,\n    gasLimitNum,\n    batchId,\n    batchNonce,\n    data,\n    deadline\n  } = _ref;\n  const req = {\n    from: account,\n    to: to,\n    token: helperAttributes.ZERO_ADDRESS,\n    txGas: gasLimitNum,\n    tokenGasPrice: \"0\",\n    batchId: parseInt(batchId),\n    batchNonce: parseInt(batchNonce),\n    deadline: deadline || Math.floor(Date.now() / 1000 + 3600),\n    data: data\n  };\n  return req;\n};\n/**\n * pass your forward request and network Id \n * use this method to build message to be signed by end user in EIP712 signature format \n * @param {*} request - forward request object\n * @param {*} networkId \n */\n\n\nconst getDataToSignForEIP712 = async (request, networkId) => {\n  const contractAddresses = await getContractAddresses(networkId);\n  const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n  let domainData = helperAttributes.biconomyForwarderDomainData;\n  domainData.salt = ethers.utils.hexZeroPad(ethers.BigNumber.from(networkId).toHexString(), 32);\n  domainData.verifyingContract = forwarderAddress;\n  const dataToSign = JSON.stringify({\n    types: {\n      EIP712Domain: helperAttributes.domainType,\n      ERC20ForwardRequest: helperAttributes.forwardRequestType\n    },\n    domain: domainData,\n    primaryType: \"ERC20ForwardRequest\",\n    message: request\n  });\n  return dataToSign;\n};\n/**\n * pass your forward request\n * use this method to build message to be signed by end user in personal signature format \n * @param {*} networkId \n */\n\n\nconst getDataToSignForPersonalSign = request => {\n  const hashToSign = abi.soliditySHA3([\"address\", \"address\", \"address\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"bytes32\"], [request.from, request.to, request.token, request.txGas, request.tokenGasPrice, request.batchId, request.batchNonce, request.deadline, ethers.utils.keccak256(request.data)]);\n  return hashToSign;\n};\n/**\n * get the domain seperator that needs to be passed while using EIP712 signature type\n * @param {*} networkId \n */\n\n\nconst getDomainSeperator = async networkId => {\n  const contractAddresses = await getContractAddresses(networkId);\n  const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n  let domainData = helperAttributes.biconomyForwarderDomainData;\n  domainData.salt = ethers.utils.hexZeroPad(ethers.BigNumber.from(networkId).toHexString(), 32);\n  domainData.verifyingContract = forwarderAddress;\n  const domainSeparator = ethers.utils.keccak256(ethers.utils.defaultAbiCoder.encode([\"bytes32\", \"bytes32\", \"bytes32\", \"address\", \"bytes32\"], [ethers.utils.id(\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"), ethers.utils.id(domainData.name), ethers.utils.id(domainData.version), domainData.verifyingContract, domainData.salt]));\n  return domainSeparator;\n};\n\nexport { helperAttributes, getDomainSeperator, getDataToSignForPersonalSign, getDataToSignForEIP712, buildForwardTxRequest, getBiconomyForwarderConfig };","map":{"version":3,"sources":["/home/ivan/MEGAsync/metatx-standard-playground/example/react-ui/src/api-helpers/biconomyForwarderHelpers.js"],"names":["ethers","config","require","abi","helperAttributes","supportedNetworks","ZERO_ADDRESS","baseURL","biconomyForwarderAbi","biconomyForwarderDomainData","name","version","domainType","type","forwardRequestType","getContractAddresses","networkId","contractAddresses","apiInfo","response","fetch","systemInfo","json","console","log","JSON","stringify","biconomyForwarderAddress","getBiconomyForwarderConfig","forwarderAddress","address","buildForwardTxRequest","account","to","gasLimitNum","batchId","batchNonce","data","deadline","req","from","token","txGas","tokenGasPrice","parseInt","Math","floor","Date","now","getDataToSignForEIP712","request","domainData","salt","utils","hexZeroPad","BigNumber","toHexString","verifyingContract","dataToSign","types","EIP712Domain","ERC20ForwardRequest","domain","primaryType","message","getDataToSignForPersonalSign","hashToSign","soliditySHA3","keccak256","getDomainSeperator","domainSeparator","defaultAbiCoder","encode","id"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,QAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaC,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIE,gBAAgB,GAAG,EAAvB;AACA,IAAIC,iBAAiB,GAAG,CAAC,EAAD,EAAI,CAAJ,EAAM,CAAN,CAAxB,C,CAAkC;;AAClCD,gBAAgB,CAACE,YAAjB,GAAgC,4CAAhC,C,CACA;AACA;;AACAF,gBAAgB,CAACG,OAAjB,GAA2BN,MAAM,CAACM,OAAlC,C,CACA;;AAEAH,gBAAgB,CAACI,oBAAjB,GAAwC,CAAC;AAAC,YAAS,CAAC;AAAC,oBAAe,SAAhB;AAA0B,YAAO,QAAjC;AAA0C,YAAO;AAAjD,GAAD,CAAV;AAAwE,qBAAkB,YAA1F;AAAuG,UAAO;AAA9G,CAAD,EAA8H;AAAC,eAAY,KAAb;AAAmB,YAAS,CAAC;AAAC,eAAU,IAAX;AAAgB,oBAAe,SAA/B;AAAyC,YAAO,iBAAhD;AAAkE,YAAO;AAAzE,GAAD,EAAqF;AAAC,eAAU,KAAX;AAAiB,oBAAe,OAAhC;AAAwC,YAAO,aAA/C;AAA6D,YAAO;AAApE,GAArF,CAA5B;AAA+L,UAAO,kBAAtM;AAAyN,UAAO;AAAhO,CAA9H,EAAuW;AAAC,eAAY,KAAb;AAAmB,YAAS,CAAC;AAAC,eAAU,IAAX;AAAgB,oBAAe,SAA/B;AAAyC,YAAO,eAAhD;AAAgE,YAAO;AAAvE,GAAD,EAAmF;AAAC,eAAU,IAAX;AAAgB,oBAAe,SAA/B;AAAyC,YAAO,UAAhD;AAA2D,YAAO;AAAlE,GAAnF,CAA5B;AAA6L,UAAO,sBAApM;AAA2N,UAAO;AAAlO,CAAvW,EAAklB;AAAC,YAAS,EAAV;AAAa,UAAO,oBAApB;AAAyC,aAAU,CAAC;AAAC,oBAAe,QAAhB;AAAyB,YAAO,EAAhC;AAAmC,YAAO;AAA1C,GAAD,CAAnD;AAAyG,qBAAkB,MAA3H;AAAkI,UAAO;AAAzI,CAAllB,EAAuuB;AAAC,YAAS,EAAV;AAAa,UAAO,kBAApB;AAAuC,aAAU,CAAC;AAAC,oBAAe,SAAhB;AAA0B,YAAO,EAAjC;AAAoC,YAAO;AAA3C,GAAD,CAAjD;AAAyG,qBAAkB,MAA3H;AAAkI,UAAO;AAAzI,CAAvuB,EAA43B;AAAC,YAAS,CAAC;AAAC,oBAAe,SAAhB;AAA0B,YAAO,EAAjC;AAAoC,YAAO;AAA3C,GAAD,CAAV;AAAkE,UAAO,SAAzE;AAAmF,aAAU,CAAC;AAAC,oBAAe,MAAhB;AAAuB,YAAO,EAA9B;AAAiC,YAAO;AAAxC,GAAD,CAA7F;AAA+I,qBAAkB,MAAjK;AAAwK,UAAO;AAA/K,CAA53B,EAAujC;AAAC,YAAS,CAAC;AAAC,kBAAa,CAAC;AAAC,sBAAe,SAAhB;AAA0B,cAAO,MAAjC;AAAwC,cAAO;AAA/C,KAAD,EAA2D;AAAC,sBAAe,SAAhB;AAA0B,cAAO,IAAjC;AAAsC,cAAO;AAA7C,KAA3D,EAAmH;AAAC,sBAAe,SAAhB;AAA0B,cAAO,OAAjC;AAAyC,cAAO;AAAhD,KAAnH,EAA8K;AAAC,sBAAe,SAAhB;AAA0B,cAAO,OAAjC;AAAyC,cAAO;AAAhD,KAA9K,EAAyO;AAAC,sBAAe,SAAhB;AAA0B,cAAO,eAAjC;AAAiD,cAAO;AAAxD,KAAzO,EAA4S;AAAC,sBAAe,SAAhB;AAA0B,cAAO,SAAjC;AAA2C,cAAO;AAAlD,KAA5S,EAAyW;AAAC,sBAAe,SAAhB;AAA0B,cAAO,YAAjC;AAA8C,cAAO;AAArD,KAAzW,EAAya;AAAC,sBAAe,SAAhB;AAA0B,cAAO,UAAjC;AAA4C,cAAO;AAAnD,KAAza,EAAue;AAAC,sBAAe,OAAhB;AAAwB,cAAO,MAA/B;AAAsC,cAAO;AAA7C,KAAve,CAAd;AAA4iB,oBAAe,oDAA3jB;AAAgnB,YAAO,KAAvnB;AAA6nB,YAAO;AAApoB,GAAD,EAA8oB;AAAC,oBAAe,SAAhB;AAA0B,YAAO,iBAAjC;AAAmD,YAAO;AAA1D,GAA9oB,EAAmtB;AAAC,oBAAe,OAAhB;AAAwB,YAAO,KAA/B;AAAqC,YAAO;AAA5C,GAAntB,CAAV;AAAmxB,UAAO,eAA1xB;AAA0yB,aAAU,CAAC;AAAC,oBAAe,MAAhB;AAAuB,YAAO,SAA9B;AAAwC,YAAO;AAA/C,GAAD,EAAwD;AAAC,oBAAe,OAAhB;AAAwB,YAAO,KAA/B;AAAqC,YAAO;AAA5C,GAAxD,CAApzB;AAAk6B,qBAAkB,YAAp7B;AAAi8B,UAAO;AAAx8B,CAAvjC,EAA2gE;AAAC,YAAS,CAAC;AAAC,kBAAa,CAAC;AAAC,sBAAe,SAAhB;AAA0B,cAAO,MAAjC;AAAwC,cAAO;AAA/C,KAAD,EAA2D;AAAC,sBAAe,SAAhB;AAA0B,cAAO,IAAjC;AAAsC,cAAO;AAA7C,KAA3D,EAAmH;AAAC,sBAAe,SAAhB;AAA0B,cAAO,OAAjC;AAAyC,cAAO;AAAhD,KAAnH,EAA8K;AAAC,sBAAe,SAAhB;AAA0B,cAAO,OAAjC;AAAyC,cAAO;AAAhD,KAA9K,EAAyO;AAAC,sBAAe,SAAhB;AAA0B,cAAO,eAAjC;AAAiD,cAAO;AAAxD,KAAzO,EAA4S;AAAC,sBAAe,SAAhB;AAA0B,cAAO,SAAjC;AAA2C,cAAO;AAAlD,KAA5S,EAAyW;AAAC,sBAAe,SAAhB;AAA0B,cAAO,YAAjC;AAA8C,cAAO;AAArD,KAAzW,EAAya;AAAC,sBAAe,SAAhB;AAA0B,cAAO,UAAjC;AAA4C,cAAO;AAAnD,KAAza,EAAue;AAAC,sBAAe,OAAhB;AAAwB,cAAO,MAA/B;AAAsC,cAAO;AAA7C,KAAve,CAAd;AAA4iB,oBAAe,oDAA3jB;AAAgnB,YAAO,KAAvnB;AAA6nB,YAAO;AAApoB,GAAD,EAA8oB;AAAC,oBAAe,OAAhB;AAAwB,YAAO,KAA/B;AAAqC,YAAO;AAA5C,GAA9oB,CAAV;AAA8sB,UAAO,qBAArtB;AAA2uB,aAAU,CAAC;AAAC,oBAAe,MAAhB;AAAuB,YAAO,SAA9B;AAAwC,YAAO;AAA/C,GAAD,EAAwD;AAAC,oBAAe,OAAhB;AAAwB,YAAO,KAA/B;AAAqC,YAAO;AAA5C,GAAxD,CAArvB;AAAm2B,qBAAkB,YAAr3B;AAAk4B,UAAO;AAAz4B,CAA3gE,EAAg6F;AAAC,YAAS,CAAC;AAAC,oBAAe,SAAhB;AAA0B,YAAO,MAAjC;AAAwC,YAAO;AAA/C,GAAD,EAA2D;AAAC,oBAAe,SAAhB;AAA0B,YAAO,SAAjC;AAA2C,YAAO;AAAlD,GAA3D,CAAV;AAAmI,UAAO,UAA1I;AAAqJ,aAAU,CAAC;AAAC,oBAAe,SAAhB;AAA0B,YAAO,EAAjC;AAAoC,YAAO;AAA3C,GAAD,CAA/J;AAAuN,qBAAkB,MAAzO;AAAgP,UAAO;AAAvP,CAAh6F,EAAmqG;AAAC,YAAS,EAAV;AAAa,UAAO,SAApB;AAA8B,aAAU,CAAC;AAAC,oBAAe,MAAhB;AAAuB,YAAO,EAA9B;AAAiC,YAAO;AAAxC,GAAD,CAAxC;AAA0F,qBAAkB,MAA5G;AAAmH,UAAO;AAA1H,CAAnqG,EAAyyG;AAAC,YAAS,EAAV;AAAa,UAAO,OAApB;AAA4B,aAAU,CAAC;AAAC,oBAAe,SAAhB;AAA0B,YAAO,EAAjC;AAAoC,YAAO;AAA3C,GAAD,CAAtC;AAA8F,qBAAkB,MAAhH;AAAuH,UAAO;AAA9H,CAAzyG,EAAm7G;AAAC,YAAS,CAAC;AAAC,oBAAe,QAAhB;AAAyB,YAAO,MAAhC;AAAuC,YAAO;AAA9C,GAAD,EAAyD;AAAC,oBAAe,QAAhB;AAAyB,YAAO,SAAhC;AAA0C,YAAO;AAAjD,GAAzD,CAAV;AAA+H,UAAO,yBAAtI;AAAgK,aAAU,EAA1K;AAA6K,qBAAkB,YAA/L;AAA4M,UAAO;AAAnN,CAAn7G,EAAkpH;AAAC,YAAS,EAAV;AAAa,UAAO,mBAApB;AAAwC,aAAU,EAAlD;AAAqD,qBAAkB,YAAvE;AAAoF,UAAO;AAA3F,CAAlpH,EAAyvH;AAAC,YAAS,CAAC;AAAC,oBAAe,SAAhB;AAA0B,YAAO,UAAjC;AAA4C,YAAO;AAAnD,GAAD,CAAV;AAA0E,UAAO,mBAAjF;AAAqG,aAAU,EAA/G;AAAkH,qBAAkB,YAApI;AAAiJ,UAAO;AAAxJ,CAAzvH,EAA65H;AAAC,YAAS,CAAC;AAAC,kBAAa,CAAC;AAAC,sBAAe,SAAhB;AAA0B,cAAO,MAAjC;AAAwC,cAAO;AAA/C,KAAD,EAA2D;AAAC,sBAAe,SAAhB;AAA0B,cAAO,IAAjC;AAAsC,cAAO;AAA7C,KAA3D,EAAmH;AAAC,sBAAe,SAAhB;AAA0B,cAAO,OAAjC;AAAyC,cAAO;AAAhD,KAAnH,EAA8K;AAAC,sBAAe,SAAhB;AAA0B,cAAO,OAAjC;AAAyC,cAAO;AAAhD,KAA9K,EAAyO;AAAC,sBAAe,SAAhB;AAA0B,cAAO,eAAjC;AAAiD,cAAO;AAAxD,KAAzO,EAA4S;AAAC,sBAAe,SAAhB;AAA0B,cAAO,SAAjC;AAA2C,cAAO;AAAlD,KAA5S,EAAyW;AAAC,sBAAe,SAAhB;AAA0B,cAAO,YAAjC;AAA8C,cAAO;AAArD,KAAzW,EAAya;AAAC,sBAAe,SAAhB;AAA0B,cAAO,UAAjC;AAA4C,cAAO;AAAnD,KAAza,EAAue;AAAC,sBAAe,OAAhB;AAAwB,cAAO,MAA/B;AAAsC,cAAO;AAA7C,KAAve,CAAd;AAA4iB,oBAAe,oDAA3jB;AAAgnB,YAAO,KAAvnB;AAA6nB,YAAO;AAApoB,GAAD,EAA8oB;AAAC,oBAAe,SAAhB;AAA0B,YAAO,iBAAjC;AAAmD,YAAO;AAA1D,GAA9oB,EAAmtB;AAAC,oBAAe,OAAhB;AAAwB,YAAO,KAA/B;AAAqC,YAAO;AAA5C,GAAntB,CAAV;AAAmxB,UAAO,cAA1xB;AAAyyB,aAAU,EAAnzB;AAAszB,qBAAkB,MAAx0B;AAA+0B,UAAO;AAAt1B,CAA75H,EAA+vJ;AAAC,YAAS,CAAC;AAAC,kBAAa,CAAC;AAAC,sBAAe,SAAhB;AAA0B,cAAO,MAAjC;AAAwC,cAAO;AAA/C,KAAD,EAA2D;AAAC,sBAAe,SAAhB;AAA0B,cAAO,IAAjC;AAAsC,cAAO;AAA7C,KAA3D,EAAmH;AAAC,sBAAe,SAAhB;AAA0B,cAAO,OAAjC;AAAyC,cAAO;AAAhD,KAAnH,EAA8K;AAAC,sBAAe,SAAhB;AAA0B,cAAO,OAAjC;AAAyC,cAAO;AAAhD,KAA9K,EAAyO;AAAC,sBAAe,SAAhB;AAA0B,cAAO,eAAjC;AAAiD,cAAO;AAAxD,KAAzO,EAA4S;AAAC,sBAAe,SAAhB;AAA0B,cAAO,SAAjC;AAA2C,cAAO;AAAlD,KAA5S,EAAyW;AAAC,sBAAe,SAAhB;AAA0B,cAAO,YAAjC;AAA8C,cAAO;AAArD,KAAzW,EAAya;AAAC,sBAAe,SAAhB;AAA0B,cAAO,UAAjC;AAA4C,cAAO;AAAnD,KAAza,EAAue;AAAC,sBAAe,OAAhB;AAAwB,cAAO,MAA/B;AAAsC,cAAO;AAA7C,KAAve,CAAd;AAA4iB,oBAAe,oDAA3jB;AAAgnB,YAAO,KAAvnB;AAA6nB,YAAO;AAApoB,GAAD,EAA8oB;AAAC,oBAAe,OAAhB;AAAwB,YAAO,KAA/B;AAAqC,YAAO;AAA5C,GAA9oB,CAAV;AAA8sB,UAAO,oBAArtB;AAA0uB,aAAU,EAApvB;AAAuvB,qBAAkB,MAAzwB;AAAgxB,UAAO;AAAvxB,CAA/vJ,CAAxC;AAEAJ,gBAAgB,CAACK,2BAAjB,GAA+C;AAC3CC,EAAAA,IAAI,EAAG,oBADoC;AAE3CC,EAAAA,OAAO,EAAG;AAFiC,CAA/C;AAKAP,gBAAgB,CAACQ,UAAjB,GAA8B,CAC1B;AAAEF,EAAAA,IAAI,EAAE,MAAR;AAAgBG,EAAAA,IAAI,EAAE;AAAtB,CAD0B,EAE1B;AAAEH,EAAAA,IAAI,EAAE,SAAR;AAAmBG,EAAAA,IAAI,EAAE;AAAzB,CAF0B,EAG1B;AAAEH,EAAAA,IAAI,EAAE,mBAAR;AAA6BG,EAAAA,IAAI,EAAE;AAAnC,CAH0B,EAI1B;AAAEH,EAAAA,IAAI,EAAE,MAAR;AAAgBG,EAAAA,IAAI,EAAE;AAAtB,CAJ0B,CAA9B;AAOAT,gBAAgB,CAACU,kBAAjB,GAAsC,CAClC;AAACJ,EAAAA,IAAI,EAAC,MAAN;AAAaG,EAAAA,IAAI,EAAC;AAAlB,CADkC,EAElC;AAACH,EAAAA,IAAI,EAAC,IAAN;AAAWG,EAAAA,IAAI,EAAC;AAAhB,CAFkC,EAGlC;AAACH,EAAAA,IAAI,EAAC,OAAN;AAAcG,EAAAA,IAAI,EAAC;AAAnB,CAHkC,EAIlC;AAACH,EAAAA,IAAI,EAAC,OAAN;AAAcG,EAAAA,IAAI,EAAC;AAAnB,CAJkC,EAKlC;AAACH,EAAAA,IAAI,EAAC,eAAN;AAAsBG,EAAAA,IAAI,EAAC;AAA3B,CALkC,EAMlC;AAACH,EAAAA,IAAI,EAAC,SAAN;AAAgBG,EAAAA,IAAI,EAAC;AAArB,CANkC,EAOlC;AAACH,EAAAA,IAAI,EAAC,YAAN;AAAmBG,EAAAA,IAAI,EAAC;AAAxB,CAPkC,EAQlC;AAACH,EAAAA,IAAI,EAAC,UAAN;AAAiBG,EAAAA,IAAI,EAAC;AAAtB,CARkC,EASlC;AAACH,EAAAA,IAAI,EAAC,MAAN;AAAaG,EAAAA,IAAI,EAAC;AAAlB,CATkC,CAAtC,C,CAYA;;AACA,MAAME,oBAAoB,GAAG,MAAOC,SAAP,IAAqB;AAC9C,MAAIC,iBAAiB,GAAG,EAAxB;AACA,QAAMC,OAAO,GAAI,GACbd,gBAAgB,CAACG,OACpB,wCAAuCS,SAAU,EAFlD;AAGA,QAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAD,CAA5B;AACA,QAAMG,UAAU,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAA/B;AACAJ,EAAAA,iBAAiB,CAACU,wBAAlB,GAA6CN,UAAU,CAACM,wBAAxD;AACA,SAAOV,iBAAP;AACD,CAVH;AAYA;AACA;AACA;AACA;AACA;;;AACA,MAAMW,0BAA0B,GAAG,MAAOZ,SAAP,IAAqB;AAChD;AACA,QAAMC,iBAAiB,GAAG,MAAMF,oBAAoB,CAACC,SAAD,CAApD;AACA,QAAMa,gBAAgB,GAAGZ,iBAAiB,CAACU,wBAA3C;AACA,SAAO;AAACxB,IAAAA,GAAG,EAAEC,gBAAgB,CAACI,oBAAvB;AAA6CsB,IAAAA,OAAO,EAAED;AAAtD,GAAP;AACP,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,qBAAqB,GAAG,cAA2E;AAAA,MAApE;AAACC,IAAAA,OAAD;AAAUC,IAAAA,EAAV;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA,OAA3B;AAAoCC,IAAAA,UAApC;AAAgDC,IAAAA,IAAhD;AAAsDC,IAAAA;AAAtD,GAAoE;AACrG,QAAMC,GAAG,GAAG;AACRC,IAAAA,IAAI,EAAER,OADE;AAERC,IAAAA,EAAE,EAAEA,EAFI;AAGRQ,IAAAA,KAAK,EAAErC,gBAAgB,CAACE,YAHhB;AAIRoC,IAAAA,KAAK,EAAER,WAJC;AAKRS,IAAAA,aAAa,EAAE,GALP;AAMRR,IAAAA,OAAO,EAAES,QAAQ,CAACT,OAAD,CANT;AAORC,IAAAA,UAAU,EAAEQ,QAAQ,CAACR,UAAD,CAPZ;AAQRE,IAAAA,QAAQ,EAAEA,QAAQ,IAAIO,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAb,GAAoB,IAA/B,CARd;AASRX,IAAAA,IAAI,EAAEA;AATE,GAAZ;AAWA,SAAOE,GAAP;AACH,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMU,sBAAsB,GAAG,OAAOC,OAAP,EAAelC,SAAf,KAA6B;AACxD,QAAMC,iBAAiB,GAAG,MAAMF,oBAAoB,CAACC,SAAD,CAApD;AACA,QAAMa,gBAAgB,GAAGZ,iBAAiB,CAACU,wBAA3C;AACA,MAAIwB,UAAU,GAAG/C,gBAAgB,CAACK,2BAAlC;AACA0C,EAAAA,UAAU,CAACC,IAAX,GAAkBpD,MAAM,CAACqD,KAAP,CAAaC,UAAb,CAAyBtD,MAAM,CAACuD,SAAP,CAAiBf,IAAjB,CAAsBxB,SAAtB,CAAD,CAAmCwC,WAAnC,EAAxB,EAA0E,EAA1E,CAAlB;AACAL,EAAAA,UAAU,CAACM,iBAAX,GAA+B5B,gBAA/B;AAEA,QAAM6B,UAAU,GAAGjC,IAAI,CAACC,SAAL,CAAe;AAC9BiC,IAAAA,KAAK,EAAE;AACHC,MAAAA,YAAY,EAAExD,gBAAgB,CAACQ,UAD5B;AAEHiD,MAAAA,mBAAmB,EAAEzD,gBAAgB,CAACU;AAFnC,KADuB;AAK9BgD,IAAAA,MAAM,EAAEX,UALsB;AAM9BY,IAAAA,WAAW,EAAE,qBANiB;AAO9BC,IAAAA,OAAO,EAAEd;AAPqB,GAAf,CAAnB;AASA,SAAOQ,UAAP;AACH,CAjBD;AAmBA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,4BAA4B,GAAIf,OAAD,IAAa;AAC9C,QAAMgB,UAAU,GAAG/D,GAAG,CAACgE,YAAJ,CAAiB,CAChC,SADgC,EAEhC,SAFgC,EAGhC,SAHgC,EAIhC,SAJgC,EAKhC,SALgC,EAMhC,SANgC,EAOhC,SAPgC,EAQhC,SARgC,EAShC,SATgC,CAAjB,EAUhB,CACCjB,OAAO,CAACV,IADT,EAECU,OAAO,CAACjB,EAFT,EAGCiB,OAAO,CAACT,KAHT,EAICS,OAAO,CAACR,KAJT,EAKCQ,OAAO,CAACP,aALT,EAMCO,OAAO,CAACf,OANT,EAOCe,OAAO,CAACd,UAPT,EAQCc,OAAO,CAACZ,QART,EASCtC,MAAM,CAACqD,KAAP,CAAae,SAAb,CAAuBlB,OAAO,CAACb,IAA/B,CATD,CAVgB,CAAnB;AAqBA,SAAO6B,UAAP;AACH,CAvBD;AAyBA;AACA;AACA;AACA;;;AACA,MAAMG,kBAAkB,GAAG,MAAOrD,SAAP,IAAqB;AAC5C,QAAMC,iBAAiB,GAAG,MAAMF,oBAAoB,CAACC,SAAD,CAApD;AACA,QAAMa,gBAAgB,GAAGZ,iBAAiB,CAACU,wBAA3C;AACA,MAAIwB,UAAU,GAAG/C,gBAAgB,CAACK,2BAAlC;AACA0C,EAAAA,UAAU,CAACC,IAAX,GAAkBpD,MAAM,CAACqD,KAAP,CAAaC,UAAb,CAAyBtD,MAAM,CAACuD,SAAP,CAAiBf,IAAjB,CAAsBxB,SAAtB,CAAD,CAAmCwC,WAAnC,EAAxB,EAA0E,EAA1E,CAAlB;AACAL,EAAAA,UAAU,CAACM,iBAAX,GAA+B5B,gBAA/B;AAEA,QAAMyC,eAAe,GAAGtE,MAAM,CAACqD,KAAP,CAAae,SAAb,CAAuBpE,MAAM,CAACqD,KAAP,CAAakB,eAAb,CAA6BC,MAA7B,CAAoC,CAC/E,SAD+E,EAE/E,SAF+E,EAG/E,SAH+E,EAI/E,SAJ+E,EAK/E,SAL+E,CAApC,EAM5C,CACCxE,MAAM,CAACqD,KAAP,CAAaoB,EAAb,CAAgB,iFAAhB,CADD,EAECzE,MAAM,CAACqD,KAAP,CAAaoB,EAAb,CAAgBtB,UAAU,CAACzC,IAA3B,CAFD,EAGCV,MAAM,CAACqD,KAAP,CAAaoB,EAAb,CAAgBtB,UAAU,CAACxC,OAA3B,CAHD,EAICwC,UAAU,CAACM,iBAJZ,EAKCN,UAAU,CAACC,IALZ,CAN4C,CAAvB,CAAxB;AAaA,SAAOkB,eAAP;AACH,CArBD;;AAuBA,SACIlE,gBADJ,EAEIiE,kBAFJ,EAGIJ,4BAHJ,EAIIhB,sBAJJ,EAKIlB,qBALJ,EAMIH,0BANJ","sourcesContent":["import {ethers} from 'ethers';\nconst { config } = require(\"../config\");\nconst abi = require(\"ethereumjs-abi\");\nlet helperAttributes = {};\nlet supportedNetworks = [42,4,5]; //add more\nhelperAttributes.ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n//todo\n//update baseURL in config for prod \nhelperAttributes.baseURL = config.baseURL;\n// any other constants needed goes in helperAttributes\n\nhelperAttributes.biconomyForwarderAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"domainValue\",\"type\":\"bytes\"}],\"name\":\"DomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"executeEIP712\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"executePersonalSign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"registerDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verifyEIP712\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structERC20ForwardRequestTypes.ERC20ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verifyPersonalSign\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}];\n\nhelperAttributes.biconomyForwarderDomainData = {\n    name : \"Biconomy Forwarder\", \n    version : \"1\",\n  };\n\nhelperAttributes.domainType = [\n    { name: \"name\", type: \"string\" },\n    { name: \"version\", type: \"string\" },\n    { name: \"verifyingContract\", type: \"address\" },\n    { name: \"salt\", type: \"bytes32\" },\n  ];\n\nhelperAttributes.forwardRequestType = [\n    {name:'from',type:'address'},\n    {name:'to',type:'address'},\n    {name:'token',type:'address'},\n    {name:'txGas',type:'uint256'},\n    {name:'tokenGasPrice',type:'uint256'},\n    {name:'batchId',type:'uint256'},\n    {name:'batchNonce',type:'uint256'},\n    {name:'deadline',type:'uint256'},\n    {name:'data',type:'bytes'}\n  ];\n\n// pass the networkId to get contract addresses\nconst getContractAddresses = async (networkId) => {\n    let contractAddresses = {};\n    const apiInfo = `${\n        helperAttributes.baseURL\n    }/api/v2/meta-tx/systemInfo?networkId=${networkId}`;\n    const response = await fetch(apiInfo);\n    const systemInfo = await response.json();\n    console.log(\"Response JSON \" + JSON.stringify(systemInfo));\n    contractAddresses.biconomyForwarderAddress = systemInfo.biconomyForwarderAddress;\n    return contractAddresses;\n  };\n\n/**\n * Returns ABI and contract address based on network Id\n * You can build biconomy forwarder contract object using above values and calculate the nonce\n * @param {*} networkId \n */\nconst getBiconomyForwarderConfig = async (networkId) => {\n        //get trusted forwarder contract address from network id\n        const contractAddresses = await getContractAddresses(networkId);\n        const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n        return {abi: helperAttributes.biconomyForwarderAbi, address: forwarderAddress};\n};\n\n/**\n * pass the below params in any order e.g. account=<account>,batchNone=<batchNone>,...\n * @param {*}  account - from (end user's) address for this transaction \n * @param {*}  to - target recipient contract address\n * @param {*}  gasLimitNum - gas estimation of your target method in numeric format\n * @param {*}  batchId - batchId \n * @param {*}  batchNonce - batchNonce which can be verified and obtained from the biconomy forwarder\n * @param {*}  data - functionSignature of target method\n * @param {*}  deadline - optional deadline for this forward request \n */\nconst buildForwardTxRequest = async ({account, to, gasLimitNum, batchId, batchNonce, data, deadline}) => {\n    const req = {\n        from: account,\n        to: to,\n        token: helperAttributes.ZERO_ADDRESS,\n        txGas: gasLimitNum,\n        tokenGasPrice: \"0\",\n        batchId: parseInt(batchId),\n        batchNonce: parseInt(batchNonce),\n        deadline: deadline || Math.floor(Date.now() / 1000 + 3600),\n        data: data\n    };\n    return req;\n};\n\n/**\n * pass your forward request and network Id \n * use this method to build message to be signed by end user in EIP712 signature format \n * @param {*} request - forward request object\n * @param {*} networkId \n */\nconst getDataToSignForEIP712 = async (request,networkId) => {\n    const contractAddresses = await getContractAddresses(networkId);\n    const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n    let domainData = helperAttributes.biconomyForwarderDomainData;\n    domainData.salt = ethers.utils.hexZeroPad((ethers.BigNumber.from(networkId)).toHexString(), 32);\n    domainData.verifyingContract = forwarderAddress;\n\n    const dataToSign = JSON.stringify({\n        types: {\n            EIP712Domain: helperAttributes.domainType,\n            ERC20ForwardRequest: helperAttributes.forwardRequestType\n        },\n        domain: domainData,\n        primaryType: \"ERC20ForwardRequest\",\n        message: request\n    });\n    return dataToSign;\n}\n\n/**\n * pass your forward request\n * use this method to build message to be signed by end user in personal signature format \n * @param {*} networkId \n */\nconst getDataToSignForPersonalSign = (request) => {\n    const hashToSign = abi.soliditySHA3([\n        \"address\",\n        \"address\",\n        \"address\",\n        \"uint256\",\n        \"uint256\",\n        \"uint256\",\n        \"uint256\",\n        \"uint256\",\n        \"bytes32\",\n    ], [\n        request.from,\n        request.to,\n        request.token,\n        request.txGas,\n        request.tokenGasPrice,\n        request.batchId,\n        request.batchNonce,\n        request.deadline,\n        ethers.utils.keccak256(request.data),\n    ]);\n    return hashToSign;\n}\n\n/**\n * get the domain seperator that needs to be passed while using EIP712 signature type\n * @param {*} networkId \n */\nconst getDomainSeperator = async (networkId) => {\n    const contractAddresses = await getContractAddresses(networkId);\n    const forwarderAddress = contractAddresses.biconomyForwarderAddress;\n    let domainData = helperAttributes.biconomyForwarderDomainData;\n    domainData.salt = ethers.utils.hexZeroPad((ethers.BigNumber.from(networkId)).toHexString(), 32);\n    domainData.verifyingContract = forwarderAddress;\n\n    const domainSeparator = ethers.utils.keccak256(ethers.utils.defaultAbiCoder.encode([\n        \"bytes32\",\n        \"bytes32\",\n        \"bytes32\",\n        \"address\",\n        \"bytes32\"\n    ], [\n        ethers.utils.id(\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"),\n        ethers.utils.id(domainData.name),\n        ethers.utils.id(domainData.version),\n        domainData.verifyingContract,\n        domainData.salt,\n    ]));\n    return domainSeparator;\n};\n\nexport {\n    helperAttributes,\n    getDomainSeperator,\n    getDataToSignForPersonalSign,\n    getDataToSignForEIP712,\n    buildForwardTxRequest,\n    getBiconomyForwarderConfig\n};"]},"metadata":{},"sourceType":"module"}