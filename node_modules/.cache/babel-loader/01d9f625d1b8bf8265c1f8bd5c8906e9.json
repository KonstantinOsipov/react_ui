{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projects/Biconomy-test/new/metatx-standard-playground/example/react-ui/src/components/Ethers_Custom_PersonalSign.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nimport { toBuffer } from \"ethereumjs-util\";\n\nlet sigUtil = require(\"eth-sig-util\");\n\nlet abi = require('ethereumjs-abi');\n\nlet config = {\n  contract: {\n    address: \"0x1E1c36546F6ddD71e8e6aEDf135B82F7EEaA08b9\",\n    abi: [{\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"userAddress\",\n        \"type\": \"address\"\n      }, {\n        \"internalType\": \"bytes\",\n        \"name\": \"functionSignature\",\n        \"type\": \"bytes\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigR\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigS\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"uint8\",\n        \"name\": \"sigV\",\n        \"type\": \"uint8\"\n      }],\n      \"name\": \"executeMetaTransaction\",\n      \"outputs\": [{\n        \"internalType\": \"bytes\",\n        \"name\": \"\",\n        \"type\": \"bytes\"\n      }],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }, {\n      \"anonymous\": false,\n      \"inputs\": [{\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"userAddress\",\n        \"type\": \"address\"\n      }, {\n        \"indexed\": false,\n        \"internalType\": \"addresspayable\",\n        \"name\": \"relayerAddress\",\n        \"type\": \"address\"\n      }, {\n        \"indexed\": false,\n        \"internalType\": \"bytes\",\n        \"name\": \"functionSignature\",\n        \"type\": \"bytes\"\n      }],\n      \"name\": \"MetaTransactionExecuted\",\n      \"type\": \"event\"\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"newQuote\",\n        \"type\": \"string\"\n      }],\n      \"name\": \"setQuote\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getChainID\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"user\",\n        \"type\": \"address\"\n      }],\n      \"name\": \"getNonce\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"nonce\",\n        \"type\": \"uint256\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getQuote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"currentQuote\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"address\",\n        \"name\": \"currentOwner\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"quote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      }, {\n        \"internalType\": \"uint256\",\n        \"name\": \"nonce\",\n        \"type\": \"uint256\"\n      }, {\n        \"internalType\": \"uint256\",\n        \"name\": \"chainID\",\n        \"type\": \"uint256\"\n      }, {\n        \"internalType\": \"bytes\",\n        \"name\": \"functionSignature\",\n        \"type\": \"bytes\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigR\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigS\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"uint8\",\n        \"name\": \"sigV\",\n        \"type\": \"uint8\"\n      }],\n      \"name\": \"verify\",\n      \"outputs\": [{\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }]\n  },\n  apiKey: {\n    test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n    prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n  }\n};\nlet salt = 42;\nlet walletProvider, walletSigner, ethersProvider;\nlet contract, contractInterface;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2)\n    }\n  },\n  link: {\n    marginLeft: \"5px\"\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    opacity: '.85!important',\n    background: '#000'\n  }\n}));\nlet biconomy;\n\nfunction App() {\n  const classes = useStyles();\n\n  const preventDefault = event => event.preventDefault();\n\n  const [backdropOpen, setBackdropOpen] = React.useState(true);\n  const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(\"\");\n  const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n\n  const handleClose = () => {\n    setBackdropOpen(false);\n  };\n\n  const handleToggle = () => {\n    setBackdropOpen(!backdropOpen);\n  };\n\n  useEffect(() => {\n    async function init() {\n      if (typeof window.ethereum !== \"undefined\" && window.ethereum.isMetaMask) {\n        // Ethereum user detected. You can now use the provider.\n        const provider = window[\"ethereum\"];\n        await provider.enable();\n        setLoadingMessage(\"Initializing Biconomy ...\"); // We're creating biconomy provider linked to your network of choice where your contract is deployed\n\n        let jsonRpcProvider = new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n        biconomy = new Biconomy(jsonRpcProvider, {\n          walletProvider: window.ethereum,\n          apiKey: config.apiKey.prod,\n          debug: true\n        });\n        /*\n          This provider is linked to your wallet.\n          If needed, substitute your wallet solution in place of window.ethereum \n        */\n\n        ethersProvider = new ethers.providers.Web3Provider(biconomy);\n        walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n        walletSigner = walletProvider.getSigner();\n        let userAddress = await walletSigner.getAddress();\n        setSelectedAddress(userAddress);\n        biconomy.onEvent(biconomy.READY, async () => {\n          // Initialize your dapp here like getting user accounts etc\n          contract = new ethers.Contract(config.contract.address, config.contract.abi, biconomy.getSignerByAddress(userAddress));\n          contractInterface = new ethers.utils.Interface(config.contract.abi);\n          getQuoteFromNetwork();\n        }).onEvent(biconomy.ERROR, (error, message) => {\n          // Handle error while initializing mexa\n          console.log(message);\n          console.log(error);\n        });\n      } else {\n        showErrorMessage(\"Metamask not installed\");\n      }\n    }\n\n    init();\n  }, []);\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  const onSubmitWithPersonalSign = async event => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        showInfoMessage(`Getting user signature`);\n        let userAddress = selectedAddress;\n        let nonce = await contract.getNonce(userAddress);\n        let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n        let messageToSign = constructMetaTransactionMessage(nonce.toNumber(), salt, functionSignature, config.contract.address);\n        const signature = await walletSigner.signMessage(messageToSign);\n        console.info(`User signature is ${signature}`);\n        let {\n          r,\n          s,\n          v\n        } = getSignatureParameters(signature);\n        sendSignedTransaction(userAddress, functionSignature, r, s, v);\n      } else {\n        console.log(\"Sending normal transaction\");\n        let tx = await contract.setQuote(newQuote);\n        console.log(\"Transaction hash : \", tx.hash);\n        showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n        let confirmation = await tx.wait();\n        console.log(confirmation);\n        setTransactionHash(tx.hash);\n        showSuccessMessage(\"Transaction confirmed on chain\");\n        getQuoteFromNetwork();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const constructMetaTransactionMessage = (nonce, salt, functionSignature, contractAddress) => {\n    return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, salt, toBuffer(functionSignature)]);\n  };\n\n  const onSubmitWithPrivateKey = async event => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      try {\n        if (metaTxEnabled) {\n          showInfoMessage(`Getting user signature`);\n          let wallet = new ethers.Wallet(\"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\");\n          let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n          let nonce = await contract.getNonce(userAddress);\n          let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n          let messageToSign = constructMetaTransactionMessage(nonce.toNumber(), salt, functionSignature, config.contract.address);\n          const signature = await wallet.signMessage(messageToSign);\n          console.info(`User signature is ${signature}`);\n          let {\n            r,\n            s,\n            v\n          } = getSignatureParameters(signature);\n          let rawTx, tx;\n          rawTx = {\n            to: config.contract.address,\n            data: contractInterface.encodeFunctionData(\"executeMetaTransaction\", [userAddress, functionSignature, r, s, v]),\n            from: userAddress\n          };\n          tx = await wallet.signTransaction(rawTx);\n          let transactionHash;\n\n          try {\n            let receipt = await ethersProvider.sendTransaction(tx);\n            console.log(receipt);\n          } catch (error) {\n            // Ethers check the hash from user's signed tx and hash returned from Biconomy\n            // Both hash are expected to be different as biconomy send the transaction from its relayers\n            if (error.returnedHash && error.expectedHash) {\n              console.log(\"Transaction hash : \", error.returnedHash);\n              transactionHash = error.returnedHash;\n            } else {\n              console.log(error);\n              showErrorMessage(\"Error while sending transaction\");\n            }\n          }\n\n          if (transactionHash) {\n            showInfoMessage(`Transaction sent by relayer with hash ${transactionHash}`);\n            let receipt = await ethersProvider.waitForTransaction(transactionHash);\n            console.log(receipt);\n            showSuccessMessage(\"Transaction confirmed on chain\");\n            getQuoteFromNetwork();\n          } else {\n            showErrorMessage(\"Could not get transaction hash\");\n          }\n        } else {\n          console.log(\"Sending normal transaction\");\n          let tx = await contract.setQuote(newQuote);\n          console.log(\"Transaction hash : \", tx.hash);\n          showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n          let confirmation = await tx.wait();\n          console.log(confirmation);\n          setTransactionHash(tx.hash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n        }\n      } catch (error) {\n        console.log(error);\n        handleClose();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const getSignatureParameters = signature => {\n    if (!ethers.utils.isHexString(signature)) {\n      throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n    }\n\n    var r = signature.slice(0, 66);\n    var s = \"0x\".concat(signature.slice(66, 130));\n    var v = \"0x\".concat(signature.slice(130, 132));\n    v = ethers.BigNumber.from(v).toNumber();\n    if (![27, 28].includes(v)) v += 27;\n    return {\n      r: r,\n      s: s,\n      v: v\n    };\n  };\n\n  const getQuoteFromNetwork = async () => {\n    setLoadingMessage(\"Getting Quote from contact ...\");\n    let result = await contract.getQuote();\n\n    if (result && result.currentQuote != undefined && result.currentOwner != undefined) {\n      if (result.currentQuote == \"\") {\n        showErrorMessage(\"No quotes set on blockchain yet\");\n      } else {\n        setQuote(result.currentQuote);\n        setOwner(result.currentOwner);\n      }\n    } else {\n      showErrorMessage(\"Not able to get quote information from Network\");\n    }\n\n    handleClose();\n  };\n\n  const showErrorMessage = message => {\n    NotificationManager.error(message, \"Error\", 5000);\n  };\n\n  const showSuccessMessage = message => {\n    NotificationManager.success(message, \"Message\", 3000);\n  };\n\n  const showInfoMessage = message => {\n    NotificationManager.info(message, \"Info\", 3000);\n  };\n\n  const sendSignedTransaction = async (userAddress, functionData, r, s, v) => {\n    try {\n      showInfoMessage(`Sending transaction via Biconomy`);\n      let tx = await contract.executeMetaTransaction(userAddress, functionData, r, s, v);\n      showInfoMessage(`Transaction sent. Waiting for confirmation ..`);\n      await tx.wait(1);\n      console.log(\"Transaction hash : \", tx.hash); //let confirmation = await tx.wait();\n\n      console.log(tx);\n      setTransactionHash(tx.hash);\n      showSuccessMessage(\"Transaction confirmed on chain\");\n      getQuoteFromNetwork();\n    } catch (error) {\n      console.log(error);\n      handleClose();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"top-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 21\n    }\n  }, \"Library \"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 21\n    }\n  }, \"ethers.js\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 21\n    }\n  }, \"Meta Transaction\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 21\n    }\n  }, \"Custom Approach\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 21\n    }\n  }, \"Signature Type\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  }, \"Personal Signature\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-wrap mb-style-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    cite: \"http://www.gutenberg.org/ebboks/11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 25\n    }\n  }, quote))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-attribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 21\n    }\n  }, owner), selectedAddress.toLowerCase() === owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    className: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 25\n    }\n  }, \"You are the owner of the quote\"), selectedAddress.toLowerCase() !== owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 25\n    }\n  }, \"You are not the owner of the quote\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 13\n    }\n  }, transactionHash !== \"\" && /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    mt: 2,\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 44\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 21\n    }\n  }, \"Check your transaction hash\", /*#__PURE__*/React.createElement(Link, {\n    href: `https://kovan.etherscan.io/tx/${transactionHash}`,\n    target: \"_blank\",\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }\n  }, \"here\")))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your quote\",\n    onChange: onQuoteChange,\n    value: newQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithPersonalSign,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 25\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onSubmitWithPrivateKey,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 25\n    }\n  }, \"Submit (Private Key)\")))), /*#__PURE__*/React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: backdropOpen,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 17\n    }\n  }, loadingMessage)), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ivan/Documents/projects/Biconomy-test/new/metatx-standard-playground/example/react-ui/src/components/Ethers_Custom_PersonalSign.js"],"names":["React","useState","useEffect","Button","NotificationContainer","NotificationManager","Backdrop","CircularProgress","ethers","Biconomy","makeStyles","Link","Typography","Box","toBuffer","sigUtil","require","abi","config","contract","address","apiKey","test","prod","salt","walletProvider","walletSigner","ethersProvider","contractInterface","useStyles","theme","root","marginLeft","spacing","link","backdrop","zIndex","drawer","color","opacity","background","biconomy","App","classes","preventDefault","event","backdropOpen","setBackdropOpen","loadingMessage","setLoadingMessage","quote","setQuote","owner","setOwner","newQuote","setNewQuote","selectedAddress","setSelectedAddress","metaTxEnabled","setMetaTxEnabled","transactionHash","setTransactionHash","handleClose","handleToggle","init","window","ethereum","isMetaMask","provider","enable","jsonRpcProvider","providers","JsonRpcProvider","debug","Web3Provider","getSigner","userAddress","getAddress","onEvent","READY","Contract","getSignerByAddress","utils","Interface","getQuoteFromNetwork","ERROR","error","message","console","log","showErrorMessage","onQuoteChange","target","value","onSubmitWithPersonalSign","showInfoMessage","nonce","getNonce","functionSignature","encodeFunctionData","messageToSign","constructMetaTransactionMessage","toNumber","signature","signMessage","info","r","s","v","getSignatureParameters","sendSignedTransaction","tx","hash","confirmation","wait","showSuccessMessage","contractAddress","soliditySHA3","onSubmitWithPrivateKey","wallet","Wallet","rawTx","to","data","from","signTransaction","receipt","sendTransaction","returnedHash","expectedHash","waitForTransaction","isHexString","Error","concat","slice","BigNumber","includes","result","getQuote","currentQuote","undefined","currentOwner","success","functionData","executeMetaTransaction","toLowerCase","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    NotificationContainer,\n    NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nimport {toBuffer} from \"ethereumjs-util\";\nlet sigUtil = require(\"eth-sig-util\");\nlet abi = require('ethereumjs-abi')\n\nlet config = {\n    contract: {\n        address: \"0x1E1c36546F6ddD71e8e6aEDf135B82F7EEaA08b9\",\n        abi: [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"addresspayable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newQuote\",\"type\":\"string\"}],\"name\":\"setQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"currentQuote\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n    },\n    apiKey: {\n        test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n        prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n    }\n}\n\nlet salt = 42;\nlet walletProvider, walletSigner, ethersProvider;\nlet contract, contractInterface;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    link: {\n        marginLeft: \"5px\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        opacity: '.85!important',\n        background: '#000'\n    },\n}));\n\nlet biconomy;\n\nfunction App() {\n    const classes = useStyles();\n    const preventDefault = (event) => event.preventDefault();\n    const [backdropOpen, setBackdropOpen] = React.useState(true);\n    const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n    const [quote, setQuote] = useState(\"This is a default quote\");\n    const [owner, setOwner] = useState(\"Default Owner Address\");\n    const [newQuote, setNewQuote] = useState(\"\");\n    const [selectedAddress, setSelectedAddress] = useState(\"\");\n    const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n    const [transactionHash, setTransactionHash] = useState(\"\");\n\n    const handleClose = () => {\n        setBackdropOpen(false);\n    };\n\n    const handleToggle = () => {\n        setBackdropOpen(!backdropOpen);\n    };\n\n\n    useEffect(() => {\n        async function init() {\n            if (\n                typeof window.ethereum !== \"undefined\" &&\n                window.ethereum.isMetaMask\n            ) {\n                // Ethereum user detected. You can now use the provider.\n                const provider = window[\"ethereum\"];\n                await provider.enable();\n                setLoadingMessage(\"Initializing Biconomy ...\");\n                // We're creating biconomy provider linked to your network of choice where your contract is deployed\n                let jsonRpcProvider = new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n                biconomy = new Biconomy(jsonRpcProvider, {\n                    walletProvider: window.ethereum,\n                    apiKey: config.apiKey.prod,\n                    debug: true \n                });\n\n                /*\n                  This provider is linked to your wallet.\n                  If needed, substitute your wallet solution in place of window.ethereum \n                */\n                ethersProvider = new ethers.providers.Web3Provider(biconomy);\n                walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n                walletSigner = walletProvider.getSigner();\n\n                let userAddress = await walletSigner.getAddress()\n                setSelectedAddress(userAddress);\n\n                biconomy.onEvent(biconomy.READY, async () => {\n\n                    // Initialize your dapp here like getting user accounts etc\n                    contract = new ethers.Contract(\n                        config.contract.address,\n                        config.contract.abi,\n                        biconomy.getSignerByAddress(userAddress)\n                    );\n\n                    contractInterface = new ethers.utils.Interface(config.contract.abi);\n                    getQuoteFromNetwork();\n                }).onEvent(biconomy.ERROR, (error, message) => {\n                    // Handle error while initializing mexa\n                    console.log(message);\n                    console.log(error);\n                });\n            } else {\n                showErrorMessage(\"Metamask not installed\");\n            }\n        }\n        init();\n    }, []);\n\n    const onQuoteChange = event => {\n        setNewQuote(event.target.value);\n    };\n\n    const onSubmitWithPersonalSign = async event => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n                showInfoMessage(`Getting user signature`);\n                let userAddress = selectedAddress;\n                let nonce = await contract.getNonce(userAddress);\n                let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n                let messageToSign = constructMetaTransactionMessage(nonce.toNumber(), salt, functionSignature, config.contract.address);\n                const signature = await walletSigner.signMessage(messageToSign);\n                \n                console.info(`User signature is ${signature}`);\n                let { r, s, v } = getSignatureParameters(signature);\n                sendSignedTransaction(userAddress, functionSignature, r, s, v);\n            } else {\n                console.log(\"Sending normal transaction\");\n                let tx = await contract.setQuote(newQuote);\n                console.log(\"Transaction hash : \", tx.hash);\n                showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n                let confirmation = await tx.wait();\n                console.log(confirmation);\n                setTransactionHash(tx.hash);\n\n                showSuccessMessage(\"Transaction confirmed on chain\");\n                getQuoteFromNetwork();\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    };\n\n    const constructMetaTransactionMessage = (nonce, salt, functionSignature, contractAddress) => {\n        return abi.soliditySHA3(\n            [\"uint256\",\"address\",\"uint256\",\"bytes\"],\n            [nonce, contractAddress, salt, toBuffer(functionSignature)]\n        );\n      }\n\n    const onSubmitWithPrivateKey = async (event) => {\n      if (newQuote != \"\" && contract) {\n        setTransactionHash(\"\");\n\n        try {\n          if (metaTxEnabled) {\n            showInfoMessage(`Getting user signature`);\n            let wallet = new ethers.Wallet(\n              \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\"\n            );\n            let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n            let nonce = await contract.getNonce(userAddress);\n            let functionSignature = contractInterface.encodeFunctionData(\n              \"setQuote\",\n              [newQuote]\n            );\n            let messageToSign = constructMetaTransactionMessage(\n              nonce.toNumber(),\n              salt,\n              functionSignature,\n              config.contract.address\n            );\n            const signature = await wallet.signMessage(messageToSign);\n\n            console.info(`User signature is ${signature}`);\n            let { r, s, v } = getSignatureParameters(signature);\n            let rawTx, tx;\n            rawTx = {\n              to: config.contract.address,\n              data: contractInterface.encodeFunctionData(\n                \"executeMetaTransaction\",\n                [userAddress, functionSignature, r, s, v]\n              ),\n              from: userAddress,\n            };\n            tx = await wallet.signTransaction(rawTx);\n            let transactionHash;\n            try {\n              let receipt = await ethersProvider.sendTransaction(tx);\n              console.log(receipt);\n            } catch (error) {\n              // Ethers check the hash from user's signed tx and hash returned from Biconomy\n              // Both hash are expected to be different as biconomy send the transaction from its relayers\n              if (error.returnedHash && error.expectedHash) {\n                console.log(\"Transaction hash : \", error.returnedHash);\n                transactionHash = error.returnedHash;\n              } else {\n                console.log(error);\n                showErrorMessage(\"Error while sending transaction\");\n              }\n            }\n\n            if (transactionHash) {\n              showInfoMessage(\n                `Transaction sent by relayer with hash ${transactionHash}`\n              );\n              let receipt = await ethersProvider.waitForTransaction(\n                transactionHash\n              );\n              console.log(receipt);\n              showSuccessMessage(\"Transaction confirmed on chain\");\n              getQuoteFromNetwork();\n            } else {\n              showErrorMessage(\"Could not get transaction hash\");\n            }\n          } else {\n            console.log(\"Sending normal transaction\");\n            let tx = await contract.setQuote(newQuote);\n            console.log(\"Transaction hash : \", tx.hash);\n            showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n            let confirmation = await tx.wait();\n            console.log(confirmation);\n            setTransactionHash(tx.hash);\n\n            showSuccessMessage(\"Transaction confirmed on chain\");\n            getQuoteFromNetwork();\n          }\n        } catch (error) {\n          console.log(error);\n          handleClose();\n        }\n      } else {\n        showErrorMessage(\"Please enter the quote\");\n      }\n    };\n\n    const getSignatureParameters = signature => {\n        if (!ethers.utils.isHexString(signature)) {\n            throw new Error(\n                'Given value \"'.concat(signature, '\" is not a valid hex string.')\n            );\n        }\n        var r = signature.slice(0, 66);\n        var s = \"0x\".concat(signature.slice(66, 130));\n        var v = \"0x\".concat(signature.slice(130, 132));\n        v = ethers.BigNumber.from(v).toNumber();\n        if (![27, 28].includes(v)) v += 27;\n        return {\n            r: r,\n            s: s,\n            v: v\n        };\n    };\n\n    const getQuoteFromNetwork = async () => {\n        setLoadingMessage(\"Getting Quote from contact ...\");\n        let result = await contract.getQuote();\n        if (\n            result &&\n            result.currentQuote != undefined &&\n            result.currentOwner != undefined\n        ) {\n            if (result.currentQuote == \"\") {\n                showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n                setQuote(result.currentQuote);\n                setOwner(result.currentOwner);\n            }\n        } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n        }\n        handleClose();\n    };\n\n    const showErrorMessage = message => {\n        NotificationManager.error(message, \"Error\", 5000);\n    };\n\n    const showSuccessMessage = message => {\n        NotificationManager.success(message, \"Message\", 3000);\n    };\n\n    const showInfoMessage = message => {\n        NotificationManager.info(message, \"Info\", 3000);\n    };\n\n    const sendSignedTransaction = async (userAddress, functionData, r, s, v) => {\n        try {\n            showInfoMessage(`Sending transaction via Biconomy`);\n            let tx = await contract.executeMetaTransaction(userAddress, functionData, r, s, v);\n            showInfoMessage(`Transaction sent. Waiting for confirmation ..`)\n            await tx.wait(1);\n            console.log(\"Transaction hash : \", tx.hash);\n            //let confirmation = await tx.wait();\n            console.log(tx);\n            setTransactionHash(tx.hash);\n\n            showSuccessMessage(\"Transaction confirmed on chain\");\n            getQuoteFromNetwork();\n\n        } catch (error) {\n            console.log(error);\n            handleClose();\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <section className=\"top-row\">\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Library </span>\n                    <span className=\"label-value\">ethers.js</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Meta Transaction</span>\n                    <span className=\"label-value\">Custom Approach</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Signature Type</span>\n                    <span className=\"label-value\">Personal Signature</span>\n                </div>\n            </section>\n            <section className=\"main\">\n                <div className=\"mb-wrap mb-style-2\">\n                    <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n                        <p>{quote}</p>\n                    </blockquote>\n                </div>\n\n                <div className=\"mb-attribution\">\n                    <p className=\"mb-author\">{owner}</p>\n                    {selectedAddress.toLowerCase() === owner.toLowerCase() && (\n                        <cite className=\"owner\">You are the owner of the quote</cite>\n                    )}\n                    {selectedAddress.toLowerCase() !== owner.toLowerCase() && (\n                        <cite>You are not the owner of the quote</cite>\n                    )}\n                </div>\n            </section>\n            <section>\n                {transactionHash !== \"\" && <Box className={classes.root} mt={2} p={2}>\n                    <Typography>\n                        Check your transaction hash\n            <Link href={`https://kovan.etherscan.io/tx/${transactionHash}`} target=\"_blank\"\n                            className={classes.link}>\n                            here\n            </Link>\n                    </Typography>\n                </Box>}\n            </section>\n            <section>\n                <div className=\"submit-container\">\n                    <div className=\"submit-row\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter your quote\"\n                            onChange={onQuoteChange}\n                            value={newQuote}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmitWithPersonalSign} style={{ marginLeft: \"10px\" }}>\n                            Submit\n            </Button>\n\n                        <Button variant=\"contained\" color=\"secondary\" onClick={onSubmitWithPrivateKey} style={{ marginLeft: \"10px\" }}>\n                            Submit (Private Key)\n            </Button>\n                    </div>\n                </div>\n            </section>\n            <Backdrop className={classes.backdrop} open={backdropOpen} onClick={handleClose}>\n                <CircularProgress color=\"inherit\" />\n                <div style={{ paddingLeft: \"10px\" }}>{loadingMessage}</div>\n            </Backdrop>\n            <NotificationContainer />\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}