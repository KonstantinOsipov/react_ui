{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projects/metatx-standard-playground/example/react-ui/src/components/Web3_EIP2771_PersonalSign.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Web3 from \"web3\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\n\nlet sigUtil = require(\"eth-sig-util\");\n\nlet config = {\n  contract: {\n    address: \"0x880176EDA9f1608A2Bf182385379bDcC1a65Dfcf\",\n    abi: [{\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"forwarder\",\n        \"type\": \"address\"\n      }],\n      \"name\": \"isTrustedForwarder\",\n      \"outputs\": [{\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"quote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"trustedForwarder\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"newQuote\",\n        \"type\": \"string\"\n      }],\n      \"name\": \"setQuote\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getQuote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"currentQuote\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"address\",\n        \"name\": \"currentOwner\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"versionRecipient\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }]\n  },\n  apiKey: {\n    test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n    prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n  }\n};\nlet web3, biconomy;\nlet contract;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2)\n    }\n  },\n  link: {\n    marginLeft: \"5px\"\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    opacity: '.85!important',\n    background: '#000'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [backdropOpen, setBackdropOpen] = React.useState(true);\n  const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(\"\");\n  const [metaTxEnabled] = useState(true);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n  useEffect(() => {\n    async function init() {\n      if (typeof window.ethereum !== \"undefined\" && window.ethereum.isMetaMask) {\n        // Ethereum user detected. You can now use the provider.\n        const provider = window[\"ethereum\"];\n        await provider.enable();\n        let kovanProvider = new Web3.providers.HttpProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n        setLoadingMessage(\"Initializing Biconomy ...\");\n        biconomy = new Biconomy(kovanProvider, {\n          walletProvider: window.ethereum,\n          apiKey: config.apiKey.prod,\n          debug: true\n        }); // This web3 instance is used to read normally and write to contract via meta transactions.\n\n        web3 = new Web3(biconomy);\n        biconomy.onEvent(biconomy.READY, () => {\n          // Initialize your dapp here like getting user accounts etc\n          contract = new web3.eth.Contract(config.contract.abi, config.contract.address);\n          setSelectedAddress(provider.selectedAddress);\n          getQuoteFromNetwork();\n          provider.on(\"accountsChanged\", function (accounts) {\n            setSelectedAddress(accounts[0]);\n          });\n        }).onEvent(biconomy.ERROR, () => {// Handle error while initializing mexa\n        });\n      } else {\n        showErrorMessage(\"Metamask not installed\");\n      }\n    }\n\n    init();\n  }, []);\n\n  const handleClose = () => {\n    setBackdropOpen(false);\n  };\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  const onSubmitWithPrivateKey = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n      console.log(\"Sending meta transaction\");\n      let privateKey = \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n      let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n      let txParams = {\n        \"from\": userAddress,\n        \"to\": config.contract.address,\n        \"data\": contract.methods.setQuote(newQuote).encodeABI(),\n        \"gasLimit\": web3.utils.toHex(300000)\n      };\n      const signedTx = await web3.eth.accounts.signTransaction(txParams, `0x${privateKey}`);\n      const forwardData = await biconomy.getForwardRequestAndMessageToSign(signedTx.rawTransaction);\n      console.log(forwardData);\n      console.log(privateKey); // const signature = sigUtil.personalSign(new Buffer.from(privateKey, 'hex'), { data: forwardData.personalSignatureFormat });\n\n      let {\n        signature\n      } = web3.eth.accounts.sign(\"0x\" + forwardData.personalSignatureFormat.toString(\"hex\"), privateKey);\n      let rawTransaction = signedTx.rawTransaction;\n      let data = {\n        signature: signature,\n        forwardRequest: forwardData.request,\n        rawTransaction: rawTransaction,\n        signatureType: biconomy.PERSONAL_SIGN\n      };\n      web3.eth.sendSignedTransaction(data).on('transactionHash', hash => {\n        console.log(`Transaction hash is ${hash}`);\n        showInfoMessage(`Transaction sent via Biconomy. Waiting for confirmation.`);\n      }).once('confirmation', (confirmation, receipt) => {\n        console.log(`Transaction Confirmed.`);\n        console.log(receipt);\n        setTransactionHash(receipt.transactionHash);\n        showSuccessMessage(\"Transaction confirmed\");\n        getQuoteFromNetwork();\n      });\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const onSubmit = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        try {\n          let tx = contract.methods.setQuote(newQuote).send({\n            from: selectedAddress,\n            signatureType: biconomy.PERSONAL_SIGN\n          });\n          tx.on(\"transactionHash\", function (hash) {\n            console.log(`Transaction hash is ${hash}`);\n            showInfoMessage(`Transaction sent. Waiting for confirmation ..`);\n          }).once(\"confirmation\", function (confirmationNumber, receipt) {\n            console.log(receipt);\n            setTransactionHash(receipt.transactionHash);\n            showSuccessMessage(\"Transaction confirmed on chain\");\n            getQuoteFromNetwork();\n          }).on('error', function (error, receipt) {\n            console.log(error);\n          });\n        } catch (err) {\n          console.log(\"handle errors like signature denied here\");\n          console.log(err);\n        }\n      } else {\n        console.log(\"Sending normal transaction\");\n        contract.methods.setQuote(newQuote).send({\n          from: selectedAddress\n        }).on(\"transactionHash\", function (hash) {\n          showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n        }).once(\"confirmation\", function (confirmationNumber, receipt) {\n          setTransactionHash(receipt.transactionHash);\n          showSuccessMessage(\"Transaction confirmed\");\n          getQuoteFromNetwork();\n        });\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const getQuoteFromNetwork = () => {\n    setLoadingMessage(\"Getting Quote from contact ...\");\n\n    try {\n      if (web3 && contract) {\n        contract.methods.getQuote().call().then(function (result) {\n          handleClose();\n          console.log(result);\n\n          if (result && result.currentQuote != undefined && result.currentOwner != undefined) {\n            if (result.currentQuote == \"\") {\n              showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n              setQuote(result.currentQuote);\n              setOwner(result.currentOwner);\n            }\n          } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n          }\n        });\n      } else {\n        handleClose();\n      }\n    } catch (error) {\n      handleClose();\n      console.log(error);\n    }\n  };\n\n  const showErrorMessage = message => {\n    NotificationManager.error(message, \"Error\", 5000);\n  };\n\n  const showSuccessMessage = message => {\n    NotificationManager.success(message, \"Message\", 3000);\n  };\n\n  const showInfoMessage = message => {\n    NotificationManager.info(message, \"Info\", 3000);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"top-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 21\n    }\n  }, \"Library \"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 21\n    }\n  }, \"web3.js\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 21\n    }\n  }, \"Meta Transaction\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 21\n    }\n  }, \"EIP-2771\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }\n  }, \"Signature Type\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 21\n    }\n  }, \"Personal Signature\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-wrap mb-style-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    cite: \"http://www.gutenberg.org/ebboks/11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 25\n    }\n  }, quote))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-attribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 21\n    }\n  }, owner), selectedAddress.toLowerCase() === owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    className: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 25\n    }\n  }, \"You are the owner of the quote\"), selectedAddress.toLowerCase() !== owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 25\n    }\n  }, \"You are not the owner of the quote\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, transactionHash !== \"\" && /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    mt: 2,\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 44\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 21\n    }\n  }, \"Check your transaction hash\", /*#__PURE__*/React.createElement(Link, {\n    href: `https://kovan.etherscan.io/tx/${transactionHash}`,\n    target: \"_blank\",\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, \"here\")))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your quote\",\n    onChange: onQuoteChange,\n    value: newQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 25\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithPrivateKey,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 25\n    }\n  }, \"Submit (using private key)\")))), /*#__PURE__*/React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: backdropOpen,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }, loadingMessage)), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ivan/Documents/projects/metatx-standard-playground/example/react-ui/src/components/Web3_EIP2771_PersonalSign.js"],"names":["React","useState","useEffect","Button","NotificationContainer","NotificationManager","Backdrop","CircularProgress","Web3","Biconomy","makeStyles","Link","Typography","Box","sigUtil","require","config","contract","address","abi","apiKey","test","prod","web3","biconomy","useStyles","theme","root","marginLeft","spacing","link","backdrop","zIndex","drawer","color","opacity","background","App","classes","backdropOpen","setBackdropOpen","loadingMessage","setLoadingMessage","quote","setQuote","owner","setOwner","newQuote","setNewQuote","selectedAddress","setSelectedAddress","metaTxEnabled","transactionHash","setTransactionHash","init","window","ethereum","isMetaMask","provider","enable","kovanProvider","providers","HttpProvider","walletProvider","debug","onEvent","READY","eth","Contract","getQuoteFromNetwork","on","accounts","ERROR","showErrorMessage","handleClose","onQuoteChange","event","target","value","onSubmitWithPrivateKey","console","log","privateKey","userAddress","txParams","methods","encodeABI","utils","toHex","signedTx","signTransaction","forwardData","getForwardRequestAndMessageToSign","rawTransaction","signature","sign","personalSignatureFormat","toString","data","forwardRequest","request","signatureType","PERSONAL_SIGN","sendSignedTransaction","hash","showInfoMessage","once","confirmation","receipt","showSuccessMessage","onSubmit","tx","send","from","confirmationNumber","error","err","getQuote","call","then","result","currentQuote","undefined","currentOwner","message","success","info","toLowerCase","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    NotificationContainer,\n    NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Web3 from \"web3\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nlet sigUtil = require(\"eth-sig-util\");\nlet config = {\n    contract: {\n        address: \"0x880176EDA9f1608A2Bf182385379bDcC1a65Dfcf\",\n        abi: [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"forwarder\", \"type\": \"address\" }], \"name\": \"isTrustedForwarder\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"quote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"trustedForwarder\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [{ \"internalType\": \"string\", \"name\": \"newQuote\", \"type\": \"string\" }], \"name\": \"setQuote\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getQuote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"currentQuote\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"currentOwner\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"versionRecipient\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }]\n    },\n    apiKey: {\n        test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n        prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n    }\n}\n\n\n\n\nlet web3, biconomy;\nlet contract;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    link: {\n        marginLeft: \"5px\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        opacity: '.85!important',\n        background: '#000'\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const [backdropOpen, setBackdropOpen] = React.useState(true);\n    const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n    const [quote, setQuote] = useState(\"This is a default quote\");\n    const [owner, setOwner] = useState(\"Default Owner Address\");\n    const [newQuote, setNewQuote] = useState(\"\");\n    const [selectedAddress, setSelectedAddress] = useState(\"\");\n    const [metaTxEnabled] = useState(true);\n    const [transactionHash, setTransactionHash] = useState(\"\");\n\n    useEffect(() => {\n        async function init() {\n            if (\n                typeof window.ethereum !== \"undefined\" &&\n                window.ethereum.isMetaMask\n            ) {\n                // Ethereum user detected. You can now use the provider.\n                const provider = window[\"ethereum\"];\n                await provider.enable();\n                let kovanProvider = new Web3.providers.HttpProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n                setLoadingMessage(\"Initializing Biconomy ...\");\n                biconomy = new Biconomy(kovanProvider, {\n                    walletProvider: window.ethereum,\n                    apiKey: config.apiKey.prod,\n                    debug: true\n                });\n\n                // This web3 instance is used to read normally and write to contract via meta transactions.\n                web3 = new Web3(biconomy);\n\n\n                biconomy.onEvent(biconomy.READY, () => {\n                    // Initialize your dapp here like getting user accounts etc\n                    contract = new web3.eth.Contract(\n                        config.contract.abi,\n                        config.contract.address\n                    );\n                    setSelectedAddress(provider.selectedAddress);\n                    getQuoteFromNetwork();\n                    provider.on(\"accountsChanged\", function (accounts) {\n                        setSelectedAddress(accounts[0]);\n                    });\n                }).onEvent(biconomy.ERROR, () => {\n                    // Handle error while initializing mexa\n                });\n            } else {\n                showErrorMessage(\"Metamask not installed\");\n            }\n        }\n        init();\n    }, []);\n\n    const handleClose = () => {\n        setBackdropOpen(false);\n    };\n\n\n    const onQuoteChange = event => {\n        setNewQuote(event.target.value);\n    };\n\n    const onSubmitWithPrivateKey = async () => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            console.log(\"Sending meta transaction\");\n            let privateKey = \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n            let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n            let txParams = {\n                \"from\": userAddress,\n                \"to\": config.contract.address,\n                \"data\": contract.methods.setQuote(newQuote).encodeABI(),\n                \"gasLimit\": web3.utils.toHex(300000),\n            };\n            const signedTx = await web3.eth.accounts.signTransaction(txParams, `0x${privateKey}`);\n            const forwardData = await biconomy.getForwardRequestAndMessageToSign(signedTx.rawTransaction);\n\n            console.log(forwardData);\n            console.log(privateKey);\n            // const signature = sigUtil.personalSign(new Buffer.from(privateKey, 'hex'), { data: forwardData.personalSignatureFormat });\n            let {signature} = web3.eth.accounts.sign(\"0x\" + forwardData.personalSignatureFormat.toString(\"hex\"), privateKey);\n            \n            let rawTransaction = signedTx.rawTransaction;\n            let data = {\n                signature: signature,\n                forwardRequest: forwardData.request,\n                rawTransaction: rawTransaction,\n                signatureType: biconomy.PERSONAL_SIGN\n            };\n\n            web3.eth.sendSignedTransaction(data)\n                .on('transactionHash', (hash) => {\n                    console.log(`Transaction hash is ${hash}`)\n                    showInfoMessage(`Transaction sent via Biconomy. Waiting for confirmation.`);\n                })\n                .once('confirmation', (confirmation, receipt) => {\n                    console.log(`Transaction Confirmed.`);\n                    console.log(receipt);\n                    setTransactionHash(receipt.transactionHash);\n                    showSuccessMessage(\"Transaction confirmed\");\n                    getQuoteFromNetwork();\n                });\n\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    }\n\n    const onSubmit = async () => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n             try{\n                let tx = contract.methods.setQuote(newQuote).send({\n                    from: selectedAddress,\n                    signatureType: biconomy.PERSONAL_SIGN\n                });\n\n                tx.on(\"transactionHash\", function (hash) {\n                    console.log(`Transaction hash is ${hash}`);\n                    showInfoMessage(`Transaction sent. Waiting for confirmation ..`);\n                }).once(\"confirmation\", function (confirmationNumber, receipt) {\n                    console.log(receipt);\n                    setTransactionHash(receipt.transactionHash);\n                    showSuccessMessage(\"Transaction confirmed on chain\");\n                    getQuoteFromNetwork();\n                }).on('error', function(error,receipt) {\n                    console.log(error);\n                });\n            } catch (err) {\n                console.log(\"handle errors like signature denied here\");\n                console.log(err);\n            }\n            } else {\n                console.log(\"Sending normal transaction\");\n                contract.methods\n                    .setQuote(newQuote)\n                    .send({ from: selectedAddress })\n                    .on(\"transactionHash\", function (hash) {\n                        showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n                    })\n                    .once(\"confirmation\", function (confirmationNumber, receipt) {\n                        setTransactionHash(receipt.transactionHash);\n                        showSuccessMessage(\"Transaction confirmed\");\n                        getQuoteFromNetwork();\n                    });\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    };\n\n\n    const getQuoteFromNetwork = () => {\n        setLoadingMessage(\"Getting Quote from contact ...\");\n        try {\n            if (web3 && contract) {\n                contract.methods\n                    .getQuote()\n                    .call()\n                    .then(function (result) {\n                        handleClose();\n                        console.log(result);\n                        if (\n                            result &&\n                            result.currentQuote != undefined &&\n                            result.currentOwner != undefined\n                        ) {\n                            if (result.currentQuote == \"\") {\n                                showErrorMessage(\"No quotes set on blockchain yet\");\n                            } else {\n                                setQuote(result.currentQuote);\n                                setOwner(result.currentOwner);\n                            }\n                        } else {\n                            showErrorMessage(\"Not able to get quote information from Network\");\n                        }\n                    });\n            } else {\n                handleClose();\n            }\n        } catch (error) {\n            handleClose();\n            console.log(error);\n        }\n    };\n\n    const showErrorMessage = message => {\n        NotificationManager.error(message, \"Error\", 5000);\n    };\n\n    const showSuccessMessage = message => {\n        NotificationManager.success(message, \"Message\", 3000);\n    };\n\n    const showInfoMessage = message => {\n        NotificationManager.info(message, \"Info\", 3000);\n    };\n\n\n    return (\n        <div className=\"App\">\n            <section className=\"top-row\">\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Library </span>\n                    <span className=\"label-value\">web3.js</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Meta Transaction</span>\n                    <span className=\"label-value\">EIP-2771</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Signature Type</span>\n                    <span className=\"label-value\">Personal Signature</span>\n                </div>\n            </section>\n            <section className=\"main\">\n                <div className=\"mb-wrap mb-style-2\">\n                    <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n                        <p>{quote}</p>\n                    </blockquote>\n                </div>\n\n                <div className=\"mb-attribution\">\n                    <p className=\"mb-author\">{owner}</p>\n                    {selectedAddress.toLowerCase() === owner.toLowerCase() && (\n                        <cite className=\"owner\">You are the owner of the quote</cite>\n                    )}\n                    {selectedAddress.toLowerCase() !== owner.toLowerCase() && (\n                        <cite>You are not the owner of the quote</cite>\n                    )}\n                </div>\n            </section>\n            <section>\n                {transactionHash !== \"\" && <Box className={classes.root} mt={2} p={2}>\n                    <Typography>\n                        Check your transaction hash\n            <Link href={`https://kovan.etherscan.io/tx/${transactionHash}`} target=\"_blank\"\n                            className={classes.link}>\n                            here\n            </Link>\n                    </Typography>\n                </Box>}\n            </section>\n            <section>\n                <div className=\"submit-container\">\n                    <div className=\"submit-row\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter your quote\"\n                            onChange={onQuoteChange}\n                            value={newQuote}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n                            Submit\n            </Button>\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmitWithPrivateKey} style={{ marginLeft: \"10px\" }}>\n                            Submit (using private key)\n            </Button>\n                    </div>\n                </div>\n            </section>\n            <Backdrop className={classes.backdrop} open={backdropOpen} onClick={handleClose}>\n                <CircularProgress color=\"inherit\" />\n                <div style={{ paddingLeft: \"10px\" }}>{loadingMessage}</div>\n            </Backdrop>\n            <NotificationContainer />\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}