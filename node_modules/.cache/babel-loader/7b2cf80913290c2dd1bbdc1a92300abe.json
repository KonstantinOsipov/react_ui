{"ast":null,"code":"var _jsxFileName = \"/home/konstantin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/react-ui-biconomy/react-ui/src/components/Ethers_Custom_PersonalSign_API.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nimport { toBuffer } from \"ethereumjs-util\";\n\nlet sigUtil = require(\"eth-sig-util\");\n\nlet abi = require('ethereumjs-abi');\n\nlet config = {\n  contract: {\n    address: \"0x1E1c36546F6ddD71e8e6aEDf135B82F7EEaA08b9\",\n    abi: [{\n      \"anonymous\": false,\n      \"inputs\": [{\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"userAddress\",\n        \"type\": \"address\"\n      }, {\n        \"indexed\": false,\n        \"internalType\": \"addresspayable\",\n        \"name\": \"relayerAddress\",\n        \"type\": \"address\"\n      }, {\n        \"indexed\": false,\n        \"internalType\": \"bytes\",\n        \"name\": \"functionSignature\",\n        \"type\": \"bytes\"\n      }],\n      \"name\": \"MetaTransactionExecuted\",\n      \"type\": \"event\"\n    }, {\n      \"constant\": false,\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"userAddress\",\n        \"type\": \"address\"\n      }, {\n        \"internalType\": \"bytes\",\n        \"name\": \"functionSignature\",\n        \"type\": \"bytes\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigR\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"bytes32\",\n        \"name\": \"sigS\",\n        \"type\": \"bytes32\"\n      }, {\n        \"internalType\": \"uint8\",\n        \"name\": \"sigV\",\n        \"type\": \"uint8\"\n      }],\n      \"name\": \"executeMetaTransaction\",\n      \"outputs\": [{\n        \"internalType\": \"bytes\",\n        \"name\": \"\",\n        \"type\": \"bytes\"\n      }],\n      \"payable\": true,\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }, {\n      \"constant\": true,\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"user\",\n        \"type\": \"address\"\n      }],\n      \"name\": \"getNonce\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"nonce\",\n        \"type\": \"uint256\"\n      }],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"quote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"constant\": false,\n      \"inputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"newQuote\",\n        \"type\": \"string\"\n      }],\n      \"name\": \"setQuote\",\n      \"outputs\": [],\n      \"payable\": false,\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }, {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"getQuote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"currentQuote\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"address\",\n        \"name\": \"currentOwner\",\n        \"type\": \"address\"\n      }],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }]\n  },\n  apiKey: {\n    test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n    prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n  },\n  api: {\n    test: \"https://test-api.biconomy.io\",\n    prod: \"https://api.biconomy.io\"\n  }\n};\nconst domainType = [{\n  name: \"name\",\n  type: \"string\"\n}, {\n  name: \"version\",\n  type: \"string\"\n}, {\n  name: \"salt\",\n  type: \"uint256\"\n}, {\n  name: \"verifyingContract\",\n  type: \"address\"\n}];\nconst metaTransactionType = [{\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"from\",\n  type: \"address\"\n}, {\n  name: \"functionSignature\",\n  type: \"bytes\"\n}];\nlet domainData = {\n  name: \"TestContract\",\n  version: \"1\",\n  verifyingContract: config.contract.address,\n  salt: \"42\"\n};\nlet ethersProvider, walletProvider, walletSigner;\nlet contract, contractInterface;\nlet salt = 42;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2)\n    }\n  },\n  link: {\n    marginLeft: \"5px\"\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    opacity: '.85!important',\n    background: '#000'\n  }\n}));\nlet biconomy;\n\nfunction App() {\n  const classes = useStyles();\n\n  const preventDefault = event => event.preventDefault();\n\n  const [backdropOpen, setBackdropOpen] = React.useState(true);\n  const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(\"\");\n  const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n\n  const handleClose = () => {\n    setBackdropOpen(false);\n  };\n\n  const handleToggle = () => {\n    setBackdropOpen(!backdropOpen);\n  };\n\n  useEffect(() => {\n    async function init() {\n      if (typeof window.ethereum !== \"undefined\" && window.ethereum.isMetaMask) {\n        // Ethereum user detected. You can now use the provider.\n        const provider = window[\"ethereum\"];\n        await provider.enable();\n        setLoadingMessage(\"Initializing Biconomy ...\"); // We're creating biconomy provider linked to your network of choice where your contract is deployed\n\n        biconomy = new Biconomy(new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\"), {\n          apiKey: config.apiKey.prod,\n          debug: true\n        });\n        /*\n          This provider is linked to your wallet.\n          If needed, substitute your wallet solution in place of window.ethereum \n        */\n\n        ethersProvider = new ethers.providers.Web3Provider(biconomy);\n        walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n        walletSigner = walletProvider.getSigner();\n        let userAddress = await walletSigner.getAddress();\n        setSelectedAddress(userAddress);\n        biconomy.onEvent(biconomy.READY, async () => {\n          // Initialize your dapp here like getting user accounts etc\n          contract = new ethers.Contract(config.contract.address, config.contract.abi, biconomy.getSignerByAddress(userAddress));\n          contractInterface = new ethers.utils.Interface(config.contract.abi);\n          getQuoteFromNetwork();\n        }).onEvent(biconomy.ERROR, (error, message) => {\n          // Handle error while initializing mexa\n          console.log(message);\n          console.log(error);\n        });\n      } else {\n        showErrorMessage(\"Metamask not installed\");\n      }\n    }\n\n    init();\n  }, []);\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  const onSubmitWithPersonalSign = async event => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        showInfoMessage(`Getting user signature`);\n        let userAddress = selectedAddress;\n        let nonce = await contract.getNonce(userAddress);\n        let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n        let message = {};\n        message.nonce = parseInt(nonce);\n        message.from = userAddress;\n        message.functionSignature = functionSignature;\n        let messageToSign = constructMetaTransactionMessage(nonce.toNumber(), salt, functionSignature, config.contract.address);\n        const signature = await walletSigner.signMessage(messageToSign);\n        console.info(`User signature is ${signature}`);\n        let {\n          r,\n          s,\n          v\n        } = getSignatureParameters(signature);\n        sendTransaction(userAddress, functionSignature, r, s, v);\n      } else {\n        console.log(\"Sending normal transaction\");\n        let tx = await contract.setQuote(newQuote);\n        console.log(\"Transaction hash : \", tx.hash);\n        showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n        let confirmation = await tx.wait();\n        console.log(confirmation);\n        setTransactionHash(tx.hash);\n        showSuccessMessage(\"Transaction confirmed on chain\");\n        getQuoteFromNetwork();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const onSubmitWithPrivateKey = async event => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      try {\n        if (metaTxEnabled) {\n          showInfoMessage(`Getting user signature`);\n          let privateKey = \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n          let wallet = new ethers.Wallet(privateKey);\n          let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n          let nonce = await contract.getNonce(userAddress);\n          let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n          let messageToSign = constructMetaTransactionMessage(nonce.toNumber(), salt, functionSignature, config.contract.address);\n          const signature = await wallet.signMessage(messageToSign);\n          console.info(`User signature is ${signature}`);\n          let {\n            r,\n            s,\n            v\n          } = getSignatureParameters(signature);\n          sendTransaction(userAddress, functionSignature, r, s, v);\n        } else {\n          console.log(\"Sending normal transaction\");\n          let tx = await contract.setQuote(newQuote);\n          console.log(\"Transaction hash : \", tx.hash);\n          showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n          let confirmation = await tx.wait();\n          console.log(confirmation);\n          setTransactionHash(tx.hash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n        }\n      } catch (error) {\n        console.log(error);\n        handleClose();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const getSignatureParameters = signature => {\n    if (!ethers.utils.isHexString(signature)) {\n      throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n    }\n\n    var r = signature.slice(0, 66);\n    var s = \"0x\".concat(signature.slice(66, 130));\n    var v = \"0x\".concat(signature.slice(130, 132));\n    v = ethers.BigNumber.from(v).toNumber();\n    if (![27, 28].includes(v)) v += 27;\n    return {\n      r: r,\n      s: s,\n      v: v\n    };\n  };\n\n  const constructMetaTransactionMessage = (nonce, salt, functionSignature, contractAddress) => {\n    return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, salt, toBuffer(functionSignature)]);\n  };\n\n  const getQuoteFromNetwork = async () => {\n    setLoadingMessage(\"Getting Quote from contact ...\");\n    let result = await contract.getQuote();\n\n    if (result && result.currentQuote != undefined && result.currentOwner != undefined) {\n      if (result.currentQuote == \"\") {\n        showErrorMessage(\"No quotes set on blockchain yet\");\n      } else {\n        setQuote(result.currentQuote);\n        setOwner(result.currentOwner);\n      }\n    } else {\n      showErrorMessage(\"Not able to get quote information from Network\");\n    }\n\n    handleClose();\n  };\n\n  const showErrorMessage = message => {\n    NotificationManager.error(message, \"Error\", 5000);\n  };\n\n  const showSuccessMessage = message => {\n    NotificationManager.success(message, \"Message\", 3000);\n  };\n\n  const showInfoMessage = message => {\n    NotificationManager.info(message, \"Info\", 3000);\n  };\n\n  const sendTransaction = async (userAddress, functionData, r, s, v) => {\n    if (ethersProvider && contract) {\n      try {\n        fetch(`${config.api.prod}/api/v2/meta-tx/native`, {\n          method: \"POST\",\n          headers: {\n            \"x-api-key\": config.apiKey.prod,\n            'Content-Type': 'application/json;charset=utf-8'\n          },\n          body: JSON.stringify({\n            \"to\": config.contract.address,\n            \"apiId\": \"2ad00362-b370-4a65-9b70-59c5197bf961\",\n            //\"apiId\": \"9bde7ec7-ef8f-485a-b655-ec88476fb548\",\n            \"params\": [userAddress, functionData, r, s, v],\n            \"from\": userAddress\n          })\n        }).then(response => response.json()).then(async function (result) {\n          console.log(result);\n          showInfoMessage(`Transaction sent by relayer with hash ${result.txHash}`);\n          let receipt = await ethersProvider.waitForTransaction(result.txHash);\n          console.log(receipt);\n          setTransactionHash(receipt.transactionHash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"top-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 21\n    }\n  }, \"Library \"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 21\n    }\n  }, \"ethers.js\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 21\n    }\n  }, \"Meta Transaction\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 21\n    }\n  }, \"Custom Approach\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 21\n    }\n  }, \"Signature Type\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 21\n    }\n  }, \"EIP712 Signature\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-wrap mb-style-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    cite: \"http://www.gutenberg.org/ebboks/11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 25\n    }\n  }, quote))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-attribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 21\n    }\n  }, owner), selectedAddress.toLowerCase() === owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    className: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 25\n    }\n  }, \"You are the owner of the quote\"), selectedAddress.toLowerCase() !== owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 25\n    }\n  }, \"You are not the owner of the quote\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }\n  }, transactionHash !== \"\" && /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    mt: 2,\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 44\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 21\n    }\n  }, \"Check your transaction hash\", /*#__PURE__*/React.createElement(Link, {\n    href: `https://kovan.etherscan.io/tx/${transactionHash}`,\n    target: \"_blank\",\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }, \"here\")))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your quote\",\n    onChange: onQuoteChange,\n    value: newQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithPersonalSign,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 25\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onSubmitWithPrivateKey,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 25\n    }\n  }, \"Submit (Private Key)\")))), /*#__PURE__*/React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: backdropOpen,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 17\n    }\n  }, loadingMessage)), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/konstantin/Документы/react-ui-biconomy/react-ui/src/components/Ethers_Custom_PersonalSign_API.js"],"names":["React","useState","useEffect","Button","NotificationContainer","NotificationManager","Backdrop","CircularProgress","ethers","Biconomy","makeStyles","Link","Typography","Box","toBuffer","sigUtil","require","abi","config","contract","address","apiKey","test","prod","api","domainType","name","type","metaTransactionType","domainData","version","verifyingContract","salt","ethersProvider","walletProvider","walletSigner","contractInterface","useStyles","theme","root","marginLeft","spacing","link","backdrop","zIndex","drawer","color","opacity","background","biconomy","App","classes","preventDefault","event","backdropOpen","setBackdropOpen","loadingMessage","setLoadingMessage","quote","setQuote","owner","setOwner","newQuote","setNewQuote","selectedAddress","setSelectedAddress","metaTxEnabled","setMetaTxEnabled","transactionHash","setTransactionHash","handleClose","handleToggle","init","window","ethereum","isMetaMask","provider","enable","providers","JsonRpcProvider","debug","Web3Provider","getSigner","userAddress","getAddress","onEvent","READY","Contract","getSignerByAddress","utils","Interface","getQuoteFromNetwork","ERROR","error","message","console","log","showErrorMessage","onQuoteChange","target","value","onSubmitWithPersonalSign","showInfoMessage","nonce","getNonce","functionSignature","encodeFunctionData","parseInt","from","messageToSign","constructMetaTransactionMessage","toNumber","signature","signMessage","info","r","s","v","getSignatureParameters","sendTransaction","tx","hash","confirmation","wait","showSuccessMessage","onSubmitWithPrivateKey","privateKey","wallet","Wallet","isHexString","Error","concat","slice","BigNumber","includes","contractAddress","soliditySHA3","result","getQuote","currentQuote","undefined","currentOwner","success","functionData","fetch","method","headers","body","JSON","stringify","then","response","json","txHash","receipt","waitForTransaction","catch","toLowerCase","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    NotificationContainer,\n    NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nimport {toBuffer} from \"ethereumjs-util\";\nlet sigUtil = require(\"eth-sig-util\");\nlet abi = require('ethereumjs-abi')\n\nlet config = {\n    contract: {\n        address: \"0x1E1c36546F6ddD71e8e6aEDf135B82F7EEaA08b9\",\n        abi: [{ \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"internalType\": \"address\", \"name\": \"userAddress\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"addresspayable\", \"name\": \"relayerAddress\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bytes\", \"name\": \"functionSignature\", \"type\": \"bytes\" }], \"name\": \"MetaTransactionExecuted\", \"type\": \"event\" }, { \"constant\": false, \"inputs\": [{ \"internalType\": \"address\", \"name\": \"userAddress\", \"type\": \"address\" }, { \"internalType\": \"bytes\", \"name\": \"functionSignature\", \"type\": \"bytes\" }, { \"internalType\": \"bytes32\", \"name\": \"sigR\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"sigS\", \"type\": \"bytes32\" }, { \"internalType\": \"uint8\", \"name\": \"sigV\", \"type\": \"uint8\" }], \"name\": \"executeMetaTransaction\", \"outputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }], \"name\": \"getNonce\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"nonce\", \"type\": \"uint256\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"quote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"internalType\": \"string\", \"name\": \"newQuote\", \"type\": \"string\" }], \"name\": \"setQuote\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"getQuote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"currentQuote\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"currentOwner\", \"type\": \"address\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }]\n    },\n    apiKey: {\n        test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n        prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n    },\n    api: {\n        test: \"https://test-api.biconomy.io\",\n        prod: \"https://api.biconomy.io\"\n    }\n}\n\nconst domainType = [\n    { name: \"name\", type: \"string\" },\n    { name: \"version\", type: \"string\" },\n    { name: \"salt\", type: \"uint256\" },\n    { name: \"verifyingContract\", type: \"address\" }\n];\n\nconst metaTransactionType = [\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"from\", type: \"address\" },\n    { name: \"functionSignature\", type: \"bytes\" }\n];\n\nlet domainData = {\n    name: \"TestContract\",\n    version: \"1\",\n    verifyingContract: config.contract.address,\n    salt: \"42\"\n};\n\nlet ethersProvider,walletProvider, walletSigner;\nlet contract, contractInterface;\nlet salt = 42;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    link: {\n        marginLeft: \"5px\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        opacity: '.85!important',\n        background: '#000'\n    },\n}));\n\nlet biconomy;\n\nfunction App() {\n    const classes = useStyles();\n    const preventDefault = (event) => event.preventDefault();\n    const [backdropOpen, setBackdropOpen] = React.useState(true);\n    const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n    const [quote, setQuote] = useState(\"This is a default quote\");\n    const [owner, setOwner] = useState(\"Default Owner Address\");\n    const [newQuote, setNewQuote] = useState(\"\");\n    const [selectedAddress, setSelectedAddress] = useState(\"\");\n    const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n    const [transactionHash, setTransactionHash] = useState(\"\");\n\n    const handleClose = () => {\n        setBackdropOpen(false);\n    };\n\n    const handleToggle = () => {\n        setBackdropOpen(!backdropOpen);\n    };\n\n\n    useEffect(() => {\n        async function init() {\n            if (\n                typeof window.ethereum !== \"undefined\" &&\n                window.ethereum.isMetaMask\n            ) {\n                // Ethereum user detected. You can now use the provider.\n                const provider = window[\"ethereum\"];\n                await provider.enable();\n                setLoadingMessage(\"Initializing Biconomy ...\");\n                // We're creating biconomy provider linked to your network of choice where your contract is deployed\n                biconomy = new Biconomy(new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\"),\n                    { apiKey: config.apiKey.prod, debug: true });\n\n                /*\n                  This provider is linked to your wallet.\n                  If needed, substitute your wallet solution in place of window.ethereum \n                */\n                ethersProvider = new ethers.providers.Web3Provider(biconomy);\n                walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n                walletSigner = walletProvider.getSigner();\n\n                let userAddress = await walletSigner.getAddress()\n                setSelectedAddress(userAddress);\n\n                biconomy.onEvent(biconomy.READY, async () => {\n\n                    // Initialize your dapp here like getting user accounts etc\n                    contract = new ethers.Contract(\n                        config.contract.address,\n                        config.contract.abi,\n                        biconomy.getSignerByAddress(userAddress)\n                    );\n\n                    contractInterface = new ethers.utils.Interface(config.contract.abi);\n                    getQuoteFromNetwork();\n                }).onEvent(biconomy.ERROR, (error, message) => {\n                    // Handle error while initializing mexa\n                    console.log(message);\n                    console.log(error);\n                });\n            } else {\n                showErrorMessage(\"Metamask not installed\");\n            }\n        }\n        init();\n    }, []);\n\n    const onQuoteChange = event => {\n        setNewQuote(event.target.value);\n    };\n\n    const onSubmitWithPersonalSign = async event => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            if (metaTxEnabled) {\n                showInfoMessage(`Getting user signature`);\n                let userAddress = selectedAddress;\n                let nonce = await contract.getNonce(userAddress);\n                let functionSignature = contractInterface.encodeFunctionData(\"setQuote\", [newQuote]);\n                let message = {};\n                message.nonce = parseInt(nonce);\n                message.from = userAddress;\n                message.functionSignature = functionSignature;\n\n                let messageToSign = constructMetaTransactionMessage(\n                    nonce.toNumber(),\n                    salt,\n                    functionSignature,\n                    config.contract.address\n                  );\n                const signature = await walletSigner.signMessage(messageToSign);\n      \n                console.info(`User signature is ${signature}`);\n                let { r, s, v } = getSignatureParameters(signature);\n                sendTransaction(userAddress, functionSignature, r, s, v);\n            } else {\n                console.log(\"Sending normal transaction\");\n                let tx = await contract.setQuote(newQuote);\n                console.log(\"Transaction hash : \", tx.hash);\n                showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n                let confirmation = await tx.wait();\n                console.log(confirmation);\n                setTransactionHash(tx.hash);\n                showSuccessMessage(\"Transaction confirmed on chain\");\n                getQuoteFromNetwork();\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    };\n\n    const onSubmitWithPrivateKey = async (event) => {\n      if (newQuote != \"\" && contract) {\n        setTransactionHash(\"\");\n\n        try {\n          if (metaTxEnabled) {\n            showInfoMessage(`Getting user signature`);\n            let privateKey = \n              \"2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910\";\n            let wallet = new ethers.Wallet(privateKey);\n            let userAddress = \"0xE1E763551A85F04B4687f0035885E7F710A46aA6\";\n            let nonce = await contract.getNonce(userAddress);\n            let functionSignature = contractInterface.encodeFunctionData(\n              \"setQuote\",\n              [newQuote]\n            );\n            let messageToSign = constructMetaTransactionMessage(\n                nonce.toNumber(),\n                salt,\n                functionSignature,\n                config.contract.address\n              );\n              const signature = await wallet.signMessage(messageToSign);\n  \n              console.info(`User signature is ${signature}`);\n            let { r, s, v } = getSignatureParameters(signature);\n            sendTransaction(userAddress, functionSignature, r, s, v);\n          } else {\n            console.log(\"Sending normal transaction\");\n            let tx = await contract.setQuote(newQuote);\n            console.log(\"Transaction hash : \", tx.hash);\n            showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n            let confirmation = await tx.wait();\n            console.log(confirmation);\n            setTransactionHash(tx.hash);\n            showSuccessMessage(\"Transaction confirmed on chain\");\n            getQuoteFromNetwork();\n          }\n        } catch (error) {\n          console.log(error);\n          handleClose();\n        }\n      } else {\n        showErrorMessage(\"Please enter the quote\");\n      }\n    };\n\n    const getSignatureParameters = signature => {\n        if (!ethers.utils.isHexString(signature)) {\n            throw new Error(\n                'Given value \"'.concat(signature, '\" is not a valid hex string.')\n            );\n        }\n        var r = signature.slice(0, 66);\n        var s = \"0x\".concat(signature.slice(66, 130));\n        var v = \"0x\".concat(signature.slice(130, 132));\n        v = ethers.BigNumber.from(v).toNumber();\n        if (![27, 28].includes(v)) v += 27;\n        return {\n            r: r,\n            s: s,\n            v: v\n        };\n    };\n\n    const constructMetaTransactionMessage = (nonce, salt, functionSignature, contractAddress) => {\n        return abi.soliditySHA3(\n            [\"uint256\",\"address\",\"uint256\",\"bytes\"],\n            [nonce, contractAddress, salt, toBuffer(functionSignature)]\n        );\n      }\n\n    const getQuoteFromNetwork = async () => {\n        setLoadingMessage(\"Getting Quote from contact ...\");\n        let result = await contract.getQuote();\n        if (\n            result &&\n            result.currentQuote != undefined &&\n            result.currentOwner != undefined\n        ) {\n            if (result.currentQuote == \"\") {\n                showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n                setQuote(result.currentQuote);\n                setOwner(result.currentOwner);\n            }\n        } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n        }\n        handleClose();\n    };\n\n    const showErrorMessage = message => {\n        NotificationManager.error(message, \"Error\", 5000);\n    };\n\n    const showSuccessMessage = message => {\n        NotificationManager.success(message, \"Message\", 3000);\n    };\n\n    const showInfoMessage = message => {\n        NotificationManager.info(message, \"Info\", 3000);\n    };\n\n    const sendTransaction = async (userAddress, functionData, r, s, v) => {\n        if (ethersProvider && contract) {\n            try {\n                fetch(`${config.api.prod}/api/v2/meta-tx/native`, {\n                    method: \"POST\",\n                    headers: {\n                      \"x-api-key\" : config.apiKey.prod,\n                      'Content-Type': 'application/json;charset=utf-8'\n                    },\n                    body: JSON.stringify({\n                      \"to\": config.contract.address,\n                      \"apiId\": \"2ad00362-b370-4a65-9b70-59c5197bf961\",\n                    //\"apiId\": \"9bde7ec7-ef8f-485a-b655-ec88476fb548\",\n                      \"params\": [userAddress, functionData, r, s, v],\n                      \"from\": userAddress\n                    })\n                  })\n                  .then(response=>response.json())\n                  .then(async function(result) {\n                    console.log(result);\n                    showInfoMessage(`Transaction sent by relayer with hash ${result.txHash}`);\n                    let receipt = await ethersProvider.waitForTransaction(\n                        result.txHash\n                      );\n                      console.log(receipt);\n                    setTransactionHash(receipt.transactionHash);\n                    showSuccessMessage(\"Transaction confirmed on chain\");\n                    getQuoteFromNetwork();\n                  }).catch(function(error) {\n                      console.log(error)\n                    });\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <section className=\"top-row\">\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Library </span>\n                    <span className=\"label-value\">ethers.js</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Meta Transaction</span>\n                    <span className=\"label-value\">Custom Approach</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Signature Type</span>\n                    <span className=\"label-value\">EIP712 Signature</span>\n                </div>\n            </section>\n            <section className=\"main\">\n                <div className=\"mb-wrap mb-style-2\">\n                    <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n                        <p>{quote}</p>\n                    </blockquote>\n                </div>\n\n                <div className=\"mb-attribution\">\n                    <p className=\"mb-author\">{owner}</p>\n                    {selectedAddress.toLowerCase() === owner.toLowerCase() && (\n                        <cite className=\"owner\">You are the owner of the quote</cite>\n                    )}\n                    {selectedAddress.toLowerCase() !== owner.toLowerCase() && (\n                        <cite>You are not the owner of the quote</cite>\n                    )}\n                </div>\n            </section>\n            <section>\n                {transactionHash !== \"\" && <Box className={classes.root} mt={2} p={2}>\n                    <Typography>\n                        Check your transaction hash\n            <Link href={`https://kovan.etherscan.io/tx/${transactionHash}`} target=\"_blank\"\n                            className={classes.link}>\n                            here\n            </Link>\n                    </Typography>\n                </Box>}\n            </section>\n            <section>\n                <div className=\"submit-container\">\n                    <div className=\"submit-row\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter your quote\"\n                            onChange={onQuoteChange}\n                            value={newQuote}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmitWithPersonalSign} style={{ marginLeft: \"10px\" }}>\n                            Submit\n            </Button>\n\n                        <Button variant=\"contained\" color=\"secondary\" onClick={onSubmitWithPrivateKey} style={{ marginLeft: \"10px\" }}>\n                            Submit (Private Key)\n            </Button>\n                    </div>\n                </div>\n            </section>\n            <Backdrop className={classes.backdrop} open={backdropOpen} onClick={handleClose}>\n                <CircularProgress color=\"inherit\" />\n                <div style={{ paddingLeft: \"10px\" }}>{loadingMessage}</div>\n            </Backdrop>\n            <NotificationContainer />\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}