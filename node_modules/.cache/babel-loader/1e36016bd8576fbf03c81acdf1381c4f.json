{"ast":null,"code":"var _jsxFileName = \"/home/ivan/MEGAsync/metatx-standard-playground/example/react-ui/src/components/Ethers_EIP2771_API.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { helperAttributes, getDomainSeperator, getDataToSignForPersonalSign, getDataToSignForEIP712, buildForwardTxRequest, getBiconomyForwarderConfig } from '../api-helpers/biconomyForwarderHelpers';\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\n\nlet sigUtil = require(\"eth-sig-util\");\n\nlet config = {\n  contract: {\n    address: \"0x880176EDA9f1608A2Bf182385379bDcC1a65Dfcf\",\n    abi: [{\n      \"inputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"forwarder\",\n        \"type\": \"address\"\n      }],\n      \"name\": \"isTrustedForwarder\",\n      \"outputs\": [{\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"quote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"trustedForwarder\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"newQuote\",\n        \"type\": \"string\"\n      }],\n      \"name\": \"setQuote\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getQuote\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"currentQuote\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"address\",\n        \"name\": \"currentOwner\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }, {\n      \"inputs\": [],\n      \"name\": \"versionRecipient\",\n      \"outputs\": [{\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\",\n      \"constant\": true\n    }]\n  },\n  apiKey: {\n    test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n    prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n  },\n  api: {\n    test: \"https://test-api.biconomy.io\",\n    prod: \"https://api.biconomy.io\"\n  }\n};\nlet ethersProvider, walletProvider, walletSigner;\nlet contract, contractInterface;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2)\n    }\n  },\n  link: {\n    marginLeft: \"5px\"\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    opacity: '.85!important',\n    background: '#000'\n  }\n}));\nlet biconomy, userAddress;\n\nfunction App() {\n  const classes = useStyles();\n  const [backdropOpen, setBackdropOpen] = React.useState(true);\n  const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(\"\");\n  const [metaTxEnabled] = useState(true);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n\n  const handleClose = () => {\n    setBackdropOpen(false);\n  };\n\n  useEffect(() => {\n    async function init() {\n      if (typeof window.ethereum !== \"undefined\" && window.ethereum.isMetaMask) {\n        // Ethereum user detected. You can now use the provider.\n        const provider = window[\"ethereum\"];\n        await provider.enable();\n        setLoadingMessage(\"Initializing Biconomy ...\"); // We're creating biconomy provider linked to your network of choice where your contract is deployed\n\n        let jsonRpcProvider = new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n        biconomy = new Biconomy(jsonRpcProvider, {\n          walletProvider: window.ethereum,\n          apiKey: config.apiKey.prod,\n          debug: true\n        });\n        /*\n          This provider is linked to your wallet.\n          If needed, substitute your wallet solution in place of window.ethereum \n        */\n\n        ethersProvider = new ethers.providers.Web3Provider(biconomy);\n        walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n        walletSigner = walletProvider.getSigner();\n        userAddress = await walletSigner.getAddress();\n        setSelectedAddress(userAddress);\n        biconomy.onEvent(biconomy.READY, async () => {\n          // Initialize your dapp here like getting user accounts etc\n          contract = new ethers.Contract(config.contract.address, config.contract.abi, biconomy.getSignerByAddress(userAddress));\n          contractInterface = new ethers.utils.Interface(config.contract.abi);\n          getQuoteFromNetwork();\n        }).onEvent(biconomy.ERROR, (error, message) => {\n          // Handle error while initializing mexa\n          console.log(message);\n          console.log(error);\n        });\n      } else {\n        showErrorMessage(\"Metamask not installed\");\n      }\n    }\n\n    init();\n  }, []);\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  const onSubmitWithEIP712Sign = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        console.log(\"Sending meta transaction\");\n        let userAddress = selectedAddress;\n        let {\n          data\n        } = await contract.populateTransaction.setQuote(newQuote);\n        let gasPrice = await ethersProvider.getGasPrice();\n        let gasLimit = await ethersProvider.estimateGas({\n          to: config.contract.address,\n          from: userAddress,\n          data: data\n        });\n        console.log(gasLimit.toString());\n        console.log(gasPrice.toString());\n        let forwarder = await getBiconomyForwarderConfig(42);\n        let forwarderContract = new ethers.Contract(forwarder.address, forwarder.abi, biconomy.getSignerByAddress(userAddress));\n        const batchNonce = await forwarderContract.getNonce(userAddress, 0); //const batchId = await forwarderContract.getBatch(userAddress);\n\n        console.log(batchNonce);\n        const to = config.contract.address;\n        const gasLimitNum = Number(gasLimit.toNumber().toString());\n        console.log(gasLimitNum);\n        const batchId = 0;\n        const req = await buildForwardTxRequest({\n          account: userAddress,\n          to,\n          gasLimitNum,\n          batchId,\n          batchNonce,\n          data\n        });\n        console.log(req);\n        const domainSeparator = await getDomainSeperator(42);\n        console.log(domainSeparator);\n        const dataToSign = await getDataToSignForEIP712(req, 42);\n        walletProvider.send(\"eth_signTypedData_v3\", [userAddress, dataToSign]).then(function (sig) {\n          sendTransaction({\n            userAddress,\n            request: req,\n            domainSeparator,\n            sig,\n            signatureType: \"EIP712_SIGN\"\n          });\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else {\n        console.log(\"Sending normal transaction\");\n        let tx = await contract.setQuote(newQuote);\n        console.log(\"Transaction hash : \", tx.hash);\n        showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n        let confirmation = await tx.wait();\n        console.log(confirmation);\n        setTransactionHash(tx.hash);\n        showSuccessMessage(\"Transaction confirmed on chain\");\n        getQuoteFromNetwork();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const onSubmitWithPersonalSign = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      if (metaTxEnabled) {\n        console.log(\"Sending meta transaction\");\n        let userAddress = selectedAddress;\n        let {\n          data\n        } = await contract.populateTransaction.setQuote(newQuote);\n        let gasPrice = await ethersProvider.getGasPrice();\n        let gasLimit = await ethersProvider.estimateGas({\n          to: config.contract.address,\n          from: userAddress,\n          data: data\n        });\n        console.log(gasLimit.toString());\n        console.log(gasPrice.toString());\n        let forwarder = await getBiconomyForwarderConfig(42);\n        let forwarderContract = new ethers.Contract(forwarder.address, forwarder.abi, biconomy.getSignerByAddress(userAddress));\n        const batchNonce = await forwarderContract.getNonce(userAddress, 0); //const batchId = await forwarderContract.getBatch(userAddress);\n\n        console.log(batchNonce);\n        const to = config.contract.address;\n        const gasLimitNum = Number(gasLimit.toNumber().toString());\n        console.log(gasLimitNum);\n        const batchId = 0;\n        const req = await buildForwardTxRequest({\n          account: userAddress,\n          to,\n          gasLimitNum,\n          batchId,\n          batchNonce,\n          data\n        });\n        console.log(req);\n        const hashToSign = getDataToSignForPersonalSign(req);\n        walletSigner.signMessage(hashToSign).then(function (sig) {\n          console.log('signature ' + sig);\n          sendTransaction({\n            userAddress,\n            request: req,\n            sig,\n            signatureType: \"PERSONAL_SIGN\"\n          });\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else {\n        console.log(\"Sending normal transaction\");\n        let tx = await contract.setQuote(newQuote);\n        console.log(\"Transaction hash : \", tx.hash);\n        showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n        let confirmation = await tx.wait();\n        console.log(confirmation);\n        setTransactionHash(tx.hash);\n        showSuccessMessage(\"Transaction confirmed on chain\");\n        getQuoteFromNetwork();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const onSubmitWithPrivateKey = async () => {\n    if (newQuote != \"\" && contract) {\n      setTransactionHash(\"\");\n\n      try {\n        if (metaTxEnabled) {\n          let privateKey = \"bf096e6fb9754860c4c99eb336c0579db994a3ef7fb3f7db869ad2f1972fc755\";\n          let userAddress = \"0xf7AB2d00f379167c339691c23B23111eB598B3fb\";\n          let userSigner = new ethers.Wallet(privateKey);\n          let {\n            data\n          } = await contract.populateTransaction.setQuote(newQuote);\n          let gasPrice = await ethersProvider.getGasPrice();\n          let gasLimit = await ethersProvider.estimateGas({\n            to: config.contract.address,\n            from: userAddress,\n            data: data\n          });\n          console.log(gasLimit.toString());\n          console.log(gasPrice.toString());\n          let forwarder = await getBiconomyForwarderConfig(42);\n          let forwarderContract = new ethers.Contract(forwarder.address, forwarder.abi, biconomy.getSignerByAddress(userAddress));\n          const batchNonce = await forwarderContract.getNonce(userAddress, 0); //const batchId = await forwarderContract.getBatch(userAddress);\n\n          console.log(batchNonce);\n          const to = config.contract.address;\n          const gasLimitNum = Number(gasLimit.toNumber().toString());\n          console.log(gasLimitNum);\n          const batchId = 0;\n          const req = await buildForwardTxRequest({\n            account: userAddress,\n            to,\n            gasLimitNum,\n            batchId,\n            batchNonce,\n            data\n          });\n          console.log(req);\n          const hashToSign = getDataToSignForPersonalSign(req);\n          const signature = await userSigner.signMessage(hashToSign);\n          sendTransaction({\n            userAddress,\n            request: req,\n            sig: signature,\n            signatureType: \"PERSONAL_SIGN\"\n          });\n        } else {\n          console.log(\"Sending normal transaction\");\n          let tx = await contract.setQuote(newQuote);\n          console.log(\"Transaction hash : \", tx.hash);\n          showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n          let confirmation = await tx.wait();\n          console.log(confirmation);\n          setTransactionHash(tx.hash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n        }\n      } catch (error) {\n        console.log(error);\n        handleClose();\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const getQuoteFromNetwork = async () => {\n    setLoadingMessage(\"Getting Quote from contact ...\");\n    let result = await contract.getQuote();\n\n    if (result && result.currentQuote != undefined && result.currentOwner != undefined) {\n      if (result.currentQuote == \"\") {\n        showErrorMessage(\"No quotes set on blockchain yet\");\n      } else {\n        setQuote(result.currentQuote);\n        setOwner(result.currentOwner);\n      }\n    } else {\n      showErrorMessage(\"Not able to get quote information from Network\");\n    }\n\n    handleClose();\n  };\n\n  const showErrorMessage = message => {\n    NotificationManager.error(message, \"Error\", 5000);\n  };\n\n  const showSuccessMessage = message => {\n    NotificationManager.success(message, \"Message\", 3000);\n  };\n\n  const showInfoMessage = message => {\n    NotificationManager.info(message, \"Info\", 3000);\n  };\n\n  const sendTransaction = async _ref => {\n    let {\n      userAddress,\n      request,\n      sig,\n      domainSeparator,\n      signatureType\n    } = _ref;\n\n    if (ethersProvider && contract) {\n      let params;\n\n      if (domainSeparator) {\n        params = [request, domainSeparator, sig];\n      } else {\n        params = [request, sig];\n      }\n\n      try {\n        fetch(`${config.api.prod}/api/v2/meta-tx/native`, {\n          method: \"POST\",\n          headers: {\n            \"x-api-key\": config.apiKey.prod,\n            \"Content-Type\": \"application/json;charset=utf-8\"\n          },\n          body: JSON.stringify({\n            to: config.contract.address,\n            apiId: \"34bfa8b9-57e7-4d32-b983-63c3f698cddd\",\n            //apiId: \"ca45b2dc-0279-4952-87cd-bbc584427538\",\n            params: params,\n            from: userAddress,\n            signatureType: signatureType\n          })\n        }).then(response => response.json()).then(function (result) {\n          console.log(result);\n          showInfoMessage(`Transaction sent by relayer with hash ${result.txHash}`);\n          return result.txHash; // todo - fetch mined transaction receipt, show tx confirmed and update quotes\n        }).then(function (hash) {\n          //event emitter methods\n          ethersProvider.once(hash, transaction => {\n            // Emitted when the transaction has been mined\n            console.log(transaction);\n            setTransactionHash(hash);\n            getQuoteFromNetwork();\n          });\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"top-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 21\n    }\n  }, \"Library \"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 21\n    }\n  }, \"ethers.js\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 21\n    }\n  }, \"Meta Transaction\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 21\n    }\n  }, \"EIP-2771\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-row-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 21\n    }\n  }, \"Signature Type\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 21\n    }\n  }, \"EIP-712 Signature\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-wrap mb-style-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    cite: \"http://www.gutenberg.org/ebboks/11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 25\n    }\n  }, quote))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-attribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 21\n    }\n  }, owner), selectedAddress.toLowerCase() === owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    className: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 25\n    }\n  }, \"You are the owner of the quote\"), selectedAddress.toLowerCase() !== owner.toLowerCase() && /*#__PURE__*/React.createElement(\"cite\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 25\n    }\n  }, \"You are not the owner of the quote\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }\n  }, transactionHash !== \"\" && /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    mt: 2,\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 44\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 21\n    }\n  }, \"Check your transaction hash\", /*#__PURE__*/React.createElement(Link, {\n    href: `https://kovan.etherscan.io/tx/${transactionHash}`,\n    target: \"_blank\",\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 13\n    }\n  }, \"here\")))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your quote\",\n    onChange: onQuoteChange,\n    value: newQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithEIP712Sign,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 25\n    }\n  }, \"Submit With EIP712 Sign\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onSubmitWithPersonalSign,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 13\n    }\n  }, \"Submit With Personal Sign\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onSubmitWithPrivateKey,\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 25\n    }\n  }, \"Submit (Private Key)\")))), /*#__PURE__*/React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: backdropOpen,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 17\n    }\n  }, loadingMessage)), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ivan/MEGAsync/metatx-standard-playground/example/react-ui/src/components/Ethers_EIP2771_API.js"],"names":["React","useState","useEffect","Button","helperAttributes","getDomainSeperator","getDataToSignForPersonalSign","getDataToSignForEIP712","buildForwardTxRequest","getBiconomyForwarderConfig","NotificationContainer","NotificationManager","Backdrop","CircularProgress","ethers","Biconomy","makeStyles","Link","Typography","Box","sigUtil","require","config","contract","address","abi","apiKey","test","prod","api","ethersProvider","walletProvider","walletSigner","contractInterface","useStyles","theme","root","marginLeft","spacing","link","backdrop","zIndex","drawer","color","opacity","background","biconomy","userAddress","App","classes","backdropOpen","setBackdropOpen","loadingMessage","setLoadingMessage","quote","setQuote","owner","setOwner","newQuote","setNewQuote","selectedAddress","setSelectedAddress","metaTxEnabled","transactionHash","setTransactionHash","handleClose","init","window","ethereum","isMetaMask","provider","enable","jsonRpcProvider","providers","JsonRpcProvider","debug","Web3Provider","getSigner","getAddress","onEvent","READY","Contract","getSignerByAddress","utils","Interface","getQuoteFromNetwork","ERROR","error","message","console","log","showErrorMessage","onQuoteChange","event","target","value","onSubmitWithEIP712Sign","data","populateTransaction","gasPrice","getGasPrice","gasLimit","estimateGas","to","from","toString","forwarder","forwarderContract","batchNonce","getNonce","gasLimitNum","Number","toNumber","batchId","req","account","domainSeparator","dataToSign","send","then","sig","sendTransaction","request","signatureType","catch","tx","hash","showInfoMessage","confirmation","wait","showSuccessMessage","onSubmitWithPersonalSign","hashToSign","signMessage","onSubmitWithPrivateKey","privateKey","userSigner","Wallet","signature","result","getQuote","currentQuote","undefined","currentOwner","success","info","params","fetch","method","headers","body","JSON","stringify","apiId","response","json","txHash","once","transaction","toLowerCase","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    helperAttributes,\n    getDomainSeperator,\n    getDataToSignForPersonalSign,\n    getDataToSignForEIP712,\n    buildForwardTxRequest,\n    getBiconomyForwarderConfig\n  } from '../api-helpers/biconomyForwarderHelpers';\nimport {\n    NotificationContainer,\n    NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { ethers } from \"ethers\";\nimport { Biconomy } from \"@biconomy/mexa\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nlet sigUtil = require(\"eth-sig-util\");\n\n\nlet config = {\n    contract: {\n        address: \"0x880176EDA9f1608A2Bf182385379bDcC1a65Dfcf\",\n        abi: [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"forwarder\", \"type\": \"address\" }], \"name\": \"isTrustedForwarder\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"quote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"trustedForwarder\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [{ \"internalType\": \"string\", \"name\": \"newQuote\", \"type\": \"string\" }], \"name\": \"setQuote\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getQuote\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"currentQuote\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"currentOwner\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }, { \"inputs\": [], \"name\": \"versionRecipient\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\", \"constant\": true }]\n    },\n    apiKey: {\n        test: \"cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119\",\n        prod: \"8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9\"\n    },\n    api: {\n        test: \"https://test-api.biconomy.io\",\n        prod: \"https://api.biconomy.io\"\n    }\n}\n\nlet ethersProvider,walletProvider, walletSigner;\nlet contract, contractInterface;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    link: {\n        marginLeft: \"5px\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        opacity: '.85!important',\n        background: '#000'\n    },\n}));\n\nlet biconomy, userAddress;\n\nfunction App() {\n    const classes = useStyles();\n    const [backdropOpen, setBackdropOpen] = React.useState(true);\n    const [loadingMessage, setLoadingMessage] = React.useState(\" Loading Application ...\");\n    const [quote, setQuote] = useState(\"This is a default quote\");\n    const [owner, setOwner] = useState(\"Default Owner Address\");\n    const [newQuote, setNewQuote] = useState(\"\");\n    const [selectedAddress, setSelectedAddress] = useState(\"\");\n    const [metaTxEnabled] = useState(true);\n    const [transactionHash, setTransactionHash] = useState(\"\");\n\n    const handleClose = () => {\n        setBackdropOpen(false);\n    };\n\n\n\n    useEffect(() => {\n        async function init() {\n            if (\n                typeof window.ethereum !== \"undefined\" &&\n                window.ethereum.isMetaMask\n            ) {\n                // Ethereum user detected. You can now use the provider.\n                const provider = window[\"ethereum\"];\n                await provider.enable();\n                setLoadingMessage(\"Initializing Biconomy ...\");\n                // We're creating biconomy provider linked to your network of choice where your contract is deployed\n                let jsonRpcProvider = new ethers.providers.JsonRpcProvider(\"https://kovan.infura.io/v3/d126f392798444609246423b06116c77\");\n                biconomy = new Biconomy(jsonRpcProvider, {\n                    walletProvider: window.ethereum,\n                    apiKey: config.apiKey.prod,\n                    debug: true\n                });\n\n                /*\n                  This provider is linked to your wallet.\n                  If needed, substitute your wallet solution in place of window.ethereum \n                */\n                ethersProvider = new ethers.providers.Web3Provider(biconomy);\n                walletProvider = new ethers.providers.Web3Provider(window.ethereum);\n                walletSigner = walletProvider.getSigner();\n\n                userAddress = await walletSigner.getAddress()\n                setSelectedAddress(userAddress);\n\n                biconomy.onEvent(biconomy.READY, async () => {\n\n                    // Initialize your dapp here like getting user accounts etc\n                    contract = new ethers.Contract(\n                        config.contract.address,\n                        config.contract.abi,\n                        biconomy.getSignerByAddress(userAddress)\n                    );\n\n                    contractInterface = new ethers.utils.Interface(config.contract.abi);\n                    getQuoteFromNetwork();\n                }).onEvent(biconomy.ERROR, (error, message) => {\n                    // Handle error while initializing mexa\n                    console.log(message);\n                    console.log(error);\n                });\n            } else {\n                showErrorMessage(\"Metamask not installed\");\n            }\n        }\n        init();\n    }, []);\n\n    const onQuoteChange = event => {\n        setNewQuote(event.target.value);\n    };\n\n    const onSubmitWithEIP712Sign = async () => {\n      if (newQuote != \"\" && contract) {\n        setTransactionHash(\"\");\n        if (metaTxEnabled) {\n          console.log(\"Sending meta transaction\");\n          let userAddress = selectedAddress;\n\n          let { data } = await contract.populateTransaction.setQuote(newQuote);\n          let gasPrice = await ethersProvider.getGasPrice();\n          let gasLimit = await ethersProvider.estimateGas({\n            to: config.contract.address,\n            from: userAddress,\n            data: data,\n          });\n          console.log(gasLimit.toString());\n          console.log(gasPrice.toString());\n\n          let forwarder = await getBiconomyForwarderConfig(42);\n          let forwarderContract = new ethers.Contract(\n            forwarder.address,\n            forwarder.abi,\n            biconomy.getSignerByAddress(userAddress)\n          );\n\n          const batchNonce = await forwarderContract.getNonce(userAddress, 0);\n          //const batchId = await forwarderContract.getBatch(userAddress);\n\n          console.log(batchNonce);\n          const to = config.contract.address;\n          const gasLimitNum = Number(gasLimit.toNumber().toString());\n          console.log(gasLimitNum);\n          const batchId = 0;\n          const req = await buildForwardTxRequest({\n            account: userAddress,\n            to,\n            gasLimitNum,\n            batchId,\n            batchNonce,\n            data,\n          });\n          console.log(req);\n\n          const domainSeparator = await getDomainSeperator(42);\n          console.log(domainSeparator);\n\n          const dataToSign = await getDataToSignForEIP712(req, 42);\n          walletProvider\n            .send(\"eth_signTypedData_v3\", [userAddress, dataToSign])\n            .then(function (sig) {\n              sendTransaction({\n                userAddress,\n                request:req,\n                domainSeparator,\n                sig,\n                signatureType: \"EIP712_SIGN\",\n              });\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n        } else {\n          console.log(\"Sending normal transaction\");\n          let tx = await contract.setQuote(newQuote);\n          console.log(\"Transaction hash : \", tx.hash);\n          showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n          let confirmation = await tx.wait();\n          console.log(confirmation);\n          setTransactionHash(tx.hash);\n\n          showSuccessMessage(\"Transaction confirmed on chain\");\n          getQuoteFromNetwork();\n        }\n      } else {\n        showErrorMessage(\"Please enter the quote\");\n      }\n    };\n\n    const onSubmitWithPersonalSign = async () => {\n        if (newQuote != \"\" && contract) {\n          setTransactionHash(\"\");\n          if (metaTxEnabled) {\n            console.log(\"Sending meta transaction\");\n            let userAddress = selectedAddress;\n  \n            let { data } = await contract.populateTransaction.setQuote(newQuote);\n            let gasPrice = await ethersProvider.getGasPrice();\n            let gasLimit = await ethersProvider.estimateGas({\n              to: config.contract.address,\n              from: userAddress,\n              data: data,\n            });\n            console.log(gasLimit.toString());\n            console.log(gasPrice.toString());\n  \n            let forwarder = await getBiconomyForwarderConfig(42);\n            let forwarderContract = new ethers.Contract(\n              forwarder.address,\n              forwarder.abi,\n              biconomy.getSignerByAddress(userAddress)\n            );\n  \n            const batchNonce = await forwarderContract.getNonce(userAddress, 0);\n            //const batchId = await forwarderContract.getBatch(userAddress);\n  \n            console.log(batchNonce);\n            const to = config.contract.address;\n            const gasLimitNum = Number(gasLimit.toNumber().toString());\n            console.log(gasLimitNum);\n            const batchId = 0;\n            const req = await buildForwardTxRequest({\n              account: userAddress,\n              to,\n              gasLimitNum,\n              batchId,\n              batchNonce,\n              data,\n            });\n            console.log(req);\n  \n  \n            const hashToSign = getDataToSignForPersonalSign(req);\n            walletSigner.signMessage(hashToSign)\n            .then(function(sig){\n              console.log('signature ' + sig);\n              sendTransaction({userAddress, request:req, sig, signatureType:\"PERSONAL_SIGN\"});\n            })\n            .catch(function(error) {\n                console.log(error)\n              });\n\n\n          } else {\n            console.log(\"Sending normal transaction\");\n            let tx = await contract.setQuote(newQuote);\n            console.log(\"Transaction hash : \", tx.hash);\n            showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n            let confirmation = await tx.wait();\n            console.log(confirmation);\n            setTransactionHash(tx.hash);\n  \n            showSuccessMessage(\"Transaction confirmed on chain\");\n            getQuoteFromNetwork();\n          }\n        } else {\n          showErrorMessage(\"Please enter the quote\");\n        }\n      };\n\n    const onSubmitWithPrivateKey = async () => {\n        if (newQuote != \"\" && contract) {\n            setTransactionHash(\"\");\n            try {\n                if (metaTxEnabled) {\n                    let privateKey = \"bf096e6fb9754860c4c99eb336c0579db994a3ef7fb3f7db869ad2f1972fc755\";\n                    let userAddress = \"0xf7AB2d00f379167c339691c23B23111eB598B3fb\";\n                    let userSigner = new ethers.Wallet(privateKey);\n                    let { data } = await contract.populateTransaction.setQuote(newQuote);\n                    let gasPrice = await ethersProvider.getGasPrice();\n                    let gasLimit = await ethersProvider.estimateGas({\n                      to: config.contract.address,\n                      from: userAddress,\n                      data: data,\n                    });\n                    console.log(gasLimit.toString());\n                    console.log(gasPrice.toString());\n          \n                    let forwarder = await getBiconomyForwarderConfig(42);\n                    let forwarderContract = new ethers.Contract(\n                      forwarder.address,\n                      forwarder.abi,\n                      biconomy.getSignerByAddress(userAddress)\n                    );\n          \n                    const batchNonce = await forwarderContract.getNonce(userAddress, 0);\n                    //const batchId = await forwarderContract.getBatch(userAddress);\n          \n                    console.log(batchNonce);\n                    const to = config.contract.address;\n                    const gasLimitNum = Number(gasLimit.toNumber().toString());\n                    console.log(gasLimitNum);\n                    const batchId = 0;\n                    const req = await buildForwardTxRequest({\n                      account: userAddress,\n                      to,\n                      gasLimitNum,\n                      batchId,\n                      batchNonce,\n                      data,\n                    });\n                    console.log(req);\n          \n                    const hashToSign = getDataToSignForPersonalSign(req);\n\n                    const signature = await userSigner.signMessage(hashToSign);\n                      sendTransaction({\n                        userAddress,\n                        request:req,\n                        sig:signature,\n                        signatureType: \"PERSONAL_SIGN\",\n                      });\n\n                    \n                } else {\n                    console.log(\"Sending normal transaction\");\n                    let tx = await contract.setQuote(newQuote);\n                    console.log(\"Transaction hash : \", tx.hash);\n                    showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);\n                    let confirmation = await tx.wait();\n                    console.log(confirmation);\n                    setTransactionHash(tx.hash);\n\n                    showSuccessMessage(\"Transaction confirmed on chain\");\n                    getQuoteFromNetwork();\n                }\n            } catch (error) {\n                console.log(error);\n                handleClose();\n            }\n        } else {\n            showErrorMessage(\"Please enter the quote\");\n        }\n    }\n\n    const getQuoteFromNetwork = async () => {\n        setLoadingMessage(\"Getting Quote from contact ...\");\n        let result = await contract.getQuote();\n        if (\n            result &&\n            result.currentQuote != undefined &&\n            result.currentOwner != undefined\n        ) {\n            if (result.currentQuote == \"\") {\n                showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n                setQuote(result.currentQuote);\n                setOwner(result.currentOwner);\n            }\n        } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n        }\n        handleClose();\n    };\n\n    const showErrorMessage = message => {\n        NotificationManager.error(message, \"Error\", 5000);\n    };\n\n    const showSuccessMessage = message => {\n        NotificationManager.success(message, \"Message\", 3000);\n    };\n\n    const showInfoMessage = message => {\n        NotificationManager.info(message, \"Info\", 3000);\n    };\n\n    const sendTransaction = async ({userAddress, request, sig, domainSeparator, signatureType}) => {\n        if (ethersProvider && contract) {\n          let params;\n          if (domainSeparator) {\n            params = [request, domainSeparator, sig];\n          } else {\n            params = [request, sig];\n          }\n          try {\n            fetch(`${config.api.prod}/api/v2/meta-tx/native`, {\n              method: \"POST\",\n              headers: {\n                \"x-api-key\": config.apiKey.prod,\n                \"Content-Type\": \"application/json;charset=utf-8\",\n              },\n              body: JSON.stringify({\n                to: config.contract.address,\n                apiId: \"34bfa8b9-57e7-4d32-b983-63c3f698cddd\",\n              //apiId: \"ca45b2dc-0279-4952-87cd-bbc584427538\",\n                params: params,\n                from: userAddress,\n                signatureType: signatureType\n              }),\n            })\n              .then((response) => response.json())\n              .then(function(result) {\n                console.log(result);\n                showInfoMessage(`Transaction sent by relayer with hash ${result.txHash}`);\n                return result.txHash;\n                // todo - fetch mined transaction receipt, show tx confirmed and update quotes\n              }).then(function(hash){     \n                 //event emitter methods\n                ethersProvider.once(hash, (transaction) => {\n                // Emitted when the transaction has been mined\n                console.log(transaction);\n                setTransactionHash(hash);\n                getQuoteFromNetwork();\n                })\n              })\n              .catch(function (error) {\n                console.log(error);\n              });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n    };\n\n\n    return (\n        <div className=\"App\">\n            <section className=\"top-row\">\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Library </span>\n                    <span className=\"label-value\">ethers.js</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Meta Transaction</span>\n                    <span className=\"label-value\">EIP-2771</span>\n                </div>\n                <div className=\"top-row-item\">\n                    <span className=\"label\">Signature Type</span>\n                    <span className=\"label-value\">EIP-712 Signature</span>\n                </div>\n            </section>\n            <section className=\"main\">\n                <div className=\"mb-wrap mb-style-2\">\n                    <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n                        <p>{quote}</p>\n                    </blockquote>\n                </div>\n\n                <div className=\"mb-attribution\">\n                    <p className=\"mb-author\">{owner}</p>\n                    {selectedAddress.toLowerCase() === owner.toLowerCase() && (\n                        <cite className=\"owner\">You are the owner of the quote</cite>\n                    )}\n                    {selectedAddress.toLowerCase() !== owner.toLowerCase() && (\n                        <cite>You are not the owner of the quote</cite>\n                    )}\n                </div>\n            </section>\n            <section>\n                {transactionHash !== \"\" && <Box className={classes.root} mt={2} p={2}>\n                    <Typography>\n                        Check your transaction hash\n            <Link href={`https://kovan.etherscan.io/tx/${transactionHash}`} target=\"_blank\"\n                            className={classes.link}>\n                            here\n            </Link>\n                    </Typography>\n                </Box>}\n            </section>\n            <section>\n                <div className=\"submit-container\">\n                    <div className=\"submit-row\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter your quote\"\n                            onChange={onQuoteChange}\n                            value={newQuote}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" onClick={onSubmitWithEIP712Sign} style={{ marginLeft: \"10px\" }}>\n                            Submit With EIP712 Sign\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={onSubmitWithPersonalSign} style={{ marginLeft: \"10px\" }}>\n                            Submit With Personal Sign\n            </Button>\n\n                        <Button variant=\"contained\" color=\"secondary\" onClick={onSubmitWithPrivateKey} style={{ marginLeft: \"10px\" }}>\n                            Submit (Private Key)\n            </Button>\n                    </div>\n                </div>\n            </section>\n            <Backdrop className={classes.backdrop} open={backdropOpen} onClick={handleClose}>\n                <CircularProgress color=\"inherit\" />\n                <div style={{ paddingLeft: \"10px\" }}>{loadingMessage}</div>\n            </Backdrop>\n            <NotificationContainer />\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}